{"mappings":"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","sources":["src/shader-program.js","src/buffer.js","src/vertex-buffer.js","src/element-buffer.js","src/vertex-array-object.js","src/texture-object.js","src/webgl-canvas.js"],"sourcesContent":["\nimport WebGLCanvas from './webgl-canvas.js';\n\nexport default ShaderProgram;\n\n/**\n * Creates a WebGL GLSL Shader Program.\n * @param {WebGLCanvas} gl\n * @param {string} vertexShaderSource\n * @param {string} fragmentShaderSource\n */\nfunction ShaderProgram (gl, vertexShaderSource, fragmentShaderSource)\n{\n\t/**\n\t * Reference to the WebGLCanvas.\n\t * @readonly @type {WebGLCanvas}\n\t */\n\tthis.gl = gl;\n\n\t/**\n\t * Vertex shader resource object.\n\t * @readonly @type {WebGLShader}\n\t */\n\tthis.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\tgl.shaderSource(this.vertexShader, vertexShaderSource);\n\tgl.compileShader(this.vertexShader);\n\n\t/**\n\t * Fragment shader resource object.\n\t * @readonly @type {WebGLShader}\n\t */\n\tthis.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(this.fragmentShader, fragmentShaderSource);\n\tgl.compileShader(this.fragmentShader);\n\n\t/**\n\t * Shader program resource object.\n\t * @readonly @type {WebGLProgram}\n\t */\n\tthis.program = gl.createProgram();\n\tgl.attachShader(this.program, this.vertexShader);\n\tgl.attachShader(this.program, this.fragmentShader);\n};\n\n/**\n * Links the program and throws an error if there was any problem.\n * @throws {Error}\n * @returns {ShaderProgram}\n */\nShaderProgram.prototype.linkProgram = function()\n{\n\tfor (let attribName in ShaderProgram.attribLocations) {\n\t\tthis.gl.bindAttribLocation(this.program, ShaderProgram.attribLocations[attribName], attribName);\n\t}\n\n\tthis.gl.linkProgram (this.program);\n\tif (this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS))\n\t{\n\t\tthis.gl.deleteShader(this.vertexShader)\n\t\tthis.gl.deleteShader(this.fragmentShader)\n\t\treturn this;\n\t}\n\n\tlet vertexError = this.gl.getShaderInfoLog(this.vertexShader);\n\tlet fragmentError = this.gl.getShaderInfoLog(this.fragmentShader);\n\n\tthrow new Error(\n\t\tvertexError ? ('• Vertex Shader:\\n' + vertexError + '\\n') : '' +\n\t\tfragmentError ? ('• Fragment Shader:\\n' + fragmentError) : ''\n\t);\n};\n\n/**\n * Binds an attribute location to the shader program.\n * @param {number} attribLocation\n * @param {string} attribName\n * @returns {ShaderProgram}\n */\nShaderProgram.prototype.bindAttribLocation = function (attribLocation, attribName)\n{\n\tthis.gl.bindAttribLocation(this.program, attribLocation, attribName);\n\treturn this;\n};\n\n/**\n * Map of global attribute locations.\n * @readonly @private\n * @type {Map<string, number>}\n */\nShaderProgram.attribLocations = new Map();\n\n/**\n * Binds a global attribute location to be applied to any newly created shader program.\n * @param {number} attribLocation\n * @param {string} attribName\n * @returns {ShaderProgram}\n */\nShaderProgram.bindAttribLocation = function (attribLocation, attribName)\n{\n\tthis.attribLocations[attribName] = attribLocation;\n\treturn this;\n};\n\n/**\n * Binds several global attribute locations to be applied to any newly created shader program.\n * @param {Map<string, number>} attribs\n * @returns {ShaderProgram}\n */\nShaderProgram.bindAttribLocations = function (attribs)\n{\n\tfor (let attribName in attribs) {\n\t\tthis.attribLocations[attribName] = attribs[attribName];\n\t}\n\n\treturn this;\n};\n\n/**\n * Returns the location of a uniform variable.\n * @param {string} uniformName\n * @returns {WebGLUniformLocation}\n */\nShaderProgram.prototype.getUniformLocation = function (uniformName)\n{\n\t// TODO Add cache here.\n\treturn this.gl.getUniformLocation(this.program, uniformName);\n};\n\n/**\n * Returns the location of one or more uniform variables.\n * @param {Array<string>} uniformNames\n * @returns { [key: string]: WebGLUniformLocation }\n */\nShaderProgram.prototype.getUniformLocations = function (uniformNames)\n{\n\tlet uniforms = { };\n\n\tfor (let uniformName of uniformNames) {\n\t\tuniforms[uniformName] = this.getUniformLocation(uniformName);\n\t}\n\n\treturn uniforms;\n};\n\n/**\n * Activates the shader program for subsequent drawing operations.\n */\nShaderProgram.prototype.useProgram = function ()\n{\n\tthis.gl.useProgram(this.program);\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\n\n/**\n * Represents a WebGL buffer.\n */\nexport default class Buffer\n{\n\t/**\n\t * Reference to the WebGLCanvas.\n\t * @readonly @type {WebGLCanvas}\n\t */\n\tgl;\n\n\t/**\n\t * Buffer target.\n\t * @type {number}\n\t */\n\ttarget;\n\n\t/**\n\t * Buffer usage mode.\n\t * @type {number}\n\t */\n\tusage;\n\n\t/**\n\t * Buffer object resource.\n\t * @type {WebGLBuffer}\n\t */\n\tbuffer;\n \n\t/**\n\t * Creates a WebGL buffer.\n\t * @param {WebGLCanvas} gl\n\t * @param {number} target\n\t * @param {number} usage\n\t */\n\tconstructor (gl, target, usage)\n\t{\n\t\tthis.gl = gl;\n\t\tthis.target = target;\n\t\tthis.usage = usage;\n\t\tthis.buffer = gl.createBuffer();\n\t}\n\n\t/**\n\t * Binds the buffer to its WebGL target.\n\t * @returns {Buffer}\n\t */\n\tbindBuffer()\n\t{\n\t\tthis.gl.bindBuffer(this.target, this.buffer);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Initializes and creates the buffer object's data store.\n\t * @param {ArrayBufferView} srcData\n\t * @param {number} srcOffset?\n\t * @returns {Buffer}\n\t */\n\tbufferData (srcData, srcOffset=0)\n\t{\n\t\tthis.gl.bindBuffer(this.target, this.buffer);\n\t\tthis.gl.bufferData(this.target, srcData, this.usage, srcOffset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates a subset of the buffer object's data store. \n\t * @param {number} dstByteOffset\n\t * @param {ArrayBufferView} srcData\n\t * @param {number} srcOffset?\n\t * @param {number} length?\n\t * @returns {Buffer}\n\t */\n\tbufferSubData (dstByteOffset, srcData, srcOffset=0, length=0)\n\t{\n\t\tthis.gl.bindBuffer(this.target, this.buffer);\n\t\tthis.gl.bufferSubData(this.target, dstByteOffset, srcData, srcOffset, length ? length : srcData.length);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the buffer.\n\t */\n\tdeleteBuffer()\n\t{\n\t\tthis.gl.deleteBuffer(this.buffer);\n\t}\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\nimport Buffer from './buffer.js';\n\nexport default class VertexBuffer extends Buffer\n{\n\t/**\n\t * Creates a VertexBuffer linked to the ARRAY_BUFFER target.\n\t * @param {WebGLCanvas} gl\n\t * @param {number} usage\n\t */\n\t constructor (gl, usage)\n\t {\n\t\t super (gl, gl.ARRAY_BUFFER, usage);\n\t }\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\nimport Buffer from './buffer.js';\n\nexport default class ElementBuffer extends Buffer\n{\n\t/**\n\t * Creates a ElementBuffer linked to the ELEMENT_ARRAY_BUFFER target.\n\t * @param {WebGLCanvas} gl\n\t * @param {number} usage\n\t */\n\t constructor (gl, usage)\n\t {\n\t\t super (gl, gl.ELEMENT_ARRAY_BUFFER, usage);\n\t }\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\n\nexport default VertexArrayObject;\n\n/**\n * Creates a Vertex Array Object (VAO).\n * @param {WebGLCanvas} gl\n */\nfunction VertexArrayObject (gl)\n{\n\t/**\n\t * Reference to the WebGLCanvas.\n\t * @readonly @type {WebGLCanvas}\n\t */\n\tthis.gl = gl;\n\n\t/**\n\t * Vertex array object resource.\n\t * @type {WebGLVertexArrayObject}\n\t */\n\tthis.vertexArray = gl.createVertexArray();\n};\n\n/**\n * Binds the vertex array object to the GPU.\n */\nVertexArrayObject.prototype.bindVertexArray = function()\n{\n\tthis.gl.bindVertexArray(this.vertexArray);\n};\n\n/**\n * Unbinds the vertex array object from the GPU.\n */\nVertexArrayObject.prototype.unbindVertexArray = function()\n{\n\tthis.gl.bindVertexArray(null);\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\n\n/**\n * @typedef {'NEAREST' | 'LINEAR'} TextureFilterType\n */\n/**\n * @typedef {'REPEAT' | 'CLAMP_TO_EDGE' | 'MIRRORED_REPEAT'} TextureWrapMode\n */\n\n/**\n * WebGLCanvas Texture Object.\n */\nexport default class TextureObject\n{\n\t/**\n\t * Reference to the WebGLCanvas.\n\t * @readonly @type {WebGLCanvas}\n\t */\n\tgl;\n\n\t/**\n\t * Texture object resource.\n\t * @readonly @type {WebGLTexture}\n\t */\n\ttexture;\n\n\t/**\n\t * Texture width (physical width).\n\t * @readonly @type {number}\n\t */\n\twidth;\n\n\t/**\n\t * Texture height (physical height).\n\t * @readonly @type {number}\n\t */\n\theight;\n\n\t/**\n\t * Target width originally requested (logical width).\n\t * @readonly @type {number}\n\t */\n\ttargetWidth;\n\n\t/**\n\t * Target height originally requested (logical height).\n\t * @readonly @type {number}\n\t */\n\ttargetHeight;\n\n\t/**\n\t * Scale of the texture (physical width / logical width).\n\t * @readonly @type {number}\n\t */\n\tscale;\n\n\t/**\n\t * Texture filter type. Defaults to `LINEAR`.\n\t * @readonly @type {TextureFilterType}\n\t */\n\tfilterType;\n\n\t/**\n\t * Texture wrap mode. Defaults to `CLAMP_TO_EDGE`.\n\t * @readonly @type {TextureWrapMode}\n\t */\n\twrapMode;\n\n\t/**\n\t * Number of mipmap levels (use 0 to disable). Default is `0`.\n\t * @readonly @type {number}\n\t */\n\tmipmapLevels;\n\n\t/**\n\t * Indicates if the texture storage has already been allocated.\n\t * @readonly @private @type {boolean}\n\t */\n\tallocated;\n\n\t/**\n\t * Creates an empty texture object of the specified size.\n\t * @param {WebGLCanvas} gl\n\t * @param {number} width - Physical texture width.\n\t * @param {number} height - Physical texture height.\n\t * @param {number} [targetWidth] - Logical texture width.\n\t * @param {number} [targetHeight] - Logical texture height.\n\t */\n\tconstructor (gl, width, height, targetWidth=null, targetHeight=null)\n\t{\n\t\tthis.gl = gl;\n\t\tthis.texture = gl.createTexture();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.targetWidth = targetWidth ?? width;\n\t\tthis.targetHeight = targetHeight ?? height;\n\t\tthis.scale = this.width / this.targetWidth;\n\n\t\tthis.allocated = false;\n\t\tthis.mipmapLevels = 0;\n\t\tthis.wrapMode = 'CLAMP_TO_EDGE';\n\t\tthis.filterType = 'LINEAR';\n\t}\n\n\t/**\n\t * Binds the texture to the `TEXTURE_2D` target and allocates the texture storage if not allocated yet.\n\t * @returns {TextureObject}\n\t */\n\tbindTexture()\n\t{\n\t\tthis.gl.bindTexture (this.gl.TEXTURE_2D, this.texture);\n\t\tif (this.allocated !== false) return this;\n\n\t\tthis.allocated = null;\n\t\tthis.allocate();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Allocates the texture storage.\n\t * @returns {TextureObject}\n\t */\n\tallocate()\n\t{\n\t\tif (this.allocated === true)\n\t\t\treturn this;\n\n\t\tthis.allocated = true;\n\t\tthis.bindTexture().applyFilter().applyWrap();\n\n\t\tif (this.mipmapLevels > 0)\n\t\t\tthis.gl.texStorage2D(this.gl.TEXTURE_2D, this.mipmapLevels, this.gl.RGBA8, this.width, this.height);\n\t\telse\n\t\t\tthis.gl.texStorage2D(this.gl.TEXTURE_2D, 1, this.gl.RGBA8, this.width, this.height);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Applies the texture filter.\n\t * @private\n\t * @param {boolean} [bindTexture]\n\t * @returns {TextureObject}\n\t */\n\tapplyFilter (bindTexture=false)\n\t{\n\t\tif (bindTexture) this.bindTexture();\n\n\t\tlet minFilter = this.gl.LINEAR;\n\t\tlet magFilter = this.gl.LINEAR;\n\n\t\tif (this.filterType === 'NEAREST')\n\t\t\tminFilter = magFilter = this.gl.NEAREST;\n\n\t\tif (this.mipmapLevels > 0)\n\t\t{\n\t\t\tminFilter = this.gl.LINEAR_MIPMAP_LINEAR\n\n\t\t\tif (this.filterType === 'NEAREST')\n\t\t\t\tminFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n\t\t}\n\n\t\tthis.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, minFilter);\n\t\tthis.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, magFilter);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Applies the texture wrap mode.\n\t * @private\n\t * @param {boolean} [bindTexture]\n\t * @returns {TextureObject}\n\t */\n\tapplyWrap (bindTexture=false)\n\t{\n\t\tif (bindTexture) this.bindTexture();\n\n\t\tlet wrapMode = this.gl.CLAMP_TO_EDGE;\n\n\t\tif (this.wrapMode === 'REPEAT')\n\t\t\twrapMode = this.gl.REPEAT;\n\t\telse if (this.wrap === 'MIRRORED_REPEAT')\n\t\t\twrapMode = this.gl.MIRRORED_REPEAT;\n\n\t\tthis.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, wrapMode);\n\t\tthis.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, wrapMode);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the texture filter type.\n\t * @param {TextureFilterType} filterType\n\t * @returns {TextureObject}\n\t */\n\tsetFilter (filterType)\n\t{\n\t\tthis.filterType = filterType;\n\t\treturn this.allocated === true ? this.applyFilter(true) : this;\n\t}\n\n\t/**\n\t * Sets the texture wrap mode.\n\t * @param {TextureWrapMode} wrapMode\n\t * @returns {TextureObject}\n\t */\n\tsetWrapMode (wrapMode)\n\t{\n\t\tthis.wrapMode = wrapMode;\n\t\treturn this.allocated === true ? this.applyWrap(true) : this;\n\t}\n\n\t/**\n\t * Sets the number of mipmap levels. Valid only if texture data has not been allocated yet.\n\t * @param {number} numLevels\n\t * @returns {TextureObject}\n\t */\n\tsetMipmapLevels (numLevels)\n\t{\n\t\tif (this.allocated === true)\n\t\t\treturn this;\n\n\t\tthis.mipmapLevels = Math.max(0, numLevels);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Uploads data to the GPU from the specified image.\n\t * @param {HTMLImageElement} image\n\t * @param {number} [offsX] - Target X offset.\n\t * @param {number} [offsY] - Target Y offset;\n\t * @returns {TextureObject}\n\t */\n\tupload (image, offsX=0, offsY=0)\n\t{\n\t\tthis.bindTexture();\n\t\tthis.gl.texSubImage2D(this.gl.TEXTURE_2D, 0, offsX, offsY, Math.min(image.width, this.width), Math.min(image.height, this.height), this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);\n\n\t\tif (this.mipmapLevels > 0)\n\t\t\tthis.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n\t\treturn this;\n\t}\n};\n","\nimport ShaderProgram from './shader-program.js';\nimport VertexBuffer from './vertex-buffer.js';\nimport ElementBuffer from './element-buffer.js';\nimport VertexArrayObject from './vertex-array-object.js';\nimport { Mat3, Vec4 } from 'froxel-math';\nimport TextureObject from './texture-object.js';\n\nexport default WebGLCanvas;\n\n/**\n * @typedef {'default'|'landscape'|'portrait'|'automatic'|'strict'} WebGLCanvasOrientation\n */\n\n/**\n * @typedef {Object} WebGLCanvasOptions\n * @prop {boolean} [fullscreen] Positions the canvas to cover the entire screen. default `true`\n * @prop {boolean} [stencil] Indicates if the stencil buffer should be enabled. default `false`\n * @prop {string} [background] Background color, must be a 6-digit hex RGB value. default `000000`\n * @prop {number} [width] Width of the canvas, used only when `fullscreen` is `false`. default `960`\n * @prop {number} [height] Height of the canvas, used only when `fullscreen` is `false`. default `540`\n * @prop {WebGLCanvasOrientation} [orientation] Orientation of the canvas. Defaults to `AUTOMATIC`.\n * @prop {boolean} [antialias] Controls the antialias option, set to `false` for pixel-perfect output. Default is `true`.\n * @prop {number} [scaleFactorMax] Limit of the scale factor, used only when set to greater than zero.\n * @prop {number} [scaleFactorOffs] Offset used to increase the scale factor before the Math.floor operation. Default is `0.7`.\n */\n\nconst defaultOptions = {\n\tfullscreen: true,\n\tstencil: false,\n\tbackground: '000000',\n\twidth: 960,\n\theight: 540,\n\torientation: 'automatic',\n\tantialias: true,\n\tscaleFactorMax: 0,\n\tscaleFactorOffs: 0.7,\n};\n\n/**\n * List of active canvases. Registered when the WebGLCanvas is created, and removed when it is disposed.\n */\nconst activeCanvases = [\n];\n\n/**\n * Indicates if the auto-resizer has been attached to the window.\n */\nlet autoResizerAttached = false;\n\n/**\n * \n */\nfunction autoResizeCanvas (wgl)\n{\n\tlet fullWidth = wgl.options.width;\n\tlet fullHeight = wgl.options.height;\n\n\tif (wgl.options.fullscreen && ('document' in global)) {\n\t\tfullWidth = Math.floor(global.innerWidth);\n\t\tfullHeight = Math.floor(global.innerHeight);\n\t}\n\telse {\n\t\tif (wgl.options.width === null && wgl.options.height === null)\n\t\t\tthrow new Error ('At least one screen dimension must be specified in headless mode.');\n\t}\n\n\t// Flip dimensions to ensure the desired orientation.\n\tlet currentWidth = fullWidth;\n\tlet currentHeight = fullHeight;\n\tlet flipped = false;\n\n\tif ((fullWidth < fullHeight && wgl.options.orientation === 'landscape') || (fullWidth > fullHeight && wgl.options.orientation === 'portrait')) {\n\t\tcurrentWidth = fullHeight;\n\t\tcurrentHeight = fullWidth;\n\t\tflipped = true;\n\t}\n\n\t// Get target screen dimensions.\n\tlet targetWidth = wgl.options.width;\n\tlet targetHeight = wgl.options.height;\n\n\tif (targetWidth === null || targetHeight === null)\n\t{\n\t\tif (targetWidth === null && targetHeight === null) {\n\t\t\ttargetWidth = currentWidth;\n\t\t\ttargetHeight = currentHeight;\n\t\t}\n\t\telse if (targetWidth === null)\n\t\t\ttargetWidth = Math.floor(0.5 + currentWidth * (wgl.options.height / currentHeight));\n\t\telse\n\t\t\ttargetHeight = Math.floor(0.5 + currentHeight * (wgl.options.width / currentWidth));\n\t}\n\n\t// Handle `automatic` canvas orientation.\n\tlet screenWidth = targetWidth;\n\tlet screenHeight = targetHeight;\n\n\tif (wgl.options.orientation === 'automatic' && screenWidth && screenHeight)\n\t{\n\t\tif ((screenWidth > screenHeight && currentWidth < currentHeight) || (screenWidth < screenHeight && currentWidth > currentHeight)) {\n\t\t\tscreenWidth = targetHeight;\n\t\t\tscreenHeight = targetWidth;\n\t\t}\n\t}\n\n\t// Compute canvas scale factor.\n\tlet canvasScaleFactor = 1;\n\n\tif (screenWidth && screenHeight)\n\t\tcanvasScaleFactor = Math.min(currentWidth / screenWidth, currentHeight / screenHeight);\n\telse if (screenWidth)\n\t\tcanvasScaleFactor = currentWidth / screenWidth;\n\telse if (screenHeight)\n\t\tcanvasScaleFactor = currentHeight / screenHeight;\n\n\t// ***\n\tlet tmpWidth = currentWidth;\n\tlet tmpHeight = currentHeight;\n\n\tif (screenWidth) currentWidth = screenWidth;\n\tif (screenHeight) currentHeight = screenHeight;\n\n\tlet offsX = Math.floor((tmpWidth - currentWidth*canvasScaleFactor)*0.5);\n\tlet offsY = Math.floor((tmpHeight - currentHeight*canvasScaleFactor)*0.5);\n\n\tif (flipped) {\n\t\tlet tmp = offsX;\n\t\toffsX = offsY;\n\t\toffsY = tmp;\n\t}\n\n\tlet scaleFactor = canvasScaleFactor * global.devicePixelRatio;\n\tscaleFactor = Math.floor(wgl.options.scaleFactorOffs + scaleFactor);\n\n\tif (wgl.options.scaleFactorMax > 0 && scaleFactor > wgl.options.scaleFactorMax)\n\t\tscaleFactor = wgl.options.scaleFactorMax;\n\n\tif (wgl.options.fullscreen && ('document' in global))\n\t\tglobal.document.body.style.backgroundColor = wgl.canvas.style.backgroundColor;\n\n\twgl.resize(currentWidth, currentHeight, false);\n\n\tif (!flipped) {\n\t\twgl.canvas.style.width = Math.floor(currentWidth*canvasScaleFactor+0.5) + 'px';\n\t\twgl.canvas.style.height = Math.floor(currentHeight*canvasScaleFactor+0.5) + 'px';\n\t}\n\telse {\n\t\twgl.canvas.style.width = Math.floor(currentHeight*canvasScaleFactor+0.5) + 'px';\n\t\twgl.canvas.style.height = Math.floor(currentWidth*canvasScaleFactor+0.5) + 'px';\n\t}\n\n\twgl.canvas.style.marginLeft = offsX + 'px';\n\twgl.canvas.style.marginTop = offsY + 'px';\n\n\twgl.globalScale = scaleFactor;\n\twgl.isFlipped = flipped;\n\n\twgl.u.transform.identity();\n\twgl.u.transform.scale(scaleFactor, scaleFactor);\n\n\tif (flipped) {\n\t\twgl.u.transform.rotate(Math.PI/2);\n\t\twgl.u.transform.translate(-currentWidth, 0);\n\t}\n\n\twgl.updateViewport();\n\n\t//console.log('logical', wgl.width, wgl.height);\t\n\t//console.log('canvas-logical', wgl.canvas.width, wgl.canvas.height);\n\t//console.log('canvas-css', wgl.canvas.style.width, wgl.canvas.style.height);\n\t//console.log('phys', wgl.physWidth, wgl.physHeight);\n\t//console.log('webGl', wgl.gl.drawingBufferWidth, wgl.gl.drawingBufferHeight);\n\t//console.log('globalScale', wgl.globalScale);\n\t//console.log('canvasScaleFactor', canvasScaleFactor);\n\n\t/* *** */\n\t//if (options.maxScaleFactor > 0 && scaleFactor > options.maxScaleFactor)\n\t//\tscaleFactor = options.maxScaleFactor;\n\n\t//_this.integerScaleFactor = Math.floor(scaleFactor + 0.5); //0.9\n};\n\n/**\n * High performance WebGL2 Canvas.\n *\n * Default WebGL configuration is set as follows:\n *\n * - `DEPTH_TEST`: enabled, `clearDepth`: 0.0, `depthFunc`: GEQUAL\n * - `BLEND`: enabled, `blendEquationSeparate`: FUNC_ADD, FUNC_ADD, `blendFunc`: ONE, ONE_MINUS_SRC_ALPHA\n * - `UNPACK_PREMULTIPLY_ALPHA_WEBGL`: enabled\n * - `SCISSOR_TEST`: enabled\n *\n * @extends {WebGL2RenderingContext}\n * @param {WebGLCanvasOptions} [options]\n */\nfunction WebGLCanvas (options=null)\n{\n\tif (!autoResizerAttached)\n\t{\n\t\tglobal.onresize = function() {\n\t\t\tfor (let wgl of activeCanvases) autoResizeCanvas(wgl);\n\t\t};\n\n\t\tautoResizerAttached = true;\n\t}\n\n\tthis.init({ ...defaultOptions, ...options });\n\tactiveCanvases.push(this);\n}\n\n/**\n * Disposes the canvas and all related resources.\n */\nWebGLCanvas.prototype.dispose = function()\n{\n\tactiveCanvases.splice(activeCanvases.indexOf(this), 1);\n};\n\n/**\n * WebGL2 Context.\n * @private @readonly @type {WebGL2RenderingContext}\n */\nWebGLCanvas.prototype.gl = null;\n\n/**\n * @typedef {Object} WebGLCanvasUniforms\n * @prop {boolean} changed Indicates if the uniforms have changed.\n * @prop {Mat3} transform Initial transformation matrix.\n * @prop {Vec4} resolution Canvas resolution.\n */\n\n/**\n * Canvas uniforms.\n * @readonly @type {WebGLCanvasUniforms}\n */\nWebGLCanvas.prototype.u = null;\n\n/**\n * Underlying HTML5 canvas element.\n * @readonly @type {HTMLCanvasElement}\n */\nWebGLCanvas.prototype.canvas = null;\n\n/**\n * Logical width of the canvas.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.width = 0;\n\n/**\n * Logical height of the canvas.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.height = 0;\n\n/**\n * Physical canvas width.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.physWidth = 0;\n\n/**\n * Physical canvas height.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.physHeight = 0;\n\n/**\n * Indicates if the canvas is flipped.\n * @readonly @type {boolean}\n */\nWebGLCanvas.prototype.isFlipped = false;\n\n/**\n * Canvas global scale.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.globalScale = 1.0;\n\n\n/**\n * Initializes the instance.\n * @private\n */\nWebGLCanvas.prototype.init = function (options)\n{\n\tthis.canvas = document.createElement('canvas');\n\tthis.options = options;\n\n\tif (!options.fullscreen && (!options.width || !options.height))\n\t\tthrow new Error ('Option `width` or `height` is missing while `fullscreen` is `false`.');\n\n\tif (options.background.length != 6)\n\t\tthrow new Error ('Option `background` should be a 6-digit hex RGB (i.e. 000000).');\n\n\tthis.canvas.style.imageRendering = options.antialias ? 'auto' : 'crisp-edges';\n\tthis.canvas.style.backgroundColor = '#' + options.background;\n\n\tif (options.fullscreen) {\n\t\tthis.canvas.style.position = 'absolute';\n\t\tthis.canvas.style.left = '0px';\n\t\tthis.canvas.style.top = '0px';\n\t}\n\n\t// Get WebGL context and re-bind to the WebGLCanvas object.\n\tthis.gl = this.canvas.getContext('webgl2', { desynchronized: false, preserveDrawingBuffer: false, alpha: false, stencil: options.stencil });\n\n\tfor (let prop in this.gl)\n\t{\n\t\tlet val = this.gl[prop];\n\t\tswitch (typeof(val))\n\t\t{\n\t\t\tcase 'function':\n\t\t\t\tthis[prop] = val.bind(this.gl);\n\t\t\t\tbreak;\n\n\t\t\tcase 'number':\n\t\t\t\tthis[prop] = val;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconsole.log(this.getParameter(this.VERSION) + ', ' + this.getParameter(this.SHADING_LANGUAGE_VERSION));\n\n\t// Initialize default configuration.\n\tthis.u = {\n\t\tchanged: true,\n\t\ttransform: Mat3.alloc(),\n\t\tresolution: Vec4.alloc()\n\t};\n\n\tthis.clearColor (parseInt(options.background.substring(0,2), 16)/255.0, parseInt(options.background.substring(2,4), 16)/255.0, parseInt(options.background.substring(4,6), 16)/255.0, 1.0);\n\n\tthis.enable (this.DEPTH_TEST);\n\tthis.clearDepth (0.0);\n\tthis.depthFunc (this.GEQUAL);\n\n\tthis.enable (this.BLEND);\n\tthis.pixelStorei (this.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n\tthis.blendEquationSeparate (this.FUNC_ADD, this.FUNC_ADD);\n\tthis.blendFunc (this.ONE, this.ONE_MINUS_SRC_ALPHA);\n\n\tthis.enable (this.SCISSOR_TEST);\n\tautoResizeCanvas(this);\n};\n\n/**\n * Resizes the canvas to the specified logical size.\n * @param {number} width\n * @param {number} height\n */\nWebGLCanvas.prototype.resize = function (width, height, updateViewport=true)\n{\n\tthis.width = width;\n\tthis.height = height;\n\n\tif (updateViewport)\n\t\tthis.updateViewport();\n};\n\nWebGLCanvas.prototype.updateViewport = function ()\n{\n\tthis.physWidth = this.canvas.width = Math.floor((this.isFlipped ? this.height : this.width) * this.globalScale);\n\tthis.physHeight = this.canvas.height = Math.floor((this.isFlipped ? this.width : this.height) * this.globalScale);\n\n\tthis.scissor (0, 0, this.physWidth, this.physHeight);\n\tthis.viewport (0, 0, this.physWidth, this.physHeight);\n\n\t//violet:hardware scaling\n\t//this.v_resolution[0] = this._width;\n\t//this.v_resolution[1] = this._height;\n\tthis.u.resolution.set(this.physWidth, this.physHeight, this.isFlipped ? this.physHeight : this.physWidth, this.isFlipped ? this.physWidth : this.physHeight);\n\tthis.u.changed = true;\n};\n\n/**\n * Creates a shader program with the specified vertex and fragment shader source codes.\n * @param {string} vertexShaderSource\n * @param {string} fragmentShaderSource\n * @returns {ShaderProgram}\n */\nWebGLCanvas.prototype.createShaderProgram = function (vertexShaderSource, fragmentShaderSource) {\n\treturn new ShaderProgram (this, vertexShaderSource, fragmentShaderSource);\n};\n\n/**\n * Creates a new vertex array object.\n * @returns {VertexArrayObject}\n */\nWebGLCanvas.prototype.createVertexArrayObject = function () {\n\treturn new VertexArrayObject (this);\n};\n\n/**\n * Creates a new vertex buffer.\n * @param {number} usage Possible values are: `STATIC_DRAW`, `DYNAMIC_DRAW`, `STREAM_DRAW`, `STATIC_READ`, `DYNAMIC_READ`, `STREAM_READ`, `STATIC_COPY`, `DYNAMIC_COPY`, or `STREAM_COPY`.\n * @returns {VertexBuffer}\n */\nWebGLCanvas.prototype.createVertexBuffer = function (usage) {\n\treturn new VertexBuffer(this, usage);\n};\n\n/**\n * Creates a new element buffer.\n * @param {number} usage Possible values are: `STATIC_DRAW`, `DYNAMIC_DRAW`, `STREAM_DRAW`, `STATIC_READ`, `DYNAMIC_READ`, `STREAM_READ`, `STATIC_COPY`, `DYNAMIC_COPY`, or `STREAM_COPY`.\n * @returns {ElementBuffer}\n */\nWebGLCanvas.prototype.createElementBuffer = function (usage) {\n\treturn new ElementBuffer(this, usage);\n};\n\n/**\n * Creates a new texture object of the specified size.\n * @param {number} width - Physical texture width.\n * @param {number} height - Physical texture height.\n * @param {number} [targetWidth] - Logical texture width.\n * @param {number} [targetHeight] - Logical texture height.\n * @returns {TextureObject}\n */\nWebGLCanvas.prototype.createTextureObject = function (width, height, targetWidth=null, targetHeight=null) {\n\treturn new TextureObject (this, width, height, targetWidth, targetHeight);\n};\n\n/**\n * Loads an image from the specified URL.\n * @param {string} url\n * @returns {Promise<HTMLImageElement>}\n */\nWebGLCanvas.loadImage = function (url)\n{\n\treturn new Promise((resolve, reject) =>\n\t{\n\t\tlet img = new Image();\n\t\timg.onload = () => resolve(img);\n\t\timg.onerror = () => reject('Unable to load image: ' + url);\n\t\timg.src = url;\n\t});\n};\n\n/**\n * Loads an image from the specified URL and creates a texture.\n * @param {string} url\n * @param {number} [mipmapLevels] - Number of levels for mipmapping. Defaults to `0`.\n * @returns {Promise<TextureObject>}\n */\nWebGLCanvas.prototype.loadTextureFromUrl = async function (url, mipmapLevels=0)\n{\n\tlet image = await WebGLCanvas.loadImage(url);\n\tlet texture = this.createTextureObject(image.width, image.height);\n\ttexture.setMipmapLevels(mipmapLevels);\n\ttexture.upload(image);\n\treturn texture;\n};\n"],"names":["$f833e504115047ce$export$2e2bcd8739ae039","$f833e504115047ce$var$ShaderProgram","gl","vertexShaderSource","fragmentShaderSource","this","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","prototype","linkProgram","attribName","attribLocations","bindAttribLocation","getProgramParameter","LINK_STATUS","deleteShader","vertexError","getShaderInfoLog","fragmentError","Error","attribLocation","Map","bindAttribLocations","attribs","getUniformLocation","uniformName","getUniformLocations","uniformNames","uniforms","useProgram","$8130a8013106f3d1$export$2e2bcd8739ae039","target","usage","buffer","constructor","createBuffer","bindBuffer","bufferData","srcData","srcOffset","bufferSubData","dstByteOffset","length","deleteBuffer","$bae776f183aa91d1$export$2e2bcd8739ae039","super","ARRAY_BUFFER","$6d7095e563bd49c3$export$2e2bcd8739ae039","ELEMENT_ARRAY_BUFFER","$0215a91145a0632d$export$2e2bcd8739ae039","$0215a91145a0632d$var$VertexArrayObject","vertexArray","createVertexArray","bindVertexArray","unbindVertexArray","$275802465c2747aa$export$2e2bcd8739ae039","texture","width","height","targetWidth","targetHeight","scale","filterType","wrapMode","mipmapLevels","allocated","createTexture","bindTexture","TEXTURE_2D","allocate","applyFilter","applyWrap","texStorage2D","RGBA8","minFilter","LINEAR","magFilter","NEAREST","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_LINEAR","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","CLAMP_TO_EDGE","REPEAT","wrap","MIRRORED_REPEAT","TEXTURE_WRAP_S","TEXTURE_WRAP_T","setFilter","setWrapMode","setMipmapLevels","numLevels","Math","max","upload","image","offsX","offsY","texSubImage2D","min","RGBA","UNSIGNED_BYTE","generateMipmap","$87df07883f23e949$export$2e2bcd8739ae039","$87df07883f23e949$var$WebGLCanvas","$87df07883f23e949$var$defaultOptions","fullscreen","stencil","background","orientation","antialias","scaleFactorMax","scaleFactorOffs","$87df07883f23e949$var$activeCanvases","$87df07883f23e949$var$autoResizerAttached","$87df07883f23e949$var$autoResizeCanvas","wgl","fullWidth","options","fullHeight","$parcel$global","floor","innerWidth","innerHeight","currentWidth","currentHeight","flipped","screenWidth","screenHeight","canvasScaleFactor","tmpWidth","tmpHeight","tmp","scaleFactor","devicePixelRatio","document","body","style","backgroundColor","canvas","resize","marginLeft","marginTop","globalScale","isFlipped","u","transform","identity","rotate","PI","translate","updateViewport","onresize","init","push","dispose","splice","indexOf","physWidth","physHeight","createElement","imageRendering","position","left","top","getContext","desynchronized","preserveDrawingBuffer","alpha","prop","val","bind","console","log","getParameter","VERSION","SHADING_LANGUAGE_VERSION","changed","$k7heJ$Mat3","alloc","resolution","$k7heJ$Vec4","clearColor","parseInt","substring","enable","DEPTH_TEST","clearDepth","depthFunc","GEQUAL","BLEND","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","blendEquationSeparate","FUNC_ADD","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","SCISSOR_TEST","scissor","viewport","set","createShaderProgram","createVertexArrayObject","createVertexBuffer","createElementBuffer","createTextureObject","loadImage","url","Promise","resolve","reject","img","Image","onload","onerror","src","loadTextureFromUrl","async"],"version":3,"file":"froxel-gl.m.js.map"}