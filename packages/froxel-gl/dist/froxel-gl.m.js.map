{"mappings":"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","sources":["src/shader-program.js","src/buffer.js","src/vertex-buffer.js","src/element-buffer.js","src/vertex-array-object.js","src/webgl-canvas.js"],"sourcesContent":["\nimport WebGLCanvas from './webgl-canvas.js';\n\nexport default ShaderProgram;\n\n/**\n * Creates a WebGL GLSL Shader Program.\n * @param {WebGLCanvas} gl\n * @param {string} vertexShaderSource\n * @param {string} fragmentShaderSource\n */\nfunction ShaderProgram (gl, vertexShaderSource, fragmentShaderSource)\n{\n\t/**\n\t * Reference to the WebGLCanvas.\n\t * @readonly @type {WebGLCanvas}\n\t */\n\tthis.gl = gl;\n\n\t/**\n\t * Vertex shader resource object.\n\t * @readonly @type {WebGLShader}\n\t */\n\tthis.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\tgl.shaderSource(this.vertexShader, vertexShaderSource);\n\tgl.compileShader(this.vertexShader);\n\n\t/**\n\t * Fragment shader resource object.\n\t * @readonly @type {WebGLShader}\n\t */\n\tthis.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(this.fragmentShader, fragmentShaderSource);\n\tgl.compileShader(this.fragmentShader);\n\n\t/**\n\t * Shader program resource object.\n\t * @readonly @type {WebGLProgram}\n\t */\n\tthis.program = gl.createProgram();\n\tgl.attachShader(this.program, this.vertexShader);\n\tgl.attachShader(this.program, this.fragmentShader);\n};\n\n/**\n * Links the program and throws an error if there was any problem.\n * @throws {Error}\n * @returns {ShaderProgram}\n */\nShaderProgram.prototype.linkProgram = function()\n{\n\tfor (let attribName in ShaderProgram.attribLocations) {\n\t\tthis.gl.bindAttribLocation(this.program, ShaderProgram.attribLocations[attribName], attribName);\n\t}\n\n\tthis.gl.linkProgram (this.program);\n\tif (this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS))\n\t{\n\t\tthis.gl.deleteShader(this.vertexShader)\n\t\tthis.gl.deleteShader(this.fragmentShader)\n\t\treturn this;\n\t}\n\n\tlet vertexError = this.gl.getShaderInfoLog(this.vertexShader);\n\tlet fragmentError = this.gl.getShaderInfoLog(this.fragmentShader);\n\n\tthrow new Error(\n\t\tvertexError ? ('• Vertex Shader:\\n' + vertexError + '\\n') : '' +\n\t\tfragmentError ? ('• Fragment Shader:\\n' + fragmentError) : ''\n\t);\n};\n\n/**\n * Binds an attribute location to the shader program.\n * @param {number} attribLocation\n * @param {string} attribName\n * @returns {ShaderProgram}\n */\nShaderProgram.prototype.bindAttribLocation = function (attribLocation, attribName)\n{\n\tthis.gl.bindAttribLocation(this.program, attribLocation, attribName);\n\treturn this;\n};\n\n/**\n * Map of global attribute locations.\n * @readonly @private\n * @type {Map<string, number>}\n */\nShaderProgram.attribLocations = new Map();\n\n/**\n * Binds a global attribute location to be applied to any newly created shader program.\n * @param {number} attribLocation\n * @param {string} attribName\n * @returns {ShaderProgram}\n */\nShaderProgram.bindAttribLocation = function (attribLocation, attribName)\n{\n\tthis.attribLocations[attribName] = attribLocation;\n\treturn this;\n};\n\n/**\n * Binds several global attribute locations to be applied to any newly created shader program.\n * @param {Map<string, number>} attribs\n * @returns {ShaderProgram}\n */\nShaderProgram.bindAttribLocations = function (attribs)\n{\n\tfor (let attribName in attribs) {\n\t\tthis.attribLocations[attribName] = attribs[attribName];\n\t}\n\n\treturn this;\n};\n\n/**\n * Returns the location of a uniform variable.\n * @param {string} uniformName\n * @returns {WebGLUniformLocation}\n */\nShaderProgram.prototype.getUniformLocation = function (uniformName)\n{\n\t// TODO Add cache here.\n\treturn this.gl.getUniformLocation(this.program, uniformName);\n};\n\n/**\n * Returns the location of one or more uniform variables.\n * @param {Array<string>} uniformNames\n * @returns { [key: string]: WebGLUniformLocation }\n */\nShaderProgram.prototype.getUniformLocations = function (uniformNames)\n{\n\tlet uniforms = { };\n\n\tfor (let uniformName of uniformNames) {\n\t\tuniforms[uniformName] = this.getUniformLocation(uniformName);\n\t}\n\n\treturn uniforms;\n};\n\n/**\n * Activates the shader program for subsequent drawing operations.\n */\nShaderProgram.prototype.useProgram = function ()\n{\n\tthis.gl.useProgram(this.program);\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\n\n/**\n * Represents a WebGL buffer.\n */\nexport default class Buffer\n{\n\t/**\n\t * Reference to the WebGLCanvas.\n\t * @readonly @type {WebGLCanvas}\n\t */\n\tgl;\n\n\t/**\n\t * Buffer target.\n\t * @type {number}\n\t */\n\ttarget;\n\n\t/**\n\t * Buffer usage mode.\n\t * @type {number}\n\t */\n\tusage;\n\n\t/**\n\t * Buffer object resource.\n\t * @type {WebGLBuffer}\n\t */\n\tbuffer;\n \n\t/**\n\t * Creates a WebGL buffer.\n\t * @param {WebGLCanvas} gl\n\t * @param {number} target\n\t * @param {number} usage\n\t */\n\tconstructor (gl, target, usage)\n\t{\n\t\tthis.gl = gl;\n\t\tthis.target = target;\n\t\tthis.usage = usage;\n\t\tthis.buffer = gl.createBuffer();\n\t}\n\n\t/**\n\t * Binds the buffer to its WebGL target.\n\t * @returns {Buffer}\n\t */\n\tbindBuffer()\n\t{\n\t\tthis.gl.bindBuffer(this.target, this.buffer);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Initializes and creates the buffer object's data store.\n\t * @param {ArrayBufferView} srcData\n\t * @param {number} srcOffset?\n\t * @returns {Buffer}\n\t */\n\tbufferData (srcData, srcOffset=0)\n\t{\n\t\tthis.gl.bindBuffer(this.target, this.buffer);\n\t\tthis.gl.bufferData(this.target, srcData, this.usage, srcOffset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates a subset of the buffer object's data store. \n\t * @param {number} dstByteOffset\n\t * @param {ArrayBufferView} srcData\n\t * @param {number} srcOffset?\n\t * @param {number} length?\n\t * @returns {Buffer}\n\t */\n\tbufferSubData (dstByteOffset, srcData, srcOffset=0, length=0)\n\t{\n\t\tthis.gl.bindBuffer(this.target, this.buffer);\n\t\tthis.gl.bufferSubData(this.target, dstByteOffset, srcData, srcOffset, length ? length : srcData.length);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Deletes the buffer.\n\t */\n\tdeleteBuffer()\n\t{\n\t\tthis.gl.deleteBuffer(this.buffer);\n\t}\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\nimport Buffer from './buffer.js';\n\nexport default class VertexBuffer extends Buffer\n{\n\t/**\n\t * Creates a VertexBuffer linked to the ARRAY_BUFFER target.\n\t * @param {WebGLCanvas} gl\n\t * @param {number} usage\n\t */\n\t constructor (gl, usage)\n\t {\n\t\t super (gl, gl.ARRAY_BUFFER, usage);\n\t }\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\nimport Buffer from './buffer.js';\n\nexport default class ElementBuffer extends Buffer\n{\n\t/**\n\t * Creates a ElementBuffer linked to the ELEMENT_ARRAY_BUFFER target.\n\t * @param {WebGLCanvas} gl\n\t * @param {number} usage\n\t */\n\t constructor (gl, usage)\n\t {\n\t\t super (gl, gl.ELEMENT_ARRAY_BUFFER, usage);\n\t }\n};\n","\nimport WebGLCanvas from './webgl-canvas.js';\n\nexport default VertexArrayObject;\n\n/**\n * Creates a Vertex Array Object (VAO).\n * @param {WebGLCanvas} gl\n */\nfunction VertexArrayObject (gl)\n{\n\t/**\n\t * Reference to the WebGLCanvas.\n\t * @readonly @type {WebGLCanvas}\n\t */\n\tthis.gl = gl;\n\n\t/**\n\t * Vertex array object resource.\n\t * @type {WebGLVertexArrayObject}\n\t */\n\tthis.vertexArray = gl.createVertexArray();\n};\n\n/**\n * Binds the vertex array object to the GPU.\n */\nVertexArrayObject.prototype.bindVertexArray = function()\n{\n\tthis.gl.bindVertexArray(this.vertexArray);\n};\n\n/**\n * Unbinds the vertex array object from the GPU.\n */\nVertexArrayObject.prototype.unbindVertexArray = function()\n{\n\tthis.gl.bindVertexArray(null);\n};\n","\nimport ShaderProgram from './shader-program.js';\nimport VertexBuffer from './vertex-buffer.js';\nimport ElementBuffer from './element-buffer.js';\nimport VertexArrayObject from './vertex-array-object.js';\nimport { Mat3, Vec4 } from 'froxel-math';\n\nexport default WebGLCanvas;\n\n/**\n * @typedef {'default'|'landscape'|'portrait'|'automatic'|'strict'} WebGLCanvasOrientation\n */\n\n/**\n * @typedef {Object} WebGLCanvasOptions\n * @prop {boolean} [fullscreen] Positions the canvas to cover the entire screen. default `true`\n * @prop {boolean} [stencil] Indicates if the stencil buffer should be enabled. default `false`\n * @prop {string} [background] Background color, must be a 6-digit hex RGB value. default `000000`\n * @prop {number} [width] Width of the canvas, used only when `fullscreen` is `false`. default `960`\n * @prop {number} [height] Height of the canvas, used only when `fullscreen` is `false`. default `540`\n * @prop {WebGLCanvasOrientation} [orientation] Orientation of the canvas. Defaults to `AUTOMATIC`.\n * @prop {boolean} [antialias] Controls the antialias option, set to `false` for pixel-perfect output. Default is `true`.\n * @prop {number} [scaleFactorMax] Limit of the scale factor, used only when set to greater than zero.\n * @prop {number} [scaleFactorOffs] Offset used to increase the scale factor before the Math.floor operation. Default is `0.7`.\n */\n\nconst defaultOptions = {\n\tfullscreen: true,\n\tstencil: false,\n\tbackground: '000000',\n\twidth: 960,\n\theight: 540,\n\torientation: 'automatic',\n\tantialias: true,\n\tscaleFactorMax: 0,\n\tscaleFactorOffs: 0.7,\n};\n\n/**\n * List of active canvases. Registered when the WebGLCanvas is created, and removed when it is disposed.\n */\nconst activeCanvases = [\n];\n\n/**\n * Indicates if the auto-resizer has been attached to the window.\n */\nlet autoResizerAttached = false;\n\n/**\n * \n */\nfunction autoResizeCanvas (wgl)\n{\n\tlet fullWidth = wgl.options.width;\n\tlet fullHeight = wgl.options.height;\n\n\tif (wgl.options.fullscreen && ('document' in global)) {\n\t\tfullWidth = Math.floor(global.innerWidth);\n\t\tfullHeight = Math.floor(global.innerHeight);\n\t}\n\telse {\n\t\tif (wgl.options.width === null && wgl.options.height === null)\n\t\t\tthrow new Error ('At least one screen dimension must be specified in headless mode.');\n\t}\n\n\t// Flip dimensions to ensure the desired orientation.\n\tlet currentWidth = fullWidth;\n\tlet currentHeight = fullHeight;\n\tlet flipped = false;\n\n\tif ((fullWidth < fullHeight && wgl.options.orientation === 'landscape') || (fullWidth > fullHeight && wgl.options.orientation === 'portrait')) {\n\t\tcurrentWidth = fullHeight;\n\t\tcurrentHeight = fullWidth;\n\t\tflipped = true;\n\t}\n\n\t// Get target screen dimensions.\n\tlet targetWidth = wgl.options.width;\n\tlet targetHeight = wgl.options.height;\n\n\tif (targetWidth === null || targetHeight === null)\n\t{\n\t\tif (targetWidth === null && targetHeight === null) {\n\t\t\ttargetWidth = currentWidth;\n\t\t\ttargetHeight = currentHeight;\n\t\t}\n\t\telse if (targetWidth === null)\n\t\t\ttargetWidth = Math.floor(0.5 + currentWidth * (wgl.options.height / currentHeight));\n\t\telse\n\t\t\ttargetHeight = Math.floor(0.5 + currentHeight * (wgl.options.width / currentWidth));\n\t}\n\n\t// Handle `automatic` canvas orientation.\n\tlet screenWidth = targetWidth;\n\tlet screenHeight = targetHeight;\n\n\tif (wgl.options.orientation === 'automatic' && screenWidth && screenHeight)\n\t{\n\t\tif ((screenWidth > screenHeight && currentWidth < currentHeight) || (screenWidth < screenHeight && currentWidth > currentHeight)) {\n\t\t\tscreenWidth = targetHeight;\n\t\t\tscreenHeight = targetWidth;\n\t\t}\n\t}\n\n\t// Compute canvas scale factor.\n\tlet canvasScaleFactor = 1;\n\n\tif (screenWidth && screenHeight)\n\t\tcanvasScaleFactor = Math.min(currentWidth / screenWidth, currentHeight / screenHeight);\n\telse if (screenWidth)\n\t\tcanvasScaleFactor = currentWidth / screenWidth;\n\telse if (screenHeight)\n\t\tcanvasScaleFactor = currentHeight / screenHeight;\n\n\t// ***\n\tlet tmpWidth = currentWidth;\n\tlet tmpHeight = currentHeight;\n\n\tif (screenWidth) currentWidth = screenWidth;\n\tif (screenHeight) currentHeight = screenHeight;\n\n\tlet offsX = Math.floor((tmpWidth - currentWidth*canvasScaleFactor)*0.5);\n\tlet offsY = Math.floor((tmpHeight - currentHeight*canvasScaleFactor)*0.5);\n\n\tif (flipped) {\n\t\tlet tmp = offsX;\n\t\toffsX = offsY;\n\t\toffsY = tmp;\n\t}\n\n\tlet scaleFactor = canvasScaleFactor * global.devicePixelRatio;\n\tscaleFactor = Math.floor(wgl.options.scaleFactorOffs + scaleFactor);\n\n\tif (wgl.options.scaleFactorMax > 0 && scaleFactor > wgl.options.scaleFactorMax)\n\t\tscaleFactor = wgl.options.scaleFactorMax;\n\n\tif (wgl.options.fullscreen && ('document' in global))\n\t\tglobal.document.body.style.backgroundColor = wgl.canvas.style.backgroundColor;\n\n\twgl.resize(currentWidth, currentHeight, false);\n\n\tif (!flipped) {\n\t\twgl.canvas.style.width = Math.floor(currentWidth*canvasScaleFactor+0.5) + 'px';\n\t\twgl.canvas.style.height = Math.floor(currentHeight*canvasScaleFactor+0.5) + 'px';\n\t}\n\telse {\n\t\twgl.canvas.style.width = Math.floor(currentHeight*canvasScaleFactor+0.5) + 'px';\n\t\twgl.canvas.style.height = Math.floor(currentWidth*canvasScaleFactor+0.5) + 'px';\n\t}\n\n\twgl.canvas.style.marginLeft = offsX + 'px';\n\twgl.canvas.style.marginTop = offsY + 'px';\n\n\twgl.globalScale = scaleFactor;\n\twgl.isFlipped = flipped;\n\n\twgl.u.transform.identity();\n\twgl.u.transform.scale(scaleFactor, scaleFactor);\n\n\tif (flipped) {\n\t\twgl.u.transform.rotate(Math.PI/2);\n\t\twgl.u.transform.translate(-currentWidth, 0);\n\t}\n\n\twgl.updateViewport();\n\n\t//console.log('logical', wgl.width, wgl.height);\t\n\t//console.log('canvas-logical', wgl.canvas.width, wgl.canvas.height);\n\t//console.log('canvas-css', wgl.canvas.style.width, wgl.canvas.style.height);\n\t//console.log('phys', wgl.physWidth, wgl.physHeight);\n\t//console.log('webGl', wgl.gl.drawingBufferWidth, wgl.gl.drawingBufferHeight);\n\t//console.log('globalScale', wgl.globalScale);\n\t//console.log('canvasScaleFactor', canvasScaleFactor);\n\n\t/* *** */\n\t//if (options.maxScaleFactor > 0 && scaleFactor > options.maxScaleFactor)\n\t//\tscaleFactor = options.maxScaleFactor;\n\n\t//_this.integerScaleFactor = Math.floor(scaleFactor + 0.5); //0.9\n};\n\n/**\n * High performance WebGL2 Canvas.\n *\n * Default WebGL configuration is set as follows:\n *\n * - `DEPTH_TEST`: enabled, `clearDepth`: 0.0, `depthFunc`: GEQUAL\n * - `BLEND`: enabled, `blendEquationSeparate`: FUNC_ADD, FUNC_ADD, `blendFunc`: ONE, ONE_MINUS_SRC_ALPHA\n * - `UNPACK_PREMULTIPLY_ALPHA_WEBGL`: enabled\n * - `SCISSOR_TEST`: enabled\n *\n * @extends {WebGL2RenderingContext}\n * @param {WebGLCanvasOptions} [options]\n */\nfunction WebGLCanvas (options=null)\n{\n\tif (!autoResizerAttached)\n\t{\n\t\tglobal.onresize = function() {\n\t\t\tfor (let wgl of activeCanvases) autoResizeCanvas(wgl);\n\t\t};\n\n\t\tautoResizerAttached = true;\n\t}\n\n\tthis.init({ ...defaultOptions, ...options });\n\tactiveCanvases.push(this);\n}\n\n/**\n * Disposes the canvas and all related resources.\n */\nWebGLCanvas.prototype.dispose = function()\n{\n\tactiveCanvases.splice(activeCanvases.indexOf(this), 1);\n};\n\n/**\n * WebGL2 Context.\n * @private @readonly @type {WebGL2RenderingContext}\n */\nWebGLCanvas.prototype.gl = null;\n\n/**\n * @typedef {Object} WebGLCanvasUniforms\n * @prop {boolean} changed Indicates if the uniforms have changed.\n * @prop {Mat3} transform Initial transformation matrix.\n * @prop {Vec4} resolution Canvas resolution.\n */\n\n/**\n * Canvas uniforms.\n * @readonly @type {WebGLCanvasUniforms}\n */\nWebGLCanvas.prototype.u = null;\n\n/**\n * Underlying HTML5 canvas element.\n * @readonly @type {HTMLCanvasElement}\n */\nWebGLCanvas.prototype.canvas = null;\n\n/**\n * Logical width of the canvas.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.width = 0;\n\n/**\n * Logical height of the canvas.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.height = 0;\n\n/**\n * Physical canvas width.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.physWidth = 0;\n\n/**\n * Physical canvas height.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.physHeight = 0;\n\n/**\n * Indicates if the canvas is flipped.\n * @readonly @type {boolean}\n */\nWebGLCanvas.prototype.isFlipped = false;\n\n/**\n * Canvas global scale.\n * @readonly @type {number}\n */\nWebGLCanvas.prototype.globalScale = 1.0;\n\n\n/**\n * Initializes the instance.\n * @private\n */\nWebGLCanvas.prototype.init = function (options)\n{\n\tthis.canvas = document.createElement('canvas');\n\tthis.options = options;\n\n\tif (!options.fullscreen && (!options.width || !options.height))\n\t\tthrow new Error ('Option `width` or `height` is missing while `fullscreen` is `false`.');\n\n\tif (options.background.length != 6)\n\t\tthrow new Error ('Option `background` should be a 6-digit hex RGB (i.e. 000000).');\n\n\tthis.canvas.style.imageRendering = options.antialias ? 'auto' : 'crisp-edges';\n\tthis.canvas.style.backgroundColor = '#' + options.background;\n\n\tif (options.fullscreen) {\n\t\tthis.canvas.style.position = 'absolute';\n\t\tthis.canvas.style.left = '0px';\n\t\tthis.canvas.style.top = '0px';\n\t}\n\n\t// Get WebGL context and re-bind to the WebGLCanvas object.\n\tthis.gl = this.canvas.getContext('webgl2', { desynchronized: false, preserveDrawingBuffer: false, alpha: false, stencil: options.stencil });\n\n\tfor (let prop in this.gl)\n\t{\n\t\tlet val = this.gl[prop];\n\t\tswitch (typeof(val))\n\t\t{\n\t\t\tcase 'function':\n\t\t\t\tthis[prop] = val.bind(this.gl);\n\t\t\t\tbreak;\n\n\t\t\tcase 'number':\n\t\t\t\tthis[prop] = val;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconsole.log(this.getParameter(this.VERSION) + ', ' + this.getParameter(this.SHADING_LANGUAGE_VERSION));\n\n\t// Initialize default configuration.\n\tthis.u = {\n\t\tchanged: true,\n\t\ttransform: Mat3.alloc(),\n\t\tresolution: Vec4.alloc()\n\t};\n\n\tthis.clearColor (parseInt(options.background.substring(0,2), 16)/255.0, parseInt(options.background.substring(2,4), 16)/255.0, parseInt(options.background.substring(4,6), 16)/255.0, 1.0);\n\n\tthis.enable (this.DEPTH_TEST);\n\tthis.clearDepth (0.0);\n\tthis.depthFunc (this.GEQUAL);\n\n\tthis.enable (this.BLEND);\n\tthis.pixelStorei (this.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n\tthis.blendEquationSeparate (this.FUNC_ADD, this.FUNC_ADD);\n\tthis.blendFunc (this.ONE, this.ONE_MINUS_SRC_ALPHA);\n\n\tthis.enable (this.SCISSOR_TEST);\n\tautoResizeCanvas(this);\n};\n\n/**\n * Resizes the canvas to the specified logical size.\n * @param {number} width\n * @param {number} height\n */\nWebGLCanvas.prototype.resize = function (width, height, updateViewport=true)\n{\n\tthis.width = width;\n\tthis.height = height;\n\n\tif (updateViewport)\n\t\tthis.updateViewport();\n};\n\nWebGLCanvas.prototype.updateViewport = function ()\n{\n\tthis.physWidth = this.canvas.width = Math.floor((this.isFlipped ? this.height : this.width) * this.globalScale);\n\tthis.physHeight = this.canvas.height = Math.floor((this.isFlipped ? this.width : this.height) * this.globalScale);\n\n\tthis.scissor (0, 0, this.physWidth, this.physHeight);\n\tthis.viewport (0, 0, this.physWidth, this.physHeight);\n\n\t//violet:hardware scaling\n\t//this.v_resolution[0] = this._width;\n\t//this.v_resolution[1] = this._height;\n\tthis.u.resolution.set(this.physWidth, this.physHeight, this.isFlipped ? this.physHeight : this.physWidth, this.isFlipped ? this.physWidth : this.physHeight);\n\tthis.u.changed = true;\n};\n\n/**\n * Creates a shader program with the specified vertex and fragment shader source codes.\n * @param {string} vertexShaderSource\n * @param {string} fragmentShaderSource\n * @returns {ShaderProgram}\n */\nWebGLCanvas.prototype.createShaderProgram = function (vertexShaderSource, fragmentShaderSource) {\n\treturn new ShaderProgram (this, vertexShaderSource, fragmentShaderSource);\n};\n\n/**\n * Creates a new vertex array object.\n * @returns {VertexArrayObject}\n */\nWebGLCanvas.prototype.createVertexArrayObject = function () {\n\treturn new VertexArrayObject (this);\n};\n\n/**\n * Creates a new vertex buffer.\n * @param {number} usage Possible values are: `STATIC_DRAW`, `DYNAMIC_DRAW`, `STREAM_DRAW`, `STATIC_READ`, `DYNAMIC_READ`, `STREAM_READ`, `STATIC_COPY`, `DYNAMIC_COPY`, or `STREAM_COPY`.\n * @returns {VertexBuffer}\n */\nWebGLCanvas.prototype.createVertexBuffer = function (usage) {\n\treturn new VertexBuffer(this, usage);\n};\n\n/**\n * Creates a new element buffer.\n * @param {number} usage Possible values are: `STATIC_DRAW`, `DYNAMIC_DRAW`, `STREAM_DRAW`, `STATIC_READ`, `DYNAMIC_READ`, `STREAM_READ`, `STATIC_COPY`, `DYNAMIC_COPY`, or `STREAM_COPY`.\n * @returns {ElementBuffer}\n */\nWebGLCanvas.prototype.createElementBuffer = function (usage) {\n\treturn new ElementBuffer(this, usage);\n};\n"],"names":["$f833e504115047ce$export$2e2bcd8739ae039","$f833e504115047ce$var$ShaderProgram","gl","vertexShaderSource","fragmentShaderSource","this","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","prototype","linkProgram","attribName","attribLocations","bindAttribLocation","getProgramParameter","LINK_STATUS","deleteShader","vertexError","getShaderInfoLog","fragmentError","Error","attribLocation","Map","bindAttribLocations","attribs","getUniformLocation","uniformName","getUniformLocations","uniformNames","uniforms","useProgram","$8130a8013106f3d1$export$2e2bcd8739ae039","target","usage","buffer","constructor","createBuffer","bindBuffer","bufferData","srcData","srcOffset","bufferSubData","dstByteOffset","length","deleteBuffer","$bae776f183aa91d1$export$2e2bcd8739ae039","super","ARRAY_BUFFER","$6d7095e563bd49c3$export$2e2bcd8739ae039","ELEMENT_ARRAY_BUFFER","$0215a91145a0632d$export$2e2bcd8739ae039","$0215a91145a0632d$var$VertexArrayObject","vertexArray","createVertexArray","bindVertexArray","unbindVertexArray","$87df07883f23e949$export$2e2bcd8739ae039","$87df07883f23e949$var$WebGLCanvas","$87df07883f23e949$var$defaultOptions","fullscreen","stencil","background","width","height","orientation","antialias","scaleFactorMax","scaleFactorOffs","$87df07883f23e949$var$activeCanvases","$87df07883f23e949$var$autoResizerAttached","$87df07883f23e949$var$autoResizeCanvas","wgl","fullWidth","options","fullHeight","$parcel$global","Math","floor","innerWidth","innerHeight","currentWidth","currentHeight","flipped","targetWidth","targetHeight","screenWidth","screenHeight","canvasScaleFactor","min","tmpWidth","tmpHeight","offsX","offsY","tmp","scaleFactor","devicePixelRatio","document","body","style","backgroundColor","canvas","resize","marginLeft","marginTop","globalScale","isFlipped","u","transform","identity","scale","rotate","PI","translate","updateViewport","onresize","init","push","dispose","splice","indexOf","physWidth","physHeight","createElement","imageRendering","position","left","top","getContext","desynchronized","preserveDrawingBuffer","alpha","prop","val","bind","console","log","getParameter","VERSION","SHADING_LANGUAGE_VERSION","changed","$k7heJ$Mat3","alloc","resolution","$k7heJ$Vec4","clearColor","parseInt","substring","enable","DEPTH_TEST","clearDepth","depthFunc","GEQUAL","BLEND","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","blendEquationSeparate","FUNC_ADD","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","SCISSOR_TEST","scissor","viewport","set","createShaderProgram","createVertexArrayObject","createVertexBuffer","createElementBuffer"],"version":3,"file":"froxel-gl.m.js.map"}