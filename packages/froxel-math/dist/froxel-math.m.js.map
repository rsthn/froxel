{"mappings":"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","sources":["<anon>","src/main.ts","src/vec2.ts","src/vec4.ts","src/rect.ts","src/mat3.ts","src/mat4.ts","node_modules/.pnpm/@parcel+runtime-js@2.9.3_@parcel+core@2.9.3/node_modules/@parcel/runtime-js/lib/bundles/runtime-4192d13f7c058f1b.js"],"sourcesContent":["import {loadFromDataUri as $X9A9e$loadFromDataUri} from \"asyl\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nlet $485e585505f5c80a$var$m = null;\nclass $485e585505f5c80a$export$2e2bcd8739ae039 {\n    static #_ = (()=>{\n        /**\n\t * Number of bytes per object.\n\t */ this.BYTES = 2 * Float32Array.BYTES_PER_ELEMENT;\n    })();\n    /**\n\t * Binds the specified Asyl module to the class.\n\t */ static bind(module) {\n        $485e585505f5c80a$var$m = module;\n    }\n    /**\n\t * Allocates a new vector with the specified coordinates.\n\t */ static alloc(x = 0, y = 0) {\n        return new $485e585505f5c80a$export$2e2bcd8739ae039($485e585505f5c80a$var$m.vec2_alloc2f(x, y));\n    }\n    /**\n\t * Materializes a vector at the specified memory location.\n\t */ static materialize(addr) {\n        return new $485e585505f5c80a$export$2e2bcd8739ae039($485e585505f5c80a$var$m.vec2_materialize(addr));\n    }\n    /**\n\t * Constructs the vector with the specified coordinates.\n\t */ constructor(addr){\n        this.addr = addr;\n        this.data = $485e585505f5c80a$var$m.mapFloat32Array(addr, 2);\n    }\n    /**\n\t * Destroys the instance.\n\t */ free() {\n        $485e585505f5c80a$var$m.vec2_free(this.addr);\n    }\n    /**\n\t * Returns a new vector with the same coordinates.\n\t */ clone() {\n        return new $485e585505f5c80a$export$2e2bcd8739ae039($485e585505f5c80a$var$m.vec2_clone(this.addr));\n    }\n    set(x, y = null) {\n        if (y === null) $485e585505f5c80a$var$m.vec2_set1v(this.addr, x.addr);\n        else $485e585505f5c80a$var$m.vec2_set2f(this.addr, x, y);\n        return this;\n    }\n    /**\n\t * Sets the X-coordinate of the vector.\n\t */ setX(x) {\n        this.data[0] = x;\n        return this;\n    }\n    /**\n\t * Sets the Y-coordinate of the vector.\n\t */ setY(y) {\n        this.data[1] = y;\n        return this;\n    }\n    /**\n\t * Returns the value of the X-coordinate.\n\t */ x() {\n        return this.data[0];\n    }\n    /**\n\t * Returns the value of the Y-coordinate.\n\t */ y() {\n        return this.data[1];\n    }\n    /**\n\t * Sets the coordinates of the vector to zero.\n\t */ zero() {\n        $485e585505f5c80a$var$m.vec2_zero(this.addr);\n        return this;\n    }\n    /**\n\t * Returns true if the vector coordinates are zero.\n\t */ iszero() {\n        return $485e585505f5c80a$var$m.vec2_iszero(this.addr);\n    }\n    equals(x, y = null) {\n        if (y === null) return $485e585505f5c80a$var$m.vec2_equals1v(this.addr, x.addr);\n        return $485e585505f5c80a$var$m.vec2_equals2f(this.addr, x, y);\n    }\n    almost(x, y = null, epsilon = null) {\n        if (epsilon === null) return $485e585505f5c80a$var$m.vec2_almost1v(this.addr, x.addr, y);\n        return $485e585505f5c80a$var$m.vec2_almost2f(this.addr, x, y, epsilon);\n    }\n    /**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */ neg() {\n        $485e585505f5c80a$var$m.vec2_neg(this.addr);\n        return this;\n    }\n    /**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */ inv() {\n        $485e585505f5c80a$var$m.vec2_inv(this.addr);\n        return this;\n    }\n    /**\n\t * Changes the components of the vector to their absolute value.\n\t */ abs() {\n        $485e585505f5c80a$var$m.vec2_abs(this.addr);\n        return this;\n    }\n    translate(dx, dy = null) {\n        if (dy === null) $485e585505f5c80a$var$m.vec2_translate1v(this.addr, dx.addr);\n        else $485e585505f5c80a$var$m.vec2_translate2f(this.addr, dx, dy);\n        return this;\n    }\n    /**\n\t * Rotates the vector by the specified angle (in radians) using the specified (optional) origin point.\n\t */ rotate(angle, cx = 0, cy = 0) {\n        $485e585505f5c80a$var$m.vec2_rotate3f(this.addr, angle, cx, cy);\n        return this;\n    }\n    add(dx, dy = null) {\n        if (dy === null) $485e585505f5c80a$var$m.vec2_add1v(this.addr, dx.addr);\n        else $485e585505f5c80a$var$m.vec2_add2f(this.addr, dx, dy);\n        return this;\n    }\n    sub(dx, dy = null) {\n        if (dy === null) $485e585505f5c80a$var$m.vec2_sub1v(this.addr, dx.addr);\n        else $485e585505f5c80a$var$m.vec2_sub2f(this.addr, dx, dy);\n        return this;\n    }\n    scale(fx, fy = null) {\n        if (fy === null) {\n            if (fx instanceof $485e585505f5c80a$export$2e2bcd8739ae039) $485e585505f5c80a$var$m.vec2_scale1v(this.addr, fx.addr);\n            else $485e585505f5c80a$var$m.vec2_scale1f(this.addr, fx);\n        } else $485e585505f5c80a$var$m.vec2_scale2f(this.addr, fx, fy);\n        return this;\n    }\n    /**\n\t * Performs `floor` on the components of the vector.\n\t */ floor() {\n        $485e585505f5c80a$var$m.vec2_floor(this.addr);\n        return this;\n    }\n    /**\n\t * Performs `ceil` on the components of the vector.\n\t */ ceil() {\n        $485e585505f5c80a$var$m.vec2_ceil(this.addr);\n        return this;\n    }\n    /**\n\t * Truncates the vector components to their integer parts.\n\t */ trunc() {\n        $485e585505f5c80a$var$m.vec2_trunc(this.addr);\n        return this;\n    }\n    /**\n\t * Truncates the vector components to their fractional parts.\n\t */ fract() {\n        $485e585505f5c80a$var$m.vec2_fract(this.addr);\n        return this;\n    }\n    dot(x, y = null) {\n        if (y === null) return $485e585505f5c80a$var$m.vec2_dot1v(this.addr, x.addr);\n        return $485e585505f5c80a$var$m.vec2_dot2f(this.addr, x, y);\n    }\n    /**\n\t * Returns the squared magnitude of the vector.\n\t */ mag2() {\n        return $485e585505f5c80a$var$m.vec2_mag2(this.addr);\n    }\n    /**\n\t * Returns the magnitude of the vector.\n\t */ mag() {\n        return $485e585505f5c80a$var$m.vec2_mag(this.addr);\n    }\n    /**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */ unit() {\n        $485e585505f5c80a$var$m.vec2_unit(this.addr);\n        return this;\n    }\n    /**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */ major() {\n        $485e585505f5c80a$var$m.vec2_major(this.addr);\n        return this;\n    }\n    /**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */ minor() {\n        $485e585505f5c80a$var$m.vec2_minor(this.addr);\n        return this;\n    }\n    /**\n\t * Sets the vector to its sign-vector representation.\n\t */ sign() {\n        $485e585505f5c80a$var$m.vec2_sign(this.addr);\n        return this;\n    }\n    /**\n\t * Returns the string representation of the coordinates of the vector.\n\t */ toString() {\n        return `(${this.x()}, ${this.y()})`;\n    }\n}\n\n\nlet $baf50d9434a9dd81$var$m = null;\nclass $baf50d9434a9dd81$export$2e2bcd8739ae039 {\n    static #_ = (()=>{\n        /**\n\t * Number of bytes per object.\n\t */ this.BYTES = 4 * Float32Array.BYTES_PER_ELEMENT;\n    })();\n    /**\n\t * Binds the specified Asyl module to the class.\n\t */ static bind(module) {\n        $baf50d9434a9dd81$var$m = module;\n    }\n    /**\n\t * Allocates a new vector with the specified coordinates.\n\t */ static alloc(x = 0, y = 0, z = 0, w = 0) {\n        return new $baf50d9434a9dd81$export$2e2bcd8739ae039($baf50d9434a9dd81$var$m.vec4_alloc4f(x, y, z, w));\n    }\n    /**\n\t * Materializes a vector at the specified memory location.\n\t */ static materialize(addr) {\n        return new $baf50d9434a9dd81$export$2e2bcd8739ae039($baf50d9434a9dd81$var$m.vec4_materialize(addr));\n    }\n    /**\n\t * Constructs the vector with the specified coordinates.\n\t */ constructor(addr){\n        this.addr = addr;\n        this.data = $baf50d9434a9dd81$var$m.mapFloat32Array(addr, 4);\n    }\n    /**\n\t * Destroys the instance.\n\t */ free() {\n        $baf50d9434a9dd81$var$m.vec4_free(this.addr);\n    }\n    /**\n\t * Returns a new vector with the same coordinates.\n\t */ clone() {\n        return new $baf50d9434a9dd81$export$2e2bcd8739ae039($baf50d9434a9dd81$var$m.vec4_clone(this.addr));\n    }\n    set(x, y = null, z = null, w = null) {\n        if (y === null) {\n            $baf50d9434a9dd81$var$m.vec4_set1v(this.addr, x.addr);\n            return this;\n        }\n        $baf50d9434a9dd81$var$m.vec4_set4f(this.addr, x, y, z, w);\n        return this;\n    }\n    /**\n\t * Sets the X-coordinate of the vector.\n\t */ setX(x) {\n        this.data[0] = x;\n        return this;\n    }\n    /**\n\t * Sets the Y-coordinate of the vector.\n\t */ setY(y) {\n        this.data[1] = y;\n        return this;\n    }\n    /**\n\t * Sets the Z-coordinate of the vector.\n\t */ setZ(z) {\n        this.data[2] = z;\n        return this;\n    }\n    /**\n\t * Sets the W-coordinate of the vector.\n\t */ setW(w) {\n        this.data[3] = w;\n        return this;\n    }\n    /**\n\t * Returns the value of the X-coordinate.\n\t */ x() {\n        return this.data[0];\n    }\n    /**\n\t * Returns the value of the Y-coordinate.\n\t */ y() {\n        return this.data[1];\n    }\n    /**\n\t * Returns the value of the Z-coordinate.\n\t */ z() {\n        return this.data[2];\n    }\n    /**\n\t * Returns the value of the W-coordinate.\n\t */ w() {\n        return this.data[3];\n    }\n    /**\n\t * Sets the coordinates of the vector to zero.\n\t */ zero() {\n        $baf50d9434a9dd81$var$m.vec4_zero(this.addr);\n        return this;\n    }\n    /**\n\t * Returns true if the vector coordinates are zero.\n\t */ iszero() {\n        return $baf50d9434a9dd81$var$m.vec4_iszero(this.addr);\n    }\n    equals(x, y = null, z = null, w = null) {\n        if (y === null) return $baf50d9434a9dd81$var$m.vec4_equals1v(this.addr, x.addr);\n        if (z === null) return $baf50d9434a9dd81$var$m.vec4_equals2f(this.addr, x, y);\n        return $baf50d9434a9dd81$var$m.vec4_equals4f(this.addr, x, y, z, w);\n    }\n    almost(x, y = null, z = null, w = null, epsilon = null) {\n        if (z === null) return $baf50d9434a9dd81$var$m.vec4_almost1v(this.addr, x.addr, y);\n        if (w === null) return $baf50d9434a9dd81$var$m.vec4_almost2f(this.addr, x, y, epsilon);\n        return $baf50d9434a9dd81$var$m.vec4_almost4f(this.addr, x, y, z, w, epsilon);\n    }\n    /**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */ neg() {\n        $baf50d9434a9dd81$var$m.vec4_neg(this.addr);\n        return this;\n    }\n    /**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */ inv() {\n        $baf50d9434a9dd81$var$m.vec4_inv(this.addr);\n        return this;\n    }\n    /**\n\t * Changes the components of the vector to their absolute value.\n\t */ abs() {\n        $baf50d9434a9dd81$var$m.vec4_abs(this.addr);\n        return this;\n    }\n    translate(dx, dy = null, dz = null, dw = null) {\n        if (dy === null) {\n            $baf50d9434a9dd81$var$m.vec4_translate1v(this.addr, dx.addr);\n            return this;\n        }\n        if (dz === null) {\n            $baf50d9434a9dd81$var$m.vec4_translate2f(this.addr, dx, dy);\n            return this;\n        }\n        $baf50d9434a9dd81$var$m.vec4_translate4f(this.addr, dx, dy, dz, dw);\n        return this;\n    }\n    add(dx, dy = null, dz = null, dw = null) {\n        if (dy === null) {\n            $baf50d9434a9dd81$var$m.vec4_add1v(this.addr, dx.addr);\n            return this;\n        }\n        if (dz === null) {\n            $baf50d9434a9dd81$var$m.vec4_add2f(this.addr, dx, dy);\n            return this;\n        }\n        $baf50d9434a9dd81$var$m.vec4_add4f(this.addr, dx, dy, dz, dw);\n        return this;\n    }\n    sub(dx, dy = null, dz = null, dw = null) {\n        if (dy === null) {\n            $baf50d9434a9dd81$var$m.vec4_sub1v(this.addr, dx.addr);\n            return this;\n        }\n        if (dz === null) {\n            $baf50d9434a9dd81$var$m.vec4_sub2f(this.addr, dx, dy);\n            return this;\n        }\n        $baf50d9434a9dd81$var$m.vec4_sub4f(this.addr, dx, dy, dz, dw);\n        return this;\n    }\n    scale(fx, fy = null, fz = null, fw = null) {\n        if (fy === null) {\n            if (fx instanceof $baf50d9434a9dd81$export$2e2bcd8739ae039) $baf50d9434a9dd81$var$m.vec4_scale1v(this.addr, fx.addr);\n            else $baf50d9434a9dd81$var$m.vec4_scale1f(this.addr, fx);\n            return this;\n        }\n        if (fz === null) {\n            $baf50d9434a9dd81$var$m.vec4_scale2f(this.addr, fx, fy);\n            return this;\n        }\n        $baf50d9434a9dd81$var$m.vec4_scale4f(this.addr, fx, fy, fz, fw);\n        return this;\n    }\n    /**\n\t * Performs `floor` on the components of the vector.\n\t */ floor() {\n        $baf50d9434a9dd81$var$m.vec4_floor(this.addr);\n        return this;\n    }\n    /**\n\t * Performs `ceil` on the components of the vector.\n\t */ ceil() {\n        $baf50d9434a9dd81$var$m.vec4_ceil(this.addr);\n        return this;\n    }\n    /**\n\t * Truncates the vector components to their integer parts.\n\t */ trunc() {\n        $baf50d9434a9dd81$var$m.vec4_trunc(this.addr);\n        return this;\n    }\n    /**\n\t * Truncates the vector components to their fractional parts.\n\t */ fract() {\n        $baf50d9434a9dd81$var$m.vec4_fract(this.addr);\n        return this;\n    }\n    dot(x, y = null, z = null, w = null) {\n        if (y === null) return $baf50d9434a9dd81$var$m.vec4_dot1v(this.addr, x.addr);\n        if (z === null) return $baf50d9434a9dd81$var$m.vec4_dot2f(this.addr, x, y);\n        return $baf50d9434a9dd81$var$m.vec4_dot4f(this.addr, x, y, z, w);\n    }\n    /**\n\t * Returns the squared magnitude of the vector.\n\t */ mag2() {\n        return $baf50d9434a9dd81$var$m.vec4_mag2(this.addr);\n    }\n    /**\n\t * Returns the magnitude of the vector.\n\t */ mag() {\n        return $baf50d9434a9dd81$var$m.vec4_mag(this.addr);\n    }\n    /**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */ unit() {\n        $baf50d9434a9dd81$var$m.vec4_unit(this.addr);\n        return this;\n    }\n    /**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */ major() {\n        $baf50d9434a9dd81$var$m.vec4_major(this.addr);\n        return this;\n    }\n    /**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */ minor() {\n        $baf50d9434a9dd81$var$m.vec4_minor(this.addr);\n        return this;\n    }\n    /**\n\t * Sets the vector to its sign-vector representation.\n\t */ sign() {\n        $baf50d9434a9dd81$var$m.vec4_sign(this.addr);\n        return this;\n    }\n    /**\n\t * Returns the string representation of the coordinates of the vector.\n\t */ toString() {\n        return `(${this.x()}, ${this.y()}, ${this.z()}, ${this.w()})`;\n    }\n}\n\n\n\nlet $8d9a8566653c0099$var$m = null;\nclass $8d9a8566653c0099$export$2e2bcd8739ae039 {\n    static #_ = (()=>{\n        /**\n\t * Number of bytes per object.\n\t */ this.BYTES = 6 * Float32Array.BYTES_PER_ELEMENT;\n    })();\n    /**\n\t * Binds the specified Asyl module to the class.\n\t */ static bind(module) {\n        $8d9a8566653c0099$var$m = module;\n    }\n    static alloc(x1 = null, y1 = null, x2 = false, y2 = null) {\n        if (x1 === null) return new $8d9a8566653c0099$export$2e2bcd8739ae039($8d9a8566653c0099$var$m.rect_alloc4f(0, 0, 0, 0));\n        if (y2 === null) return new $8d9a8566653c0099$export$2e2bcd8739ae039($8d9a8566653c0099$var$m.rect_alloc2f(x1, y1, x2));\n        return new $8d9a8566653c0099$export$2e2bcd8739ae039($8d9a8566653c0099$var$m.rect_alloc4f(x1, y1, x2, y2));\n    }\n    /**\n\t * Materializes a rectangle at the specified memory location.\n\t */ static materialize(addr) {\n        return new $8d9a8566653c0099$export$2e2bcd8739ae039($8d9a8566653c0099$var$m.rect_materialize(addr));\n    }\n    /**\n\t * Constructs the rectangle object.\n\t */ constructor(addr){\n        this.addr = addr;\n        this.data = $8d9a8566653c0099$var$m.mapFloat32Array(addr, 6);\n    }\n    /**\n\t * Destroys the instance.\n\t */ free() {\n        $8d9a8566653c0099$var$m.rect_free(this.addr);\n    }\n    /**\n\t * Returns a clone of the rectangle.\n\t */ clone() {\n        return new $8d9a8566653c0099$export$2e2bcd8739ae039($8d9a8566653c0099$var$m.rect_clone(this.addr));\n    }\n    /**\n\t * Sets all coordinates of the rectangle to zero.\n\t */ zero() {\n        $8d9a8566653c0099$var$m.rect_zero(this.addr);\n        return this;\n    }\n    /**\n\t * Sets all coordinates of the rectangle to `null` for subsequent use with `extend`.\n\t */ reset() {\n        $8d9a8566653c0099$var$m.rect_reset(this.addr);\n        return this;\n    }\n    extend(x, y = null) {\n        if (y === null) $8d9a8566653c0099$var$m.rect_extend1v(this.addr, x.addr);\n        else $8d9a8566653c0099$var$m.rect_extend2f(this.addr, x, y);\n        return this;\n    }\n    translate(dx, dy = null) {\n        if (dy === null) $8d9a8566653c0099$var$m.rect_translate1v(this.addr, dx.addr);\n        else $8d9a8566653c0099$var$m.rect_translate2f(this.addr, dx, dy);\n        return this;\n    }\n    /**\n\t * Moves the center of the rectangle to the specified position.\t \n\t * @param normalized - When `true` the parameters `x` and `y` are treated as normalized ranging from 0 to 1 (inclusive).\n\t * !centerAt (x: number, y: number, normalized?: false) : Rect;\n\t */ center(x, y, normalized = false) {\n        $8d9a8566653c0099$var$m.rect_center(this.addr, x, y, normalized);\n        return this;\n    }\n    set(x1, y1 = null, x2, y2) {\n        if (y1 === null) $8d9a8566653c0099$var$m.rect_set1r(this.addr, x1.addr);\n        else $8d9a8566653c0099$var$m.rect_set4f(this.addr, x1, y1, x2, y2);\n        return this;\n    }\n    equals(x1, y1 = null, x2, y2) {\n        if (y1 === null) return $8d9a8566653c0099$var$m.rect_equals1r(this.addr, x1.addr);\n        return $8d9a8566653c0099$var$m.rect_equals4f(this.addr, x1, y1, x2, y2);\n    }\n    contains(x1, y1 = 0, x2 = 0, y2 = null) {\n        if (x1 instanceof $8d9a8566653c0099$export$2e2bcd8739ae039) return $8d9a8566653c0099$var$m.rect_contains1r(this.addr, x1.addr);\n        if (x1 instanceof (0, $485e585505f5c80a$export$2e2bcd8739ae039)) return $8d9a8566653c0099$var$m.rect_contains1v(this.addr, x1.addr, x2);\n        if (y2 === null) return $8d9a8566653c0099$var$m.rect_contains2f(this.addr, x1, y1, x2);\n        return $8d9a8566653c0099$var$m.rect_contains4f(this.addr, x1, y1, x2, y2);\n    }\n    union(x1, y1 = null, x2, y2) {\n        if (y1 === null) $8d9a8566653c0099$var$m.rect_union1r(this.addr, x1.addr);\n        else $8d9a8566653c0099$var$m.rect_union4f(this.addr, x1, y1, x2, y2);\n        return this;\n    }\n    intersects(x1, y1 = null, x2, y2) {\n        if (y1 === null) $8d9a8566653c0099$var$m.rect_intersects1r(this.addr, x1.addr);\n        else $8d9a8566653c0099$var$m.rect_intersects4f(this.addr, x1, y1, x2, y2);\n        return this;\n    }\n    intersection(x1, y1 = null, x2, y2) {\n        if (y1 === null) return $8d9a8566653c0099$var$m.rect_intersection1r(this.addr, x1.addr);\n        return $8d9a8566653c0099$var$m.rect_intersection4f(this.addr, x1, y1, x2, y2);\n    }\n    /**\n\t * Resizes the rectangle to the given size using its center or top-left corner as reference.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t * @param normalized - When `true` the `width` and `height` will be treated as normalized values ranging from 0 to 1 (inclusive).\n\t */ resize(width, height, topLeft = false, normalized = false) {\n        $8d9a8566653c0099$var$m.rect_resize(this.addr, width, height, topLeft, normalized);\n        return this;\n    }\n    /**\n\t * Resizes the rectangle using the specified deltas, relative to its center or top-left corner.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t */ resizeBy(dWidth, dHeight, topLeft = false) {\n        $8d9a8566653c0099$var$m.rect_resizeBy(this.addr, dWidth, dHeight, topLeft);\n        return this;\n    }\n    /**\n\t * Returns the value of the X1 coordinate.\n\t */ x1() {\n        return this.data[0];\n    }\n    /**\n\t * Returns the value of the Y1 coordinate.\n\t */ y1() {\n        return this.data[1];\n    }\n    /**\n\t * Returns the value of the X2 coordinate.\n\t */ x2() {\n        return this.data[2];\n    }\n    /**\n\t * Returns the value of the Y2 coordinate.\n\t */ y2() {\n        return this.data[3];\n    }\n    /**\n\t * Returns the value of the center X coordinate.\n\t */ cx() {\n        return this.data[4];\n    }\n    /**\n\t * Returns the value of the center Y coordinate.\n\t */ cy() {\n        return this.data[5];\n    }\n    /**\n\t * Returns the width of the rectangle.\n\t */ width() {\n        return $8d9a8566653c0099$var$m.rect_width(this.addr);\n    }\n    /**\n\t * Returns the height of the rectangle.\t \n\t */ height() {\n        return $8d9a8566653c0099$var$m.rect_height(this.addr);\n    }\n    /**\n\t * Returns `true` if the rectangle is a right rectangle, that is: x1 < x2 and y1 < y2.\n\t */ isRight() {\n        return $8d9a8566653c0099$var$m.rect_isRight(this.addr);\n    }\n    /**\n\t * Returns the area of the rectangle.\n\t * @param strict - Indicates if the area is returned only if the rectangle is a right rectangle.\n\t */ area(strict) {\n        return $8d9a8566653c0099$var$m.rect_area(this.addr, strict);\n    }\n    /**\n\t * Performs `floor` on the coordinates of the rectangle.\n\t */ floor() {\n        $8d9a8566653c0099$var$m.rect_floor(this.addr);\n        return this;\n    }\n    /**\n\t * Performs `ceil` on the coordinates of the rectangle.\n\t */ ceil() {\n        $8d9a8566653c0099$var$m.rect_ceil(this.addr);\n        return this;\n    }\n    /**\n\t * Truncates the rectangle coordinates to their integer parts.\n\t */ trunc() {\n        $8d9a8566653c0099$var$m.rect_trunc(this.addr);\n        return this;\n    }\n    /**\n\t * Truncates the rectangle coordinates to their fractional parts.\n\t */ fract() {\n        $8d9a8566653c0099$var$m.rect_fract(this.addr);\n        return this;\n    }\n    /**\n\t * Returns the string representation of the rectangle.\n\t */ toString() {\n        return `(${this.x1()}, ${this.y1()}, ${this.x2()}, ${this.y2()})`;\n    }\n}\n\n\nlet $f4e62a7eed23d321$var$m = null;\nclass $f4e62a7eed23d321$export$2e2bcd8739ae039 {\n    static #_ = (()=>{\n        /**\n\t * Number of bytes per object.\n\t */ this.BYTES = 9 * Float32Array.BYTES_PER_ELEMENT;\n    })();\n    /**\n\t * Binds the specified Asyl module to the class.\n\t */ static bind(module) {\n        $f4e62a7eed23d321$var$m = module;\n    }\n    /**\n\t * Allocates a new matrix.\n\t */ static alloc() {\n        return new $f4e62a7eed23d321$export$2e2bcd8739ae039($f4e62a7eed23d321$var$m.mat3_alloc());\n    }\n    /**\n\t * Materializes a matrix at the specified memory location.\n\t */ static materialize(addr) {\n        return new $f4e62a7eed23d321$export$2e2bcd8739ae039($f4e62a7eed23d321$var$m.mat3_materialize(addr));\n    }\n    /**\n\t * Constructs the matrix object.\n\t */ constructor(addr){\n        this.addr = addr;\n        this.data = $f4e62a7eed23d321$var$m.mapFloat32Array(addr, 9);\n    }\n    /**\n\t * Destroys the instance.\n\t */ free() {\n        $f4e62a7eed23d321$var$m.mat3_free(this.addr);\n    }\n    /**\n\t * Returns a clone of the matrix.\n\t */ clone() {\n        return new $f4e62a7eed23d321$export$2e2bcd8739ae039($f4e62a7eed23d321$var$m.mat3_clone(this.addr));\n    }\n    /**\n\t * Sets all components of the matrix to the given value.\n\t */ fill(value) {\n        $f4e62a7eed23d321$var$m.mat3_fill1f(this.addr, value);\n        return this;\n    }\n    set(value, a0 = null, a1 = null, a2 = null) {\n        if (value instanceof $f4e62a7eed23d321$export$2e2bcd8739ae039) {\n            $f4e62a7eed23d321$var$m.mat3_set1m(this.addr, value.addr);\n            return this;\n        }\n        if (a0 === null) {\n            $f4e62a7eed23d321$var$m.mat3_set1f(this.addr, value);\n            return this;\n        }\n        $f4e62a7eed23d321$var$m.mat3_set1i3f(this.addr, value, a0, a1, a2);\n        return this;\n    }\n    /**\n\t * Sets a column of the matrix.\n\t */ col(col, a0, a1, a2) {\n        $f4e62a7eed23d321$var$m.mat3_col1i3f(this.addr, col, a0, a1, a2);\n        return this;\n    }\n    /**\n\t * Sets a row of the matrix.\n\t */ row(row, a0, a1, a2) {\n        $f4e62a7eed23d321$var$m.mat3_row1i3f(this.addr, row, a0, a1, a2);\n        return this;\n    }\n    /**\n\t * Sets all components of the matrix to zero, and the diagonal to ones.\n\t */ identity() {\n        $f4e62a7eed23d321$var$m.mat3_identity(this.addr);\n        return this;\n    }\n    scale(sx, sy = null) {\n        if (sy === null) $f4e62a7eed23d321$var$m.mat3_scale1f(this.addr, sx);\n        else $f4e62a7eed23d321$var$m.mat3_scale2f(this.addr, sx, sy);\n        return this;\n    }\n    /**\n\t * Transposes the matrix.\n\t */ transpose() {\n        $f4e62a7eed23d321$var$m.mat3_transpose(this.addr);\n        return this;\n    }\n    /**\n\t * Returns the determinant of the matrix.\n\t */ det() {\n        return $f4e62a7eed23d321$var$m.mat3_det(this.addr);\n    }\n    /**\n\t * Appends the given matrix by using matrix multiplication.\n\t */ append(matrix) {\n        $f4e62a7eed23d321$var$m.mat3_append1m(this.addr, matrix.addr);\n        return this;\n    }\n    /**\n\t * Appends a translation matrix constructed with the specified deltas.\n\t */ translate(dx, dy) {\n        $f4e62a7eed23d321$var$m.mat3_translate2f(this.addr, dx, dy);\n        return this;\n    }\n    /**\n\t * Appends a rotation matrix constructed for the specified angle (in radians).\n\t */ rotate(angle) {\n        $f4e62a7eed23d321$var$m.mat3_rotate1f(this.addr, angle);\n        return this;\n    }\n    /**\n\t * Returns the string representation of the matrix.\n\t */ toString() {\n        return \"[\" + Array.from(this.data).join(\", \") + \"]\";\n    }\n}\n\n\nlet $3514beae8516eb55$var$m = null;\nclass $3514beae8516eb55$export$2e2bcd8739ae039 {\n    static #_ = (()=>{\n        /**\n\t * Number of bytes per object.\n\t */ this.BYTES = 16 * Float32Array.BYTES_PER_ELEMENT;\n    })();\n    /**\n\t * Binds the specified Asyl module to the class.\n\t */ static bind(module) {\n        $3514beae8516eb55$var$m = module;\n    }\n    /**\n\t * Allocates a new matrix.\n\t */ static alloc() {\n        return new $3514beae8516eb55$export$2e2bcd8739ae039($3514beae8516eb55$var$m.mat4_alloc());\n    }\n    /**\n\t * Materializes a matrix at the specified memory location.\n\t */ static materialize(addr) {\n        return new $3514beae8516eb55$export$2e2bcd8739ae039($3514beae8516eb55$var$m.mat4_materialize(addr));\n    }\n    /**\n\t * Constructs the matrix object.\n\t */ constructor(addr){\n        this.addr = addr;\n        this.data = $3514beae8516eb55$var$m.mapFloat32Array(addr, 16);\n    }\n    /**\n\t * Destroys the instance.\n\t */ free() {\n        $3514beae8516eb55$var$m.mat4_free(this.addr);\n    }\n    /**\n\t * Returns a clone of the matrix.\n\t */ clone() {\n        return new $3514beae8516eb55$export$2e2bcd8739ae039($3514beae8516eb55$var$m.mat4_clone(this.addr));\n    }\n    /**\n\t * Sets all components of the matrix to the given value.\n\t */ fill(value) {\n        $3514beae8516eb55$var$m.mat4_fill1f(this.addr, value);\n        return this;\n    }\n    set(value, a0 = null, a1 = null, a2 = null, a3 = null) {\n        if (value instanceof $3514beae8516eb55$export$2e2bcd8739ae039) {\n            $3514beae8516eb55$var$m.mat4_set1m(this.addr, value.addr);\n            return this;\n        }\n        if (a0 === null) {\n            $3514beae8516eb55$var$m.mat4_set1f(this.addr, value);\n            return this;\n        }\n        $3514beae8516eb55$var$m.mat4_set1i4f(this.addr, value, a0, a1, a2, a3);\n        return this;\n    }\n    /**\n\t * Sets a column of the matrix.\n\t */ col(col, a0, a1, a2, a3) {\n        $3514beae8516eb55$var$m.mat4_col1i4f(this.addr, col, a0, a1, a2, a3);\n        return this;\n    }\n    /**\n\t * Sets a row of the matrix.\n\t */ row(row, a0, a1, a2, a3) {\n        $3514beae8516eb55$var$m.mat4_row1i4f(this.addr, row, a0, a1, a2, a3);\n        return this;\n    }\n    /**\n\t * Sets all components of the matrix to zero, and the diagonal to ones.\n\t */ identity() {\n        $3514beae8516eb55$var$m.mat4_identity(this.addr);\n        return this;\n    }\n    scale(sx, sy = null, sz = null) {\n        if (sy === null) $3514beae8516eb55$var$m.mat4_scale1f(this.addr, sx);\n        else $3514beae8516eb55$var$m.mat4_scale3f(this.addr, sx, sy, sz);\n        return this;\n    }\n    /**\n\t * Transposes the matrix.\n\t */ transpose() {\n        $3514beae8516eb55$var$m.mat4_transpose(this.addr);\n        return this;\n    }\n    /**\n\t * Returns the determinant of the matrix.\n\t */ det() {\n        return $3514beae8516eb55$var$m.mat4_det(this.addr);\n    }\n    /**\n\t * Appends the given matrix by using matrix multiplication.\n\t */ append(matrix) {\n        $3514beae8516eb55$var$m.mat4_append1m(this.addr, matrix.addr);\n        return this;\n    }\n    /**\n\t * Appends a translation matrix constructed with the specified deltas.\n\t */ translate(dx, dy, dz) {\n        $3514beae8516eb55$var$m.mat4_translate3f(this.addr, dx, dy, dz);\n        return this;\n    }\n    /**\n\t * Appends a rotation matrix constructed for the specified angle (radians) along the X-axis.\n\t */ rotateX(angle) {\n        $3514beae8516eb55$var$m.mat4_rotateX(this.addr, angle);\n        return this;\n    }\n    /**\n\t * Appends a rotation matrix constructed for the specified angle (radians) along the Y-axis.\n\t */ rotateY(angle) {\n        $3514beae8516eb55$var$m.mat4_rotateY(this.addr, angle);\n        return this;\n    }\n    /**\n\t * Appends a rotation matrix constructed for the specified angle (radians) along the Z-axis.\n\t */ rotateZ(angle) {\n        $3514beae8516eb55$var$m.mat4_rotateZ(this.addr, angle);\n        return this;\n    }\n    /**\n\t * Returns the string representation of the matrix.\n\t */ toString() {\n        return \"[\" + Array.from(this.data).join(\", \") + \"]\";\n    }\n}\n\n\nvar $7eac9db634e83dd9$exports = {};\n$7eac9db634e83dd9$exports = \"data:application/wasm;base64,AGFzbQEAAAABxQEeYAF%2FAX9gAX8AYAF8AXxgAnx8AXxgAn19AX1gAABgAnx8AX9gA398fABgAn9%2FAGADf3x8AX9gAn9%2FAX9gBH98fHwBf2ADf398AX9gBH98fHwAYAJ%2FfABgA398fAF8YAJ%2FfwF8YAF%2FAXxgBHx8fHwBf2AFf3x8fHwAYAV%2FfHx8fAF%2FYAZ%2FfHx8fHwBf2AFf3x8fHwBfGAAAX9gBX9%2FfHx8AGABfwF9YAZ%2Ff3x8fHwAYAN8fH8Bf2AFf3x8f38AYAR%2FfHx%2FAAJsCQNlbnYGbWVtb3J5AgMCgIACA2VudgZtYWxsb2MAAANlbnYEZnJlZQABA2VudgNzaW4AAgNlbnYDY29zAAIDZW52BGZtYXgAAwNlbnYEZm1pbgADA2VudgVmbWluZgAEA2VudgVmbWF4ZgAEA5sBmQEFBgABAAcIAQAJCgsMAQEBBwgNBwgHCA4HCAEBAQEPEBERAQEBARIAAQATCAEAFAkKFQsMAQEBEwcIEwcIEwcIEwcOCAEBAQEWDxAREQEBAQEXAAEACA4OGBgBDgEZCAcOBxcAAQAIDg4aGgEOARkIDQ4ODg0SExscAAEAAQEHCAcIHQgUChQKCwwTCBQKFAodEREAEAEBAQEGCAF%2FAUHQiQQLB70RmAEMdmVjMl9hbGxvYzJmAAkQdmVjMl9tYXRlcmlhbGl6ZQAKCXZlYzJfZnJlZQALCnZlYzJfY2xvbmUADAp2ZWMyX3NldDJmAA0KdmVjMl9zZXQxdgAOCXZlYzJfemVybwAPC3ZlYzJfaXN6ZXJvABANdmVjMl9lcXVhbHMyZgARDXZlYzJfZXF1YWxzMXYAEg12ZWMyX2FsbW9zdDJmABMNdmVjMl9hbG1vc3QxdgAUCHZlYzJfbmVnABUIdmVjMl9pbnYAFgh2ZWMyX2FicwAXEHZlYzJfdHJhbnNsYXRlMmYAGBB2ZWMyX3RyYW5zbGF0ZTF2ABkNdmVjMl9yb3RhdGUzZgAaCnZlYzJfYWRkMmYAGwp2ZWMyX2FkZDF2ABwKdmVjMl9zdWIyZgAdCnZlYzJfc3ViMXYAHgx2ZWMyX3NjYWxlMWYAHwx2ZWMyX3NjYWxlMmYAIAx2ZWMyX3NjYWxlMXYAIQp2ZWMyX2Zsb29yACIJdmVjMl9jZWlsACMKdmVjMl90cnVuYwAkCnZlYzJfZnJhY3QAJQp2ZWMyX2RvdDJmACYKdmVjMl9kb3QxdgAnCXZlYzJfbWFnMgAoCHZlYzJfbWFnACkJdmVjMl91bml0ACoKdmVjMl9tYWpvcgArCnZlYzJfbWlub3IALAl2ZWMyX3NpZ24ALQx2ZWM0X2FsbG9jNGYALhB2ZWM0X21hdGVyaWFsaXplAC8JdmVjNF9mcmVlADAKdmVjNF9jbG9uZQAxCnZlYzRfc2V0NGYAMgp2ZWM0X3NldDF2ADMJdmVjNF96ZXJvADQLdmVjNF9pc3plcm8ANQ12ZWM0X2VxdWFsczRmADYNdmVjNF9lcXVhbHMyZgA3DXZlYzRfZXF1YWxzMXYAOA12ZWM0X2FsbW9zdDRmADkNdmVjNF9hbG1vc3QyZgA6DXZlYzRfYWxtb3N0MXYAOwh2ZWM0X25lZwA8CHZlYzRfaW52AD0IdmVjNF9hYnMAPhB2ZWM0X3RyYW5zbGF0ZTRmAD8QdmVjNF90cmFuc2xhdGUyZgBAEHZlYzRfdHJhbnNsYXRlMXYAQQp2ZWM0X2FkZDRmAEIKdmVjNF9hZGQyZgBDCnZlYzRfYWRkMXYARAp2ZWM0X3N1YjRmAEUKdmVjNF9zdWIyZgBGCnZlYzRfc3ViMXYARwx2ZWM0X3NjYWxlNGYASAx2ZWM0X3NjYWxlMmYASQx2ZWM0X3NjYWxlMWYASgx2ZWM0X3NjYWxlMXYASwp2ZWM0X2Zsb29yAEwJdmVjNF9jZWlsAE0KdmVjNF90cnVuYwBOCnZlYzRfZnJhY3QATwp2ZWM0X2RvdDRmAFAKdmVjNF9kb3QyZgBRCnZlYzRfZG90MXYAUgl2ZWM0X21hZzIAUwh2ZWM0X21hZwBUCXZlYzRfdW5pdABVCnZlYzRfbWFqb3IAVgp2ZWM0X21pbm9yAFcJdmVjNF9zaWduAFgKbWF0M19hbGxvYwBZEG1hdDNfbWF0ZXJpYWxpemUAWgltYXQzX2ZyZWUAWwptYXQzX2Nsb25lAFwKbWF0M19zZXQxbQBdC21hdDNfZmlsbDFmAF4KbWF0M19zZXQxZgBfDG1hdDNfY29sMWkzZgBgDG1hdDNfcm93MWkzZgBhDW1hdDNfaWRlbnRpdHkAYgxtYXQzX3NjYWxlMWYAYw5tYXQzX3RyYW5zcG9zZQBkCG1hdDNfZGV0AGUNbWF0M19hcHBlbmQxbQBmEG1hdDNfdHJhbnNsYXRlMmYAZw1tYXQzX3JvdGF0ZTFmAGgMbWF0M19zY2FsZTJmAGkKbWF0NF9hbGxvYwBqEG1hdDRfbWF0ZXJpYWxpemUAawltYXQ0X2ZyZWUAbAptYXQ0X2Nsb25lAG0KbWF0NF9zZXQxbQBuC21hdDRfZmlsbDFmAG8KbWF0NF9zZXQxZgBwDG1hdDRfY29sMWk0ZgBxDG1hdDRfcm93MWk0ZgByDW1hdDRfaWRlbnRpdHkAcwxtYXQ0X3NjYWxlMWYAdA5tYXQ0X3RyYW5zcG9zZQB1CG1hdDRfZGV0AHYNbWF0NF9hcHBlbmQxbQB3EG1hdDRfdHJhbnNsYXRlM2YAeAxtYXQ0X3JvdGF0ZVgAeQxtYXQ0X3JvdGF0ZVkAegxtYXQ0X3JvdGF0ZVoAewxtYXQ0X3NjYWxlM2YAfAxyZWN0X2FsbG9jNGYAfQpyZWN0X3NldDRmAH4McmVjdF9hbGxvYzJmAH8LcmVjdF9yZXNpemUAgAEQcmVjdF9tYXRlcmlhbGl6ZQCBAQlyZWN0X2ZyZWUAggEKcmVjdF9jbG9uZQCDAQlyZWN0X3plcm8AhAEKcmVjdF9yZXNldACFAQ1yZWN0X2V4dGVuZDJmAIYBDXJlY3RfZXh0ZW5kMXYAhwEQcmVjdF90cmFuc2xhdGUyZgCIARByZWN0X3RyYW5zbGF0ZTF2AIkBC3JlY3RfY2VudGVyAIoBCnJlY3Rfc2V0MXIAiwENcmVjdF9lcXVhbHM0ZgCMAQ1yZWN0X2VxdWFsczFyAI0BD3JlY3RfY29udGFpbnM0ZgCOAQ9yZWN0X2NvbnRhaW5zMXIAjwEPcmVjdF9jb250YWluczJmAJABD3JlY3RfY29udGFpbnMxdgCRAQxyZWN0X3VuaW9uNGYAkgEMcmVjdF91bmlvbjFyAJMBEXJlY3RfaW50ZXJzZWN0czRmAJQBEXJlY3RfaW50ZXJzZWN0czFyAJUBE3JlY3RfaW50ZXJzZWN0aW9uNGYAlgETcmVjdF9pbnRlcnNlY3Rpb24xcgCXAQ1yZWN0X3Jlc2l6ZUJ5AJgBCnJlY3Rfd2lkdGgAmQELcmVjdF9oZWlnaHQAmgEMcmVjdF9pc1JpZ2h0AJsBCXJlY3RfYXJlYQCcAQpyZWN0X2Zsb29yAJ0BCXJlY3RfY2VpbACeAQpyZWN0X3RydW5jAJ8BCnJlY3RfZnJhY3QAoAEIAQgK82yZAUcAAkACQAJAQcgJQQBBAf5IAgAOAgABAgtBgAhBAEHIAfwLAEHICUEC%2FhcCAEHICUF%2F%2FgACABoMAQtByAlBAUJ%2F%2FgECABoLCx4BAX9BCBCAgICAACICIAG2OAIEIAIgALY4AgAgAgsEACAACwoAIAAQgYCAgAALHAEBfiAAKQIAIQFBCBCAgICAACIAIAE3AgAgAAsSACAAIAK2OAIEIAAgAbY4AgALDAAgACABKQIANwIACwkAIABCADcCAAsnAQF%2FQQAhAQJAIAAqAgBDAAAAAFwNACAAKgIEQwAAAABbIQELIAELHAACQCAAKgIAuyABYQ0AQQAPCyAAKgIEuyACYQsgAAJAIAAqAgAgASoCAFsNAEEADwsgACoCBCABKgIEWwssAQF%2FQQAhBAJAIAAqAgC7IAGhmSADY0UNACAAKgIEuyACoZkgA2MhBAsgBAsyAQF%2FQQAhAwJAIAAqAgAgASoCAJOLuyACY0UNACAAKgIEIAEqAgSTi7sgAmMhAwsgAwsYACAAIAAqAgCMOAIAIAAgACoCBIw4AgQLIgAgAEMAAIA%2FIAAqAgCVOAIAIABDAACAPyAAKgIElTgCBAsYACAAIAAqAgCLOAIAIAAgACoCBIs4AgQLIAAgACAAKgIAuyABoLY4AgAgACAAKgIEuyACoLY4AgQLIgAgACABKgIAIAAqAgCSOAIAIAAgASoCBCAAKgIEkjgCBAtaAgF9A3wgACoCACEEIAEQgoCAgAAhBSAAIAAqAgS7IAOhtrsiBiABEIOAgIAAIgGiIAUgBLsgAqG2uyIHoqEgA6C2OAIEIAAgByABoiAFIAaioCACoLY4AgALIAAgACAAKgIAuyABoLY4AgAgACAAKgIEuyACoLY4AgQLIgAgACABKgIAIAAqAgCSOAIAIAAgASoCBCAAKgIEkjgCBAsgACAAIAAqAgC7IAGhtjgCACAAIAAqAgS7IAKhtjgCBAsiACAAIAAqAgAgASoCAJM4AgAgACAAKgIEIAEqAgSTOAIECyAAIAAgACoCALsgAaK2OAIAIAAgACoCBLsgAaK2OAIECyAAIAAgACoCALsgAaK2OAIAIAAgACoCBLsgAqK2OAIECyIAIAAgASoCACAAKgIAlDgCACAAIAEqAgQgACoCBJQ4AgQLGAAgACAAKgIAjjgCACAAIAAqAgSOOAIECxgAIAAgACoCAI04AgAgACAAKgIEjTgCBAtiAgF9AX8CQAJAIAAqAgAiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAKyOAIAAkACQCAAKgIEIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACACsjgCBAtoAgF9AX8CQAJAIAAqAgAiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAEgArKTOAIAAkACQCAAKgIEIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACABIAKykzgCBAsVACAAKgIAuyABoiAAKgIEuyACoqALGgAgACoCACABKgIAlCAAKgIEIAEqAgSUkrsLGgEBfSAAKgIAIgEgAZQgACoCBCIBIAGUkrsLGwEBfSAAKgIAIgEgAZQgACoCBCIBIAGUkrufC1wCAn0BfAJAAkAgACoCACIBQwAAAABcDQAgACoCBEMAAAAAWw0BCyAARAAAAAAAAPA%2FIAEgAZQgACoCBCICIAKUkrufoyIDIAK7orY4AgQgACADIAG7orY4AgALCxoAIAAgACoCAIsgACoCBIteQQJ0akEANgIACxoAIAAgACoCAIsgACoCBItdQQJ0akEANgIAC1oBAX0gAEMAAIC%2FQwAAgD8gACoCACIBQwAAAABdG0MAAAAAIAFDAAAAAFwbOAIAIABDAACAv0MAAIA%2FIAAqAgQiAUMAAAAAXRtDAAAAACABQwAAAABcGzgCBAsuAQF%2FQRAQgICAgAAiBCADtjgCDCAEIAK2OAIIIAQgAbY4AgQgBCAAtjgCACAECwQAIAALCgAgABCBgICAAAsqAQJ%2BIAApAgAhASAAKQIIIQJBEBCAgICAACIAIAI3AgggACABNwIAIAALIgAgACAEtjgCDCAAIAO2OAIIIAAgArY4AgQgACABtjgCAAsWACAAIAEpAgA3AgAgACABKQIINwIICxMAIABCADcCACAAQQhqQgA3AgALQQEBf0EAIQECQCAAKgIAQwAAAABcDQAgACoCBEMAAAAAXA0AIAAqAghDAAAAAFwNACAAKgIMQwAAAABbIQELIAELOQEBf0EAIQUCQCAAKgIAuyABYg0AIAAqAgS7IAJiDQAgACoCCLsgA2INACAAKgIMuyAEYSEFCyAFCxwAAkAgACoCALsgAWENAEEADwsgACoCBLsgAmELQQEBf0EAIQICQCAAKgIAIAEqAgBcDQAgACoCBCABKgIEXA0AIAAqAgggASoCCFwNACAAKgIMIAEqAgxbIQILIAILTAEBf0EAIQYCQCAAKgIAuyABoZkgBWVFDQAgACoCBLsgAqGZIAVlRQ0AIAAqAgi7IAOhmSAFZUUNACAAKgIMuyAEoZkgBWUhBgsgBgssAQF%2FQQAhBAJAIAAqAgC7IAGhmSADZUUNACAAKgIEuyACoZkgA2UhBAsgBAtYAQF%2FQQAhAwJAIAAqAgAgASoCAJOLuyACZUUNACAAKgIEIAEqAgSTi7sgAmVFDQAgACoCCCABKgIIk4u7IAJlRQ0AIAAqAgwgASoCDJOLuyACZSEDCyADCy4AIAAgACoCAIw4AgAgACAAKgIEjDgCBCAAIAAqAgiMOAIIIAAgACoCDIw4AgwLQgAgAEMAAIA%2FIAAqAgCVOAIAIABDAACAPyAAKgIElTgCBCAAQwAAgD8gACoCCJU4AgggAEMAAIA%2FIAAqAgyVOAIMCy4AIAAgACoCAIs4AgAgACAAKgIEizgCBCAAIAAqAgiLOAIIIAAgACoCDIs4AgwLPgAgACAAKgIAuyABoLY4AgAgACAAKgIEuyACoLY4AgQgACAAKgIIuyADoLY4AgggACAAKgIMuyAEoLY4AgwLIAAgACAAKgIAuyABoLY4AgAgACAAKgIEuyACoLY4AgQLQgAgACABKgIAIAAqAgCSOAIAIAAgASoCBCAAKgIEkjgCBCAAIAEqAgggACoCCJI4AgggACABKgIMIAAqAgySOAIMCz4AIAAgACoCALsgAaC2OAIAIAAgACoCBLsgAqC2OAIEIAAgACoCCLsgA6C2OAIIIAAgACoCDLsgBKC2OAIMCyAAIAAgACoCALsgAaC2OAIAIAAgACoCBLsgAqC2OAIEC0IAIAAgASoCACAAKgIAkjgCACAAIAEqAgQgACoCBJI4AgQgACABKgIIIAAqAgiSOAIIIAAgASoCDCAAKgIMkjgCDAs%2BACAAIAAqAgC7IAGhtjgCACAAIAAqAgS7IAKhtjgCBCAAIAAqAgi7IAOhtjgCCCAAIAAqAgy7IAShtjgCDAsgACAAIAAqAgC7IAGhtjgCACAAIAAqAgS7IAKhtjgCBAtCACAAIAAqAgAgASoCAJM4AgAgACAAKgIEIAEqAgSTOAIEIAAgACoCCCABKgIIkzgCCCAAIAAqAgwgASoCDJM4AgwLPgAgACAAKgIAuyABorY4AgAgACAAKgIEuyACorY4AgQgACAAKgIIuyADorY4AgggACAAKgIMuyAEorY4AgwLIAAgACAAKgIAuyABorY4AgAgACAAKgIEuyACorY4AgQLPgAgACAAKgIAuyABorY4AgAgACAAKgIEuyABorY4AgQgACAAKgIIuyABorY4AgggACAAKgIMuyABorY4AgwLQgAgACABKgIAIAAqAgCUOAIAIAAgASoCBCAAKgIElDgCBCAAIAEqAgggACoCCJQ4AgggACABKgIMIAAqAgyUOAIMCy4AIAAgACoCAI44AgAgACAAKgIEjjgCBCAAIAAqAgiOOAIIIAAgACoCDI44AgwLLgAgACAAKgIAjTgCACAAIAAqAgSNOAIEIAAgACoCCI04AgggACAAKgIMjTgCDAu%2BAQIBfQF%2FAkACQCAAKgIAIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACACsjgCAAJAAkAgACoCBCIBi0MAAABPXUUNACABqCECDAELQYCAgIB4IQILIAAgArI4AgQCQAJAIAAqAggiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAKyOAIIAkACQCAAKgIMIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACACsjgCDAvKAQIBfQF%2FAkACQCAAKgIAIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACABIAKykzgCAAJAAkAgACoCBCIBi0MAAABPXUUNACABqCECDAELQYCAgIB4IQILIAAgASACspM4AgQCQAJAIAAqAggiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAEgArKTOAIIAkACQCAAKgIMIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACABIAKykzgCDAspACAAKgIMuyAEoiAAKgIIuyADoiAAKgIAuyABoiAAKgIEuyACoqCgoAsVACAAKgIAuyABoiAAKgIEuyACoqALMgAgACoCDCABKgIMlCAAKgIIIAEqAgiUIAAqAgAgASoCAJQgACoCBCABKgIElJKSkrsLMAEBfSAAKgIMIgEgAZQgACoCCCIBIAGUIAAqAgAiASABlCAAKgIEIgEgAZSSkpK7CzEBAX0gACoCDCIBIAGUIAAqAggiASABlCAAKgIAIgEgAZQgACoCBCIBIAGUkpKSu58LpAECBH0BfAJAAkAgACoCACIBQwAAAABcDQAgACoCBEMAAAAAXA0AIAAqAghDAAAAAFwNACAAKgIMQwAAAABbDQELIABEAAAAAAAA8D8gACoCDCICIAKUIAAqAggiAyADlCABIAGUIAAqAgQiBCAElJKSkrufoyIFIAK7orY4AgwgACAFIAO7orY4AgggACAFIAS7orY4AgQgACAFIAG7orY4AgALC6oBAgF%2FBH0gAEEMaiEBIAAqAgyLIQIgACoCCIshAwJAAkAgACoCAIsiBCAAKgIEiyIFXkUNACAEIANeRQ0AIAQgAl5FDQAgAEIANwIEDAELAkAgBSAEXkUNACAFIANeRQ0AIAUgAl5FDQAgAEEANgIIIABBADYCAAwBCyAAQgA3AgAgASAAQQhqIgAgAyACXhsgACADIAVeGyAAIAMgBF4bIQELIAFBADYCAAuqAQIBfwR9IABBDGohASAAKgIMiyECIAAqAgiLIQMCQAJAIAAqAgCLIgQgACoCBIsiBV1FDQAgBCADXUUNACAEIAJdRQ0AIABCADcCBAwBCwJAIAUgBF1FDQAgBSADXUUNACAFIAJdRQ0AIABBADYCCCAAQQA2AgAMAQsgAEIANwIAIAEgAEEIaiIAIAMgAl0bIAAgAyAFXRsgACADIARdGyEBCyABQQA2AgALsAEBAX0gAEMAAIC%2FQwAAgD8gACoCACIBQwAAAABdG0MAAAAAIAFDAAAAAFwbOAIAIABDAACAv0MAAIA%2FIAAqAgQiAUMAAAAAXRtDAAAAACABQwAAAABcGzgCBCAAQwAAgL9DAACAPyAAKgIIIgFDAAAAAF0bQwAAAAAgAUMAAAAAXBs4AgggAEMAAIC%2FQwAAgD8gACoCDCIBQwAAAABdG0MAAAAAIAFDAAAAAFwbOAIMCwoAQSQQgICAgAALBAAgAAsKACAAEIGAgIAAC1gBAX9BJBCAgICAACIBQSBqIABBIGooAgA2AgAgAUEYaiAAQRhqKQIANwIAIAFBEGogAEEQaikCADcCACABQQhqIABBCGopAgA3AgAgASAAKQIANwIAIAELTAAgACABKQIANwIAIABBIGogAUEgaigCADYCACAAQRhqIAFBGGopAgA3AgAgAEEQaiABQRBqKQIANwIAIABBCGogAUEIaikCADcCAAsoAgF9AX8gAbYhAkEAIQMDQCAAIANqIAI4AgAgA0EEaiIDQSRHDQALCywCAX0BfyABtiECQXwhAwNAIAAgAjgCACAAQRBqIQAgA0EEaiIDQQVJDQALCywAAkAgAUECSw0AIAAgAUEMbGoiASAEtjgCCCABIAO2OAIEIAEgArY4AgALCywAAkAgAUECSw0AIAAgAUECdGoiASAEtjgCGCABIAO2OAIMIAEgArY4AgALC1gBAX8gAEIANwIAIABBIGpBADYCACAAQRhqQgA3AgAgAEEQakIANwIAIABBCGpCADcCAEF8IQEDQCAAQYCAgPwDNgIAIABBEGohACABQQRqIgFBBUkNAAsLKwECf0EAIQIDQCAAIAJqIgMgAyoCALsgAaK2OAIAIAJBBGoiAkEkRw0ACwvlAQEFf0EAIQFBAEIANwKYiICAAEEAQgA3ApCIgIAAQQBCADcCiIiAgABBAEIANwKAiICAAEEAQQA2AqCIgIAAQYCIgIAAIQIgACEDA0AgAyEEQQAhBQNAIAIgBWogBCoCADgCACAEQQxqIQQgBUEEaiIFQQxHDQALIANBBGohAyACQQxqIQIgAUEBaiIBQQNHDQALIABBIGpBACgCoIiAgAA2AgAgAEEYakEAKQKYiICAADcCACAAQRBqQQApApCIgIAANwIAIABBCGpBACkCiIiAgAA3AgAgAEEAKQKAiICAADcCAAtXAQV9IAAqAgggACoCDCIBIAAqAhwiApQgACoCGCIDIAAqAhAiBJSTlCAAKgIAIAQgACoCICIFlCACIAAqAhQiBJSTlCABIAWUIAMgBJSTIAAqAgSUk5ILpQQCBH8DfUEAIABBCGoiAikCADcCiIiAgABBACAAKQIANwKAiICAAEEAIABBIGoiAygCADYCoIiAgABBACAAQRhqIgQpAgA3ApiIgIAAQQAgAEEQaiIFKQIANwKQiICAACAAIAEqAghBACoCmIiAgACUIAEqAgBBACoCgIiAgACUIAEqAgRBACoCjIiAgACUkpI4AgAgACABKgIIQQAqApyIgIAAlCABKgIAQQAqAoSIgIAAlCABKgIEQQAqApCIgIAAlJKSOAIEIAIgASoCCEEAKgKgiICAAJQgASoCAEEAKgKIiICAAJQgASoCBEEAKgKUiICAAJSSkjgCACAAIAEqAhRBACoCmIiAgACUIAEqAgxBACoCgIiAgAAiBpQgASoCEEEAKgKMiICAAJSSkjgCDCAFIAEqAhRBACoCnIiAgACUIAEqAgxBACoChIiAgAAiB5QgASoCEEEAKgKQiICAAJSSkjgCACAAIAEqAhRBACoCoIiAgACUIAEqAgxBACoCiIiAgAAiCJQgASoCEEEAKgKUiICAAJSSkjgCFCAEIAEqAiBBACoCmIiAgACUIAYgASoCGJQgASoCHEEAKgKMiICAAJSSkjgCACAAIAEqAiBBACoCnIiAgACUIAcgASoCGJQgASoCHEEAKgKQiICAAJSSkjgCHCADIAEqAiBBACoCoIiAgACUIAggASoCGJQgASoCHEEAKgKUiICAAJSSkjgCAAuAAgECfwJAAkAgAUQAAAAAAAAAAGINACACRAAAAAAAAAAAYQ0BC0EAIAApAgA3AoCIgIAAQQAgAEEIaikCADcCiIiAgABBACAAQRhqIgMpAgA3ApiIgIAAQQAgAEEgaiIEKAIANgKgiICAAEEAIABBEGopAgA3ApCIgIAAIAMgAUEAKgKAiICAALuiQQAqAoyIgIAAuyACoqBBACoCmIiAgAC7oLY4AgAgACABQQAqAoSIgIAAu6JBACoCkIiAgAC7IAKioEEAKgKciICAALugtjgCHCAEIAFBACoCiIiAgAC7okEAKgKUiICAALsgAqKgQQAqAqCIgIAAu6C2OAIACwvIAQICfwJ9AkAgAUQAAAAAAAAAAGENAEEAQgA3AryIgIAAQQBCADcCtIiAgABBAEIANwKsiICAAEEAQgA3AqSIgIAAQQBBADYCxIiAgABBfCECQaSIgIAAIQMDQCADQYCAgPwDNgIAIANBEGohAyACQQRqIgJBBUkNAAtBACABEIOAgIAAtiIEOAK0iICAAEEAIAEQgoCAgAC2IgU4ArCIgIAAQQAgBDgCpIiAgABBACAFjDgCqIiAgAAgAEGkiICAABDmgICAAAsLsAEBAn8CQAJAIAFEAAAAAAAA8D9iDQAgAkQAAAAAAADwP2ENAQtBAEIANwK8iICAAEEAQgA3ArSIgIAAQQBCADcCrIiAgABBAEIANwKkiICAAEEAQQA2AsSIgIAAQXwhA0GkiICAACEEA0AgBEGAgID8AzYCACAEQRBqIQQgA0EEaiIDQQVJDQALQQAgArY4ArSIgIAAQQAgAbY4AqSIgIAAIABBpIiAgAAQ5oCAgAALCwsAQcAAEICAgIAACwQAIAALCgAgABCBgICAAAuJAQEBf0HAABCAgICAACIBQThqIABBOGopAgA3AgAgAUEwaiAAQTBqKQIANwIAIAFBKGogAEEoaikCADcCACABQSBqIABBIGopAgA3AgAgAUEYaiAAQRhqKQIANwIAIAFBEGogAEEQaikCADcCACABQQhqIABBCGopAgA3AgAgASAAKQIANwIAIAELfAAgACABKQIANwIAIABBOGogAUE4aikCADcCACAAQTBqIAFBMGopAgA3AgAgAEEoaiABQShqKQIANwIAIABBIGogAUEgaikCADcCACAAQRhqIAFBGGopAgA3AgAgAEEQaiABQRBqKQIANwIAIABBCGogAUEIaikCADcCAAspAgF9AX8gAbYhAkEAIQMDQCAAIANqIAI4AgAgA0EEaiIDQcAARw0ACwssAgF9AX8gAbYhAkF7IQMDQCAAIAI4AgAgAEEUaiEAIANBBWoiA0ELSQ0ACws0AAJAIAFBA0sNACAAIAFBBHRqIgEgBbY4AgwgASAEtjgCCCABIAO2OAIEIAEgArY4AgALCzQAAkAgAUEDSw0AIAAgAUECdGoiASAFtjgCMCABIAS2OAIgIAEgA7Y4AhAgASACtjgCAAsLdgEBfyAAQgA3AgAgAEE4akIANwIAIABBMGpCADcCACAAQShqQgA3AgAgAEEgakIANwIAIABBGGpCADcCACAAQRBqQgA3AgAgAEEIakIANwIAQXshAQNAIABBgICA%2FAM2AgAgAEEUaiEAIAFBBWoiAUELSQ0ACwssAQJ%2FQQAhAgNAIAAgAmoiAyADKgIAuyABorY4AgAgAkEEaiICQcAARw0ACwu5AgEFf0EAIQFBAEIANwKAiYCAAEEAQgA3AviIgIAAQQBCADcC8IiAgABBAEIANwLoiICAAEEAQgA3AuCIgIAAQQBCADcC2IiAgABBAEIANwLQiICAAEEAQgA3AsiIgIAAQciIgIAAIQIgACEDA0BBACEEIAMhBQNAIAIgBGogBSoCADgCACAFQRBqIQUgBEEEaiIEQRBHDQALIAJBEGohAiADQQRqIQMgAUEBaiIBQQRHDQALIABBOGpBACkCgImAgAA3AgAgAEEwakEAKQL4iICAADcCACAAQShqQQApAvCIgIAANwIAIABBIGpBACkC6IiAgAA3AgAgAEEYakEAKQLgiICAADcCACAAQRBqQQApAtiIgIAANwIAIABBCGpBACkC0IiAgAA3AgAgAEEAKQLIiICAADcCAAvhAQEOfSAAKgIgIAAqAjQiASAAKgIIIgIgACoCHCIDlCAAKgIMIgQgACoCGCIFlJMiBpQgACoCBCIHIAUgACoCPCIIlCADIAAqAjgiCZSTIgqUIAIgCJQgBCAJlJMiCyAAKgIUIgyUk5KUIAAqAgAgASAFIAAqAiwiDZQgAyAAKgIoIgWUkyIOlCAMIAUgCJQgDSAJlJMiCJQgCiAAKgIkIgOUk5KUIAEgAiANlCAEIAWUkyIClCAHIAiUIAsgA5STkiAAKgIQlJOSIAAqAjAgAyAGlCAHIA6UIAIgDJSTkpSTC5UJAgd%2FCH1BACAAKQIANwLIiICAAEEAIABBOGoiAikCADcCgImAgABBACAAQTBqIgMpAgA3AviIgIAAQQAgAEEoaiIEKQIANwLwiICAAEEAIABBIGoiBSkCADcC6IiAgABBACAAQRhqIgYpAgA3AuCIgIAAQQAgAEEQaiIHKQIANwLYiICAAEEAIABBCGoiCCkCADcC0IiAgAAgAEEAKgL4iICAACABKgIMlEEAKgLoiICAACABKgIIlEEAKgLIiICAACABKgIAlEEAKgLYiICAACABKgIElJKSkjgCACAAQQAqAvyIgIAAIAEqAgyUQQAqAuyIgIAAIAEqAgiUQQAqAsyIgIAAIAEqAgCUQQAqAtyIgIAAIAEqAgSUkpKSOAIEIAhBACoCgImAgAAgASoCDJRBACoC8IiAgAAgASoCCJRBACoC0IiAgAAgASoCAJRBACoC4IiAgAAgASoCBJSSkpI4AgAgAEEAKgKEiYCAACABKgIMlEEAKgL0iICAACABKgIIlEEAKgLUiICAACABKgIAlEEAKgLkiICAACABKgIElJKSkjgCDCAHQQAqAviIgIAAIAEqAhyUQQAqAuiIgIAAIAEqAhiUQQAqAsiIgIAAIgkgASoCEJRBACoC2IiAgAAgASoCFJSSkpI4AgAgAEEAKgL8iICAACABKgIclEEAKgLsiICAACABKgIYlEEAKgLMiICAACIKIAEqAhCUQQAqAtyIgIAAIAEqAhSUkpKSOAIUIAZBACoCgImAgAAgASoCHJRBACoC8IiAgAAgASoCGJRBACoC0IiAgAAiCyABKgIQlEEAKgLgiICAACABKgIUlJKSkjgCACAAQQAqAoSJgIAAIAEqAhyUQQAqAvSIgIAAIAEqAhiUQQAqAtSIgIAAIgwgASoCEJRBACoC5IiAgAAgASoCFJSSkpI4AhwgBUEAKgL4iICAACABKgIslEEAKgLoiICAACABKgIolCAJIAEqAiCUQQAqAtiIgIAAIg0gASoCJJSSkpI4AgAgAEEAKgL8iICAACABKgIslEEAKgLsiICAACABKgIolCAKIAEqAiCUQQAqAtyIgIAAIg4gASoCJJSSkpI4AiQgBEEAKgKAiYCAACABKgIslEEAKgLwiICAACABKgIolCALIAEqAiCUQQAqAuCIgIAAIg8gASoCJJSSkpI4AgAgAEEAKgKEiYCAACABKgIslEEAKgL0iICAACABKgIolCAMIAEqAiCUQQAqAuSIgIAAIhAgASoCJJSSkpI4AiwgA0EAKgL4iICAACABKgI8lEEAKgLoiICAACABKgI4lCAJIAEqAjCUIA0gASoCNJSSkpI4AgAgAEEAKgL8iICAACABKgI8lEEAKgLsiICAACABKgI4lCAKIAEqAjCUIA4gASoCNJSSkpI4AjQgAkEAKgKAiYCAACABKgI8lEEAKgLwiICAACABKgI4lCALIAEqAjCUIA8gASoCNJSSkpI4AgAgAEEAKgKEiYCAACABKgI8lEEAKgL0iICAACABKgI4lCAMIAEqAjCUIBAgASoCNJSSkpI4AjwLpQMBAn8CQAJAIAFEAAAAAAAAAABiDQAgAkQAAAAAAAAAAGINACADRAAAAAAAAAAAYQ0BC0EAIAApAgA3AsiIgIAAQQAgAEEQaikCADcC2IiAgABBACAAQSBqKQIANwLoiICAAEEAIABBMGoiBCkCADcC%2BIiAgABBACAAQThqIgUpAgA3AoCJgIAAQQAgAEEoaikCADcC8IiAgABBACAAQRhqKQIANwLgiICAAEEAIABBCGopAgA3AtCIgIAAIAQgA0EAKgLoiICAALuiIAFBACoCyIiAgAC7okEAKgLYiICAALsgAqKgoEEAKgL4iICAALugtjgCACAAIANBACoC7IiAgAC7oiABQQAqAsyIgIAAu6JBACoC3IiAgAC7IAKioKBBACoC%2FIiAgAC7oLY4AjQgBSADQQAqAvCIgIAAu6IgAUEAKgLQiICAALuiQQAqAuCIgIAAuyACoqCgQQAqAoCJgIAAu6C2OAIAIAAgA0EAKgL0iICAALuiIAFBACoC1IiAgAC7okEAKgLkiICAALsgAqKgoEEAKgKEiYCAALugtjgCPAsL6QECAn8CfQJAIAFEAAAAAAAAAABhDQBBAEIANwLAiYCAAEEAQgA3AriJgIAAQQBCADcCsImAgABBAEIANwKoiYCAAEEAQgA3AqCJgIAAQQBCADcCmImAgABBAEIANwKQiYCAAEEAQgA3AoiJgIAAQXshAkGIiYCAACEDA0AgA0GAgID8AzYCACADQRRqIQMgAkEFaiICQQtJDQALQQAgARCDgICAALYiBDgCsImAgABBACABEIKAgIAAtiIFOAKsiYCAAEEAIAQ4ApyJgIAAQQAgBYw4AqCJgIAAIABBiImAgAAQ94CAgAALC%2BkBAgJ%2FAn0CQCABRAAAAAAAAAAAYQ0AQQBCADcCwImAgABBAEIANwK4iYCAAEEAQgA3ArCJgIAAQQBCADcCqImAgABBAEIANwKgiYCAAEEAQgA3ApiJgIAAQQBCADcCkImAgABBAEIANwKIiYCAAEF7IQJBiImAgAAhAwNAIANBgICA%2FAM2AgAgA0EUaiEDIAJBBWoiAkELSQ0AC0EAIAEQg4CAgAC2IgQ4ArCJgIAAQQAgARCCgICAALYiBTgCkImAgABBACAEOAKIiYCAAEEAIAWMOAKoiYCAACAAQYiJgIAAEPeAgIAACwvpAQICfwJ9AkAgAUQAAAAAAAAAAGENAEEAQgA3AsCJgIAAQQBCADcCuImAgABBAEIANwKwiYCAAEEAQgA3AqiJgIAAQQBCADcCoImAgABBAEIANwKYiYCAAEEAQgA3ApCJgIAAQQBCADcCiImAgABBeyECQYiJgIAAIQMDQCADQYCAgPwDNgIAIANBFGohAyACQQVqIgJBC0kNAAtBACABEIOAgIAAtiIEOAKciYCAAEEAIAEQgoCAgAC2IgU4ApiJgIAAQQAgBDgCiImAgABBACAFjDgCjImAgAAgAEGIiYCAABD3gICAAAsL6wEBAn8CQAJAIAFEAAAAAAAA8D9iDQAgAkQAAAAAAADwP2INACADRAAAAAAAAPA%2FYQ0BC0EAQgA3AsCJgIAAQQBCADcCuImAgABBAEIANwKwiYCAAEEAQgA3AqiJgIAAQQBCADcCoImAgABBAEIANwKYiYCAAEEAQgA3ApCJgIAAQQBCADcCiImAgABBeyEEQYiJgIAAIQUDQCAFQYCAgPwDNgIAIAVBFGohBSAEQQVqIgRBC0kNAAtBACADtjgCsImAgABBACACtjgCnImAgABBACABtjgCiImAgAAgAEGIiYCAABD3gICAAAsLWAEBf0EYEICAgIAAIgQgA7Y4AgwgBCACtjgCCCAEIAG2OAIEIAQgALY4AgAgBCABIAOgRAAAAAAAAOA%2ForY4AhQgBCAAIAKgRAAAAAAAAOA%2ForY4AhAgBAtMACAAIAS2OAIMIAAgA7Y4AgggACACtjgCBCAAIAG2OAIAIAAgAiAEoEQAAAAAAADgP6K2OAIUIAAgASADoEQAAAAAAADgP6K2OAIQC5ABAQF%2FQRgQgICAgAAiA0IANwIAIANBEGpCADcCACADQQhqQgA3AgACQCACDQAgA0QAAAAAAAAAACABRAAAAAAAAOA%2FoiIBobY4AgQgA0QAAAAAAAAAACAARAAAAAAAAOA%2FoiIAobY4AgALIAMgAUQAAAAAAAAAAKC2OAIMIAMgAEQAAAAAAAAAAKC2OAIIIAMLqQEBAXwCQCAERQ0AIAAqAgwgACoCBJO7IAKiIQIgACoCCCAAKgIAk7sgAaIhAQsCQAJAIANFDQAgACABIAAqAgC7oLY4AgggAiAAKgIEu6AhAQwBCyAAIAAqAhC7IgUgAUQAAAAAAADgP6IiAaG2OAIAIAAgASAFoLY4AgggACAAKgIUuyIBIAJEAAAAAAAA4D%2BiIgKhtjgCBCACIAGgIQELIAAgAbY4AgwLBAAgAAsKACAAEIGAgIAAC3QBBH0gACoCACEBIAAqAgQhAiAAKgIIIQMgACoCDCEEQRgQgICAgAAiACAEOAIMIAAgAzgCCCAAIAI4AgQgACABOAIAIAAgArsgBLugRAAAAAAAAOA%2ForY4AhQgACABuyADu6BEAAAAAAAA4D%2BitjgCECAACx0AIABCADcCACAAQRBqQgA3AgAgAEEIakIANwIACzIAIABCgICA%2FIeAgMD%2FADcCECAAQoCAgPyHgIDA%2FwA3AgAgAEKAgID8h4CAwP8ANwIIC9gBAQF8AkACQCAAKgIAuyIDRP%2F%2F%2F%2F%2F%2F%2F%2B9%2FYQ0AIAMgAWRFDQELIAAgAbY4AgALAkACQCAAKgIEuyIDRP%2F%2F%2F%2F%2F%2F%2F%2B9%2FYQ0AIAMgAmRFDQELIAAgArY4AgQLAkACQCAAKgIIuyIDRP%2F%2F%2F%2F%2F%2F%2F%2B9%2FYQ0AIAMgAWNFDQELIAAgAbY4AggLAkACQCAAKgIMuyIBRP%2F%2F%2F%2F%2F%2F%2F%2B9%2FYQ0AIAEgAmNFDQELIAAgArY4AgwLIAAgACoCACAAKgIIkkMAAAA%2FlDgCECAAIAAqAgQgACoCDJJDAAAAP5Q4AhQL3AEBA30gASoCBCECAkACQCAAKgIAIgMgASoCACIEXg0AIAO7RP%2F%2F%2F%2F%2F%2F%2F%2B9%2FYg0BCyAAIAQ4AgALAkACQCAAKgIEIgMgAl4NACADu0T%2F%2F%2F%2F%2F%2F%2F%2Fvf2INAQsgACACOAIECwJAAkAgACoCCCIDIARdDQAgA7tE%2F%2F%2F%2F%2F%2F%2F%2F739iDQELIAAgBDgCCAsCQAJAIAAqAgwiBCACXQ0AIAS7RP%2F%2F%2F%2F%2F%2F%2F%2B9%2FYg0BCyAAIAI4AgwLIAAgACoCACAAKgIIkkMAAAA%2FlDgCECAAIAAqAgQgACoCDJJDAAAAP5Q4AhQLXAAgACAAKgIAuyABoLY4AgAgACAAKgIEuyACoLY4AgQgACAAKgIIuyABoLY4AgggACAAKgIMuyACoLY4AgwgACAAKgIQuyABoLY4AhAgACAAKgIUuyACoLY4AhQLXAECfSAAIAEqAgAiAiAAKgIAkjgCACAAIAEqAgQiAyAAKgIEkjgCBCAAIAIgACoCCJI4AgggACADIAAqAgySOAIMIAAgAiAAKgIQkjgCECAAIAMgACoCFJI4AhQLpAECAX0CfAJAIANFDQAgAiAAKgIMIAAqAgQiBJO7oiAEu6AhAiABIAAqAgggACoCACIEk7uiIAS7oCEBCyAAIAEgACoCELsiBaEiASAAKgIAu6C2OAIAIAAgAiAAKgIUuyIGoSICIAAqAgS7oLY4AgQgACABIAAqAgi7oLY4AgggACACIAAqAgy7oLY4AgwgACACIAagtjgCFCAAIAEgBaC2OAIQC2IBBH0gACABKgIMIgI4AgwgACABKgIIIgM4AgggACABKgIEIgQ4AgQgACABKgIAIgU4AgAgACAEuyACu6BEAAAAAAAA4D%2BitjgCFCAAIAW7IAO7oEQAAAAAAADgP6K2OAIQCzkBAX9BACEFAkAgACoCALsgAWINACAAKgIIuyADYg0AIAAqAgS7IAJiDQAgACoCDLsgBGEhBQsgBQtBAQF%2FQQAhAgJAIAAqAgAgASoCAFwNACAAKgIIIAEqAghcDQAgACoCBCABKgIEXA0AIAAqAgwgASoCDFshAgsgAgtZAQF%2FQQAhBQJAIAAqAgC7IAEQhICAgAAgAWINACAAKgIEuyACEISAgIAAIAJiDQAgACoCCLsgAxCFgICAACADYg0AIAAqAgy7IAQQhYCAgAAgBGEhBQsgBQt9AwF%2FAXwCfUEAIQICQCAAKgIAuyABKgIAuyIDEISAgIAAIANiDQAgASoCDCEEIAEqAgghBSAAKgIEuyABKgIEuyIDEISAgIAAIANiDQAgACoCCLsgBbsiAxCFgICAACADYg0AIAAqAgy7IAS7IgMQhYCAgAAgA2EhAgsgAgtIAQF%2FQQAhBAJAIAAqAgC7IAOhIAFlRQ0AIAAqAgi7IAOgIAFmRQ0AIAAqAgS7IAOhIAJlRQ0AIAAqAgy7IAOgIAJmIQQLIAQLVgIBfwF8QQAhAwJAIAAqAgC7IAKhIAEqAgC7IgRlRQ0AIAAqAgi7IAKgIARmRQ0AIAAqAgS7IAKhIAEqAgS7IgRlRQ0AIAAqAgy7IAKgIARmIQMLIAMLUgAgACAAKgIAuyABEIWAgIAAtjgCACAAIAAqAgS7IAIQhYCAgAC2OAIEIAAgACoCCLsgAxCEgICAALY4AgggACAAKgIMuyAEEISAgIAAtjgCDAtWACAAIAAqAgAgASoCABCGgICAADgCACAAIAAqAgQgASoCBBCGgICAADgCBCAAIAAqAgggASoCCBCHgICAADgCCCAAIAAqAgwgASoCDBCHgICAADgCDAt7AQF9IAAqAgghBSAAKgIAuyABEISAgIAAIQEgBbsgAxCFgICAACEDIAAqAgwhBSAAKgIEuyACEISAgIAAIQIgBbsgBBCFgICAACACoUQAAAAAAAAAABCEgICAACADIAGhRAAAAAAAAAAAEISAgIAAokQAAAAAAAAAAGQLfwEDfSAAKgIAIAEqAgAQh4CAgAAhAiAAKgIIIAEqAggQhoCAgAAhAyAAKgIEIAEqAgQQh4CAgAAhBCAAKgIMIAEqAgwQhoCAgAC7IAS7oUQAAAAAAAAAABCEgICAACADuyACu6FEAAAAAAAAAAAQhICAgACiRAAAAAAAAAAAZAuRAQEEfSAAIAAqAgC7IAEQhICAgAC2IgU4AgAgACAAKgIEuyACEISAgIAAtiIGOAIEIAAgACoCCLsgAxCFgICAALYiBzgCCCAAIAAqAgy7IAQQhYCAgAC2Igg4AgwgCCAGk7tEAAAAAAAAAAAQhICAgAAgByAFk7tEAAAAAAAAAAAQhICAgACiRAAAAAAAAAAAZAuVAQEEfSAAIAAqAgAgASoCABCHgICAACICOAIAIAAgACoCBCABKgIEEIeAgIAAIgM4AgQgACAAKgIIIAEqAggQhoCAgAAiBDgCCCAAIAAqAgwgASoCDBCGgICAACIFOAIMIAUgA5O7RAAAAAAAAAAAEISAgIAAIAQgApO7RAAAAAAAAAAAEISAgIAAokQAAAAAAAAAAGQLjgEBAXwCQAJAIANFDQAgACAAKgIIuyABoLY4AgggAEEMaiEDIAAqAgy7IQEMAQsgACAAKgIAuyABRAAAAAAAAOA%2FoiIEobY4AgAgACAAKgIEuyACRAAAAAAAAOA%2FoiIBobY4AgQgACAEIAAqAgi7oLY4AgggAEEMaiEDIAAqAgy7IQILIAMgASACoLY4AgALDgAgACoCCCAAKgIAk7sLDgAgACoCDCAAKgIEk7sLKAEBf0EAIQECQCAAKgIAIAAqAghfRQ0AIAAqAgQgACoCDF8hAQsgAQtlAQN9AkACQCABRQ0AQwAAAAAhAiAAKgIAIgMgACoCCCIEX0UNASAAKgIEIAAqAgxfRQ0BIAQgA5MgACoCDCAAKgIEk5S7DwsgACoCDCAAKgIEkyAAKgIIIAAqAgCTlCECCyACuwtEACAAIAAqAgCOOAIAIAAgACoCBI44AgQgACAAKgIIjjgCCCAAIAAqAgyOOAIMIAAgACoCEI44AhAgACAAKgIUjjgCFAtEACAAIAAqAgCNOAIAIAAgACoCBI04AgQgACAAKgIIjTgCCCAAIAAqAgyNOAIMIAAgACoCEI04AhAgACAAKgIUjTgCFAuaAgIBfQF%2FAkACQCAAKgIAIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACACsjgCAAJAAkAgACoCBCIBi0MAAABPXUUNACABqCECDAELQYCAgIB4IQILIAAgArI4AgQCQAJAIAAqAggiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAKyOAIIAkACQCAAKgIMIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACACsjgCDAJAAkAgACoCECIBi0MAAABPXUUNACABqCECDAELQYCAgIB4IQILIAAgArI4AhACQAJAIAAqAhQiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAKyOAIUC6wCAgF9AX8CQAJAIAAqAgAiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAEgArKTOAIAAkACQCAAKgIEIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACABIAKykzgCBAJAAkAgACoCCCIBi0MAAABPXUUNACABqCECDAELQYCAgIB4IQILIAAgASACspM4AggCQAJAIAAqAgwiAYtDAAAAT11FDQAgAaghAgwBC0GAgICAeCECCyAAIAEgArKTOAIMAkACQCAAKgIQIgGLQwAAAE9dRQ0AIAGoIQIMAQtBgICAgHghAgsgACABIAKykzgCEAJAAkAgACoCFCIBi0MAAABPXUUNACABqCECDAELQYCAgIB4IQILIAAgASACspM4AhQL\";\n\n\nlet $c5a61c35cbd537f5$export$130be424786e852f = null;\nfunction $c5a61c35cbd537f5$export$2cd8252107eb640b() {\n    return new Promise(async (resolve, reject)=>{\n        (0, $X9A9e$loadFromDataUri)((0, (/*@__PURE__*/$parcel$interopDefault($7eac9db634e83dd9$exports))), {}).then((asylModule)=>{\n            $c5a61c35cbd537f5$export$130be424786e852f = asylModule;\n            (0, $485e585505f5c80a$export$2e2bcd8739ae039).bind($c5a61c35cbd537f5$export$130be424786e852f);\n            (0, $baf50d9434a9dd81$export$2e2bcd8739ae039).bind($c5a61c35cbd537f5$export$130be424786e852f);\n            (0, $8d9a8566653c0099$export$2e2bcd8739ae039).bind($c5a61c35cbd537f5$export$130be424786e852f);\n            (0, $f4e62a7eed23d321$export$2e2bcd8739ae039).bind($c5a61c35cbd537f5$export$130be424786e852f);\n            (0, $3514beae8516eb55$export$2e2bcd8739ae039).bind($c5a61c35cbd537f5$export$130be424786e852f);\n            resolve();\n        }).catch(reject);\n    });\n}\n\n\nexport {$c5a61c35cbd537f5$export$130be424786e852f as module, $c5a61c35cbd537f5$export$2cd8252107eb640b as init, $485e585505f5c80a$export$2e2bcd8739ae039 as Vec2, $baf50d9434a9dd81$export$2e2bcd8739ae039 as Vec4, $8d9a8566653c0099$export$2e2bcd8739ae039 as Rect, $f4e62a7eed23d321$export$2e2bcd8739ae039 as Mat3, $3514beae8516eb55$export$2e2bcd8739ae039 as Mat4};\n//# sourceMappingURL=froxel-math.m.js.map\n","\nimport { loadFromDataUri } from 'asyl';\n\nimport Vec2 from './vec2';\nexport { default as Vec2 } from './vec2';\nimport Vec4 from './vec4';\nexport { default as Vec4 } from './vec4';\n\nimport Rect from './rect';\nexport { default as Rect } from './rect';\n\nimport Mat3 from './mat3';\nexport { default as Mat3 } from './mat3';\nimport Mat4 from './mat4';\nexport { default as Mat4 } from './mat4';\n\nexport let module = null;\n\n//@ts-ignore\nimport froxel_math from 'data-url:./froxel-math.wasm';\n\n/**\n * Initializes the WebAssembly module for the froxel-math package.\n */\nexport function init () : Promise<void>\n{\n\treturn new Promise<void> (async (resolve, reject) =>\n\t{\n\t\tloadFromDataUri(froxel_math, { })\n\t\t.then(asylModule =>\n\t\t{\n\t\t\tmodule = asylModule;\n\n\t\t\tVec2.bind(module);\n\t\t\tVec4.bind(module);\n\n\t\t\tRect.bind(module);\n\n\t\t\tMat3.bind(module);\n\t\t\tMat4.bind(module);\n\n\t\t\tresolve();\n\t\t})\n\t\t.catch(reject);\n\t});\n}\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 2D Vector.\n */\nexport default class Vec2\n{\n\t/**\n\t * Number of bytes per object.\n\t */\n\tstatic BYTES: number = 2*Float32Array.BYTES_PER_ELEMENT;\n\n\t/**\n\t * Address of underlying vec2.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new vector with the specified coordinates.\n\t */\n\tstatic alloc (x:number=0, y:number=0) : Vec2 {\n\t\treturn new Vec2(m.vec2_alloc2f(x, y));\n\t}\n\n\t/**\n\t * Materializes a vector at the specified memory location.\n\t */\n\tstatic materialize(addr: number) : Vec2\n\t{\n\t\treturn new Vec2(m.vec2_materialize(addr));\n\t}\n\n\t/**\n\t * Constructs the vector with the specified coordinates.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 2);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tfree() {\n\t\tm.vec2_free(this.addr);\n\t}\n\n\t/**\n\t * Returns a new vector with the same coordinates.\n\t */\n\tclone() : Vec2 {\n\t\treturn new Vec2(m.vec2_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector from a Vec2 object.\n\t */\n\tset (v: Vec2) : Vec2;\n\t/**\n\t * Sets the coordinates of the vector.\n\t */\n\tset (x: number, y: number) : Vec2;\n\n\tset (x: Vec2|number, y: number = null) : Vec2\n\t{\n\t\tif (y === null)\n\t\t\tm.vec2_set1v(this.addr, (x as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_set2f(this.addr, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the X-coordinate of the vector.\n\t */\n\tsetX (x: number) : Vec2 {\n\t\tthis.data[0] = x;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Y-coordinate of the vector.\n\t */\n\tsetY (y: number) : Vec2 {\n\t\tthis.data[1] = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X-coordinate.\n\t */\n\tx() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y-coordinate.\n\t */\n\ty() : number {\n\t\treturn this.data[1];\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector to zero.\n\t */\n\tzero() : Vec2 {\n\t\tm.vec2_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if the vector coordinates are zero.\n\t */\n\tiszero() : boolean {\n\t\treturn m.vec2_iszero(this.addr);\n\t}\n\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given Vec2.\n\t */\n\tequals (v: Vec2) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number) : boolean;\n\n\tequals (x: Vec2|number, y: number=null) : boolean\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec2_equals1v(this.addr, (x as Vec2).addr);\n\n\t\treturn m.vec2_equals2f(this.addr, x, y);\n\t}\n\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (v: Vec2, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, epsilon: number) : boolean;\n\n\talmost (x: Vec2|number, y: number=null, epsilon: number=null) : boolean\n\t{\n\t\tif (epsilon === null)\n\t\t\treturn m.vec2_almost1v(this.addr, (x as Vec2).addr, y);\n\n\t\treturn m.vec2_almost2f(this.addr, x, y, epsilon);\n\t}\n\n\t/**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */\n\tneg() : Vec2 {\n\t\tm.vec2_neg(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */\n\tinv() : Vec2 {\n\t\tm.vec2_inv(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Changes the components of the vector to their absolute value.\n\t */\n\tabs() : Vec2 {\n\t\tm.vec2_abs(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec2 to the vector.\n\t */\n\ttranslate (v: Vec2) : Vec2;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number) : Vec2;\n\n\ttranslate (dx: Vec2|number, dy: number=null) : Vec2\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_translate1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_translate2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rotates the vector by the specified angle (in radians) using the specified (optional) origin point.\n\t */\n\trotate (angle: number, cx: number=0, cy: number=0) : Vec2\n\t{\n\t\tm.vec2_rotate3f(this.addr, angle, cx, cy);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec2 to the vector.\n\t */\n\tadd (v: Vec2) : Vec2;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number) : Vec2;\n\n\tadd (dx: Vec2|number, dy: number=null)\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_add1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_add2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtracts the coordinates of the given Vec2 from the vector.\n\t */\n\tsub (v: Vec2) : Vec2;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number) : Vec2;\n\n\tsub (dx: Vec2|number, dy: number=null)\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_sub1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_sub2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales each components of the vector by the respective component of the given one.\n\t */\n\tscale (v: Vec2) : Vec2;\n\t/**\n\t * Scales both components of the vector by the given factor.\n\t */\n\tscale (factor: number) : Vec2;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number) : Vec2;\n\n\tscale (fx: Vec2|number, fy: number=null) : Vec2\n\t{\n\t\tif (fy === null)\n\t\t{\n\t\t\tif (fx instanceof Vec2)\n\t\t\t\tm.vec2_scale1v(this.addr, fx.addr);\n\t\t\telse\n\t\t\t\tm.vec2_scale1f(this.addr, fx);\n\t\t}\n\t\telse\n\t\t\tm.vec2_scale2f(this.addr, fx, fy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `floor` on the components of the vector.\n\t */\n\tfloor() : Vec2 {\n\t\tm.vec2_floor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the components of the vector.\n\t */\n\tceil() : Vec2 {\n\t\tm.vec2_ceil(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their integer parts.\n\t */\n\ttrunc() : Vec2 {\n\t\tm.vec2_trunc(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their fractional parts.\n\t */\n\tfract() : Vec2 {\n\t\tm.vec2_fract(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the dot product of the vectors.\n\t */\n\tdot (v: Vec2) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number) : number;\n\n\tdot (x: Vec2|number, y: number=null) : number\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec2_dot1v(this.addr, (x as Vec2).addr);\n\n\t\treturn m.vec2_dot2f(this.addr, x, y);\n\t}\n\n\t/**\n\t * Returns the squared magnitude of the vector.\n\t */\n\tmag2() : number {\n\t\treturn m.vec2_mag2(this.addr);\n\t}\n\n\t/**\n\t * Returns the magnitude of the vector.\n\t */\n\tmag() : number {\n\t\treturn m.vec2_mag(this.addr);\n\t}\n\n\t/**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */\n\tunit() : Vec2 {\n\t\tm.vec2_unit(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */\n\tmajor() : Vec2 {\n\t\tm.vec2_major(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */\n\tminor() : Vec2 {\n\t\tm.vec2_minor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its sign-vector representation.\n\t */\n\tsign() : Vec2 {\n\t\tm.vec2_sign(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the coordinates of the vector.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x()}, ${this.y()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 4D Vector.\n */\nexport default class Vec4\n{\n\t/**\n\t * Number of bytes per object.\n\t */\n\tstatic BYTES: number = 4*Float32Array.BYTES_PER_ELEMENT;\n\n\t/**\n\t * Address of underlying vec4.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new vector with the specified coordinates.\n\t */\n\tstatic alloc (x:number=0, y:number=0, z:number=0, w:number=0) : Vec4 {\n\t\treturn new Vec4(m.vec4_alloc4f(x, y, z, w));\n\t}\n\n\t/**\n\t * Materializes a vector at the specified memory location.\n\t */\n\tstatic materialize(addr: number) : Vec4\n\t{\n\t\treturn new Vec4(m.vec4_materialize(addr));\n\t}\n\n\t/**\n\t * Constructs the vector with the specified coordinates.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 4);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tfree() {\n\t\tm.vec4_free(this.addr);\n\t}\n\n\t/**\n\t * Returns a new vector with the same coordinates.\n\t */\n\tclone() : Vec4 {\n\t\treturn new Vec4(m.vec4_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector from a Vec4 object.\n\t */\n\tset (v: Vec4) : Vec4;\n\t/**\n\t * Sets the coordinates of the vector.\n\t */\n\tset (x: number, y: number, z: number, w: number) : Vec4;\n\n\tset (x: Vec4|number, y: number = null, z: number = null, w: number = null) : Vec4\n\t{\n\t\tif (y === null) {\n\t\t\tm.vec4_set1v(this.addr, (x as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_set4f(this.addr, x, y, z, w);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the X-coordinate of the vector.\n\t */\n\tsetX (x: number) : Vec4 {\n\t\tthis.data[0] = x;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Y-coordinate of the vector.\n\t */\n\tsetY (y: number) : Vec4 {\n\t\tthis.data[1] = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Z-coordinate of the vector.\n\t */\n\tsetZ (z: number) : Vec4 {\n\t\tthis.data[2] = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the W-coordinate of the vector.\n\t */\n\tsetW (w: number) : Vec4 {\n\t\tthis.data[3] = w;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X-coordinate.\n\t */\n\tx() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y-coordinate.\n\t */\n\ty() : number {\n\t\treturn this.data[1];\n\t}\n\n\t/**\n\t * Returns the value of the Z-coordinate.\n\t */\n\tz() : number {\n\t\treturn this.data[2];\n\t}\n\n\t/**\n\t * Returns the value of the W-coordinate.\n\t */\n\tw() : number {\n\t\treturn this.data[3];\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector to zero.\n\t */\n\tzero() : Vec4 {\n\t\tm.vec4_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if the vector coordinates are zero.\n\t */\n\tiszero() : boolean {\n\t\treturn m.vec4_iszero(this.addr);\n\t}\n\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given Vec4.\n\t */\n\tequals (v: Vec4) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number, z:number, w:number) : boolean;\n\n\tequals (x: Vec4|number, y: number=null, z: number = null, w: number = null) : boolean\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec4_equals1v(this.addr, (x as Vec4).addr);\n\n\t\tif (z === null)\n\t\t\treturn m.vec4_equals2f(this.addr, x, y);\n\n\t\treturn m.vec4_equals4f(this.addr, x, y, z, w);\n\t}\n\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (v: Vec4, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, z: number, w: number, epsilon: number) : boolean;\n\n\talmost (x: Vec4|number, y: number=null, z:number=null, w:number=null, epsilon: number=null) : boolean\n\t{\n\t\tif (z === null)\n\t\t\treturn m.vec4_almost1v(this.addr, (x as Vec4).addr, y);\n\n\t\tif (w === null)\n\t\t\treturn m.vec4_almost2f(this.addr, x, y, epsilon);\n\n\t\treturn m.vec4_almost4f(this.addr, x, y, z, w, epsilon);\n\t}\n\n\t/**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */\n\tneg() : Vec4 {\n\t\tm.vec4_neg(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */\n\tinv() : Vec4 {\n\t\tm.vec4_inv(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Changes the components of the vector to their absolute value.\n\t */\n\tabs() : Vec4 {\n\t\tm.vec4_abs(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec4 to the vector.\n\t */\n\ttranslate (v: Vec4) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\ttranslate (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null) : Vec4\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_translate1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (dz === null) {\n\t\t\tm.vec4_translate2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_translate4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec4 to the vector.\n\t */\n\tadd (v: Vec4) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\tadd (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null)\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_add1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tif (dz === null) {\n\t\t\tm.vec4_add2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_add4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtracts the coordinates of the given Vec4 from the vector.\n\t */\n\tsub (v: Vec4) : Vec4;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number) : Vec4;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\tsub (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null)\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_sub1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (dz === null) {\n\t\t\tm.vec4_sub2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_sub4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales each components of the vector by the respective component of the given one.\n\t */\n\tscale (v: Vec4) : Vec4;\n\t/**\n\t * Scales both components of the vector by the given factor.\n\t */\n\tscale (factor: number) : Vec4;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number) : Vec4;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number, fz: number, fw: number) : Vec4;\n\n\tscale (fx: Vec4|number, fy: number=null, fz: number=null, fw: number=null) : Vec4\n\t{\n\t\tif (fy === null)\n\t\t{\n\t\t\tif (fx instanceof Vec4)\n\t\t\t\tm.vec4_scale1v(this.addr, fx.addr);\n\t\t\telse\n\t\t\t\tm.vec4_scale1f(this.addr, fx);\n\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tif (fz === null) {\n\t\t\tm.vec4_scale2f(this.addr, fx, fy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_scale4f(this.addr, fx, fy, fz, fw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `floor` on the components of the vector.\n\t */\n\tfloor() : Vec4 {\n\t\tm.vec4_floor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the components of the vector.\n\t */\n\tceil() : Vec4 {\n\t\tm.vec4_ceil(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their integer parts.\n\t */\n\ttrunc() : Vec4 {\n\t\tm.vec4_trunc(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their fractional parts.\n\t */\n\tfract() : Vec4 {\n\t\tm.vec4_fract(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the dot product of the vectors.\n\t */\n\tdot (v: Vec4) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number, z: number, w: number) : number;\n\n\tdot (x: Vec4|number, y: number=null, z: number=null, w: number=null) : number\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec4_dot1v(this.addr, (x as Vec4).addr);\n\n\t\tif (z === null)\n\t\t\treturn m.vec4_dot2f(this.addr, x, y);\n\n\t\treturn m.vec4_dot4f(this.addr, x, y, z, w);\n\t}\n\n\t/**\n\t * Returns the squared magnitude of the vector.\n\t */\n\tmag2() : number {\n\t\treturn m.vec4_mag2(this.addr);\n\t}\n\n\t/**\n\t * Returns the magnitude of the vector.\n\t */\n\tmag() : number {\n\t\treturn m.vec4_mag(this.addr);\n\t}\n\n\t/**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */\n\tunit() : Vec4 {\n\t\tm.vec4_unit(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */\n\tmajor() : Vec4 {\n\t\tm.vec4_major(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */\n\tminor() : Vec4 {\n\t\tm.vec4_minor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its sign-vector representation.\n\t */\n\tsign() : Vec4 {\n\t\tm.vec4_sign(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the coordinates of the vector.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x()}, ${this.y()}, ${this.z()}, ${this.w()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\nimport Vec2 from './vec2';\n\nlet m: Module = null;\n\n/**\n * Rectangle.\n */\nexport default class Rect\n{\n\t/**\n\t * Number of bytes per object.\n\t */\n\tstatic BYTES: number = 6*Float32Array.BYTES_PER_ELEMENT;\n\n\t/**\n\t * Address of underlying Rect.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new rectangle of zero size.\n\t */\n\tstatic alloc() : Rect;\n\t/**\n\t * Allocates a new rectangle with the specified size.\n\t */\n\tstatic alloc (width: number, height: number, topLeft?: boolean) : Rect;\n\t/**\n\t * Allocates a new rectangle with the specified coordinates.\n\t */\n\tstatic alloc (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tstatic alloc (x1: number=null, y1: number=null, x2: number|boolean=false, y2: number=null) : Rect\n\t{\n\t\tif (x1 === null)\n\t\t\treturn new Rect(m.rect_alloc4f(0, 0, 0, 0));\n\n\t\tif (y2 === null)\n\t\t\treturn new Rect(m.rect_alloc2f(x1, y1, x2));\n\n\t\treturn new Rect(m.rect_alloc4f(x1, y1, x2, y2));\n\t}\n\n\t/**\n\t * Materializes a rectangle at the specified memory location.\n\t */\n\tstatic materialize(addr: number) : Rect\n\t{\n\t\treturn new Rect(m.rect_materialize(addr));\n\t}\n\n\t/**\n\t * Constructs the rectangle object.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 6);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tfree() : void {\n\t\tm.rect_free(this.addr);\n\t}\n\n\t/**\n\t * Returns a clone of the rectangle.\n\t */\n\tclone() : Rect {\n\t\treturn new Rect(m.rect_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets all coordinates of the rectangle to zero.\n\t */\n\tzero() : Rect {\n\t\tm.rect_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets all coordinates of the rectangle to `null` for subsequent use with `extend`.\n\t */\n\treset() : Rect {\n\t\tm.rect_reset(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Extends the rectangle to contain the specified vector coordinates.\n\t */\n\textend (v: Vec2) : Rect;\n\t/**\n\t * Extends the rectangle to contain the specified point.\n\t */\n\textend (x: number, y: number) : Rect;\n\n\textend (x: Vec2|number, y: number=null) : Rect\n\t{\n\t\tif (y === null)\n\t\t\tm.rect_extend1v(this.addr, (x as Vec2).addr);\n\t\telse\n\t\t\tm.rect_extend2f(this.addr, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Translates the rectangle by the vector coordinates.\n\t */\n\ttranslate (v: Vec2) : Rect;\n\t/**\n\t * Translates the rectangle by the given deltas.\n\t */\n\ttranslate (dx: number, dy: number) : Rect;\n\n\ttranslate (dx: Vec2|number, dy: number=null) : Rect\n\t{\n\t\tif (dy === null)\n\t\t\tm.rect_translate1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.rect_translate2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the center of the rectangle to the specified position.\t \n\t * @param normalized - When `true` the parameters `x` and `y` are treated as normalized ranging from 0 to 1 (inclusive).\n\t * !centerAt (x: number, y: number, normalized?: false) : Rect;\n\t */\n\tcenter (x: number, y: number, normalized: boolean=false) : Rect\n\t{\n\t\tm.rect_center(this.addr, x, y, normalized);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copies the coordinates from the specified rectangle.\n\t */\n\tset (r: Rect) : Rect;\n\t/**\n\t * Sets the coordinates of the rectangle.\n\t */\n\tset (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tset (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_set1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_set4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns `true` if the given rectangle coordinates are equal.\n\t */\n\tequals (r: Rect) : boolean;\n\t/**\n\t * \tReturns `true` if the coordinates are equal.\n\t */\n\tequals (x1: number, y1: number, x2: number, y2: number) : boolean;\n\t\n\tequals (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : boolean\n\t{\n\t\tif (y1 === null)\n\t\t\treturn m.rect_equals1r(this.addr, (x1 as Rect).addr);\n\n\t\treturn m.rect_equals4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Returns `true` if the rectangle contains the given one.\n\t */\n\tcontains (r: Rect) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the given one describes by the (x1, y1) to (x2, y2) coordinates.\n\t */\n\tcontains (x1: number, y1: number, x2: number, y2: number) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the vector given coordinates.\n\t */\n\tcontains (v: Vec2, epsilon?: number) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the given coordinates.\n\t */\n\tcontains (x: number, y: number, epsilon?: number) : boolean;\n\n\tcontains (x1: Rect|Vec2|number, y1: number=0, x2: number=0, y2: number=null) : boolean\n\t{\n\t\tif (x1 instanceof Rect)\n\t\t\treturn m.rect_contains1r(this.addr, x1.addr);\n\n\t\tif (x1 instanceof Vec2)\n\t\t\treturn m.rect_contains1v(this.addr, x1.addr, x2);\n\n\t\tif (y2 === null)\n\t\t\treturn m.rect_contains2f(this.addr, x1, y1, x2);\n\n\t\treturn m.rect_contains4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Sets the coordinates of the rectangle to the union of it and the given one.\n\t */\n\tunion (r: Rect) : Rect;\n\t/**\n\t * Sets the coordinates of the rectangle to the union of it and the given one.\n\t */\n\tunion (x1: number, y1: number, x2: number, y2: number) : Rect;\n\t\n\tunion (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_union1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_union4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns `true` if the rectangles intersect.\n\t */\n\tintersects (r: Rect) : Rect;\n\t/**\n\t * Returns `true` if the rectangle and the given coordinates intersect.\n\t */\n\tintersects (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tintersects (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_intersects1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_intersects4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the coordinates of the rectangle to the intersection of it and the given one.\n\t */\n\tintersection (r: Rect) : boolean;\n\t/**\n\t * Sets the coordinates of the rectangle to the intersection of it and the given one.\n\t */\n\tintersection (x1: number, y1: number, x2: number, y2: number) : boolean;\n\n\tintersection (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : boolean\n\t{\n\t\tif (y1 === null)\n\t\t\treturn m.rect_intersection1r(this.addr, (x1 as Rect).addr);\n\n\t\treturn m.rect_intersection4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Resizes the rectangle to the given size using its center or top-left corner as reference.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t * @param normalized - When `true` the `width` and `height` will be treated as normalized values ranging from 0 to 1 (inclusive).\n\t */\n\tresize (width: number, height: number, topLeft: boolean=false, normalized: boolean=false) : Rect\n\t{\n\t\tm.rect_resize (this.addr, width, height, topLeft, normalized);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resizes the rectangle using the specified deltas, relative to its center or top-left corner.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t */\n\tresizeBy (dWidth: number, dHeight: number, topLeft: boolean=false) : Rect\n\t{\n\t\tm.rect_resizeBy (this.addr, dWidth, dHeight, topLeft);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X1 coordinate.\n\t */\n\tx1() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y1 coordinate.\n\t */\n\ty1() : number {\n\t\treturn this.data[1];\n\t}\n\n\n\t/**\n\t * Returns the value of the X2 coordinate.\n\t */\n\tx2() : number {\n\t\treturn this.data[2];\n\t}\n\n\t/**\n\t * Returns the value of the Y2 coordinate.\n\t */\n\ty2() : number {\n\t\treturn this.data[3];\n\t}\n\n\t/**\n\t * Returns the value of the center X coordinate.\n\t */\n\tcx() : number {\n\t\treturn this.data[4];\n\t}\n\n\t/**\n\t * Returns the value of the center Y coordinate.\n\t */\n\tcy() : number {\n\t\treturn this.data[5];\n\t}\n\n\t/**\n\t * Returns the width of the rectangle.\n\t */\n\twidth() : number {\n\t\treturn m.rect_width (this.addr);\n\t}\n\n\t/**\n\t * Returns the height of the rectangle.\t \n\t */\n\theight() : number {\n\t\treturn m.rect_height (this.addr);\n\t}\n\n\t/**\n\t * Returns `true` if the rectangle is a right rectangle, that is: x1 < x2 and y1 < y2.\n\t */\n\tisRight() : boolean {\n\t\treturn m.rect_isRight (this.addr);\n\t}\n\n\t/**\n\t * Returns the area of the rectangle.\n\t * @param strict - Indicates if the area is returned only if the rectangle is a right rectangle.\n\t */\n\tarea (strict?: boolean) : number {\n\t\treturn m.rect_area (this.addr, strict);\n\t}\n\n\t/**\n\t * Performs `floor` on the coordinates of the rectangle.\n\t */\n\tfloor() : Rect {\n\t\tm.rect_floor (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the coordinates of the rectangle.\n\t */\n\tceil() : Rect {\n\t\tm.rect_ceil (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the rectangle coordinates to their integer parts.\n\t */\n\ttrunc() : Rect {\n\t\tm.rect_trunc (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the rectangle coordinates to their fractional parts.\n\t */\n\tfract() : Rect {\n\t\tm.rect_fract (this.addr);\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Returns the string representation of the rectangle.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x1()}, ${this.y1()}, ${this.x2()}, ${this.y2()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 3x3 Matrix.\n */\nexport default class Mat3\n{\n\t/**\n\t * Number of bytes per object.\n\t */\n\tstatic BYTES: number = 9*Float32Array.BYTES_PER_ELEMENT;\n\n\t/**\n\t * Address of underlying mat3 object.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new matrix.\n\t */\n\tstatic alloc() : Mat3\n\t{\n\t\treturn new Mat3(m.mat3_alloc());\n\t}\n\n\t/**\n\t * Materializes a matrix at the specified memory location.\n\t */\n\tstatic materialize(addr: number) : Mat3\n\t{\n\t\treturn new Mat3(m.mat3_materialize(addr));\n\t}\n\n\t/**\n\t * Constructs the matrix object.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 9);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tfree() : void {\n\t\tm.mat3_free(this.addr);\n\t}\n\n\t/**\n\t * Returns a clone of the matrix.\n\t */\n\tclone() : Mat3 {\n\t\treturn new Mat3(m.mat3_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets all components of the matrix to the given value.\n\t */\n\tfill (value: number) : Mat3 {\n\t\tm.mat3_fill1f(this.addr, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the diagonal of the matrix to the specified value.\n\t */\n\tset (value: number) : Mat3;\n\t/**\n\t * Copies all the components from the specified matrix.\n\t */\n\tset (matrix: Mat3) : Mat3;\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tset (col: number, a0: number, a1: number, a2: number) : Mat3;\n\n\tset (value: Mat3|number, a0: number=null, a1: number=null, a2: number=null) : Mat3\n\t{\n\t\tif (value instanceof Mat3) {\n\t\t\tm.mat3_set1m(this.addr, value.addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (a0 === null) {\n\t\t\tm.mat3_set1f(this.addr, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.mat3_set1i3f(this.addr, value, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tcol (col: number, a0: number, a1: number, a2: number) : Mat3\n\t{\n\t\tm.mat3_col1i3f(this.addr, col, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a row of the matrix.\n\t */\n\trow (row: number, a0: number, a1: number, a2: number) : Mat3\n\t{\n\t\tm.mat3_row1i3f(this.addr, row, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets all components of the matrix to zero, and the diagonal to ones.\n\t */\n\tidentity() : Mat3\n\t{\n\t\tm.mat3_identity(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales all the components of the matrix by the specified factor.\n\t */\n\tscale (f: number) : Mat3;\n\t/**\n\t * Appends a `scale` matrix constructed with the specified factors.\n\t */\n\tscale (sx: number, sy: number) : Mat3;\n\n\tscale (sx: number, sy: number=null) : Mat3\n\t{\n\t\tif (sy === null)\n\t\t\tm.mat3_scale1f(this.addr, sx);\n\t\telse\n\t\t\tm.mat3_scale2f(this.addr, sx, sy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transposes the matrix.\n\t */\n\ttranspose() : Mat3\n\t{\n\t\tm.mat3_transpose(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the determinant of the matrix.\n\t */\n\tdet() : number\n\t{\n\t\treturn m.mat3_det(this.addr);\n\t}\n\n\t/**\n\t * Appends the given matrix by using matrix multiplication.\n\t */\n\tappend (matrix: Mat3) : Mat3\n\t{\n\t\tm.mat3_append1m(this.addr, matrix.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a translation matrix constructed with the specified deltas.\n\t */\n\ttranslate (dx: number, dy: number) : Mat3\n\t{\n\t\tm.mat3_translate2f(this.addr, dx, dy);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a rotation matrix constructed for the specified angle (in radians).\n\t */\n\trotate (angle: number) : Mat3\n\t{\n\t\tm.mat3_rotate1f(this.addr, angle);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the matrix.\n\t */\n\ttoString() : string\n\t{\n\t\treturn '[' + Array.from(this.data).join(', ') + ']';\n\t}\n};\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 4x4 Matrix.\n */\nexport default class Mat4\n{\n\t/**\n\t * Number of bytes per object.\n\t */\n\tstatic BYTES: number = 16*Float32Array.BYTES_PER_ELEMENT;\n\n\t/**\n\t * Address of underlying mat4 object.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new matrix.\n\t */\n\tstatic alloc() : Mat4\n\t{\n\t\treturn new Mat4(m.mat4_alloc());\n\t}\n\n\t/**\n\t * Materializes a matrix at the specified memory location.\n\t */\n\tstatic materialize(addr: number) : Mat4\n\t{\n\t\treturn new Mat4(m.mat4_materialize(addr));\n\t}\n\n\t/**\n\t * Constructs the matrix object.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 16);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tfree() : void {\n\t\tm.mat4_free(this.addr);\n\t}\n\n\t/**\n\t * Returns a clone of the matrix.\n\t */\n\tclone() : Mat4 {\n\t\treturn new Mat4(m.mat4_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets all components of the matrix to the given value.\n\t */\n\tfill (value: number) : Mat4 {\n\t\tm.mat4_fill1f(this.addr, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the diagonal of the matrix to the specified value.\n\t */\n\tset (value: number) : Mat4;\n\t/**\n\t * Copies all the components from the specified matrix.\n\t */\n\tset (matrix: Mat4) : Mat4;\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tset (col: number, a0: number, a1: number, a2: number, a3: number) : Mat4;\n\n\tset (value: Mat4|number, a0: number=null, a1: number=null, a2: number=null, a3: number=null) : Mat4\n\t{\n\t\tif (value instanceof Mat4) {\n\t\t\tm.mat4_set1m(this.addr, value.addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (a0 === null) {\n\t\t\tm.mat4_set1f(this.addr, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.mat4_set1i4f(this.addr, value, a0, a1, a2, a3);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tcol (col: number, a0: number, a1: number, a2: number, a3: number) : Mat4\n\t{\n\t\tm.mat4_col1i4f(this.addr, col, a0, a1, a2, a3);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a row of the matrix.\n\t */\n\trow (row: number, a0: number, a1: number, a2: number, a3: number) : Mat4\n\t{\n\t\tm.mat4_row1i4f(this.addr, row, a0, a1, a2, a3);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets all components of the matrix to zero, and the diagonal to ones.\n\t */\n\tidentity() : Mat4\n\t{\n\t\tm.mat4_identity(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales all the components of the matrix by the specified factor.\n\t */\n\tscale (f: number) : Mat4;\n\t/**\n\t * Appends a `scale` matrix constructed with the specified factors.\n\t */\n\tscale (sx: number, sy: number, sz: number) : Mat4;\n\n\tscale (sx: number, sy: number=null, sz: number=null) : Mat4\n\t{\n\t\tif (sy === null)\n\t\t\tm.mat4_scale1f(this.addr, sx);\n\t\telse\n\t\t\tm.mat4_scale3f(this.addr, sx, sy, sz);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transposes the matrix.\n\t */\n\ttranspose() : Mat4\n\t{\n\t\tm.mat4_transpose(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the determinant of the matrix.\n\t */\n\tdet() : number\n\t{\n\t\treturn m.mat4_det(this.addr);\n\t}\n\n\t/**\n\t * Appends the given matrix by using matrix multiplication.\n\t */\n\tappend (matrix: Mat4) : Mat4\n\t{\n\t\tm.mat4_append1m(this.addr, matrix.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a translation matrix constructed with the specified deltas.\n\t */\n\ttranslate (dx: number, dy: number, dz: number) : Mat4\n\t{\n\t\tm.mat4_translate3f(this.addr, dx, dy, dz);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a rotation matrix constructed for the specified angle (radians) along the X-axis.\n\t */\n\trotateX (angle: number) : Mat4\n\t{\n\t\tm.mat4_rotateX(this.addr, angle);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a rotation matrix constructed for the specified angle (radians) along the Y-axis.\n\t */\n\trotateY (angle: number) : Mat4\n\t{\n\t\tm.mat4_rotateY(this.addr, angle);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a rotation matrix constructed for the specified angle (radians) along the Z-axis.\n\t */\n\trotateZ (angle: number) : Mat4\n\t{\n\t\tm.mat4_rotateZ(this.addr, angle);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the matrix.\n\t */\n\ttoString() : string\n\t{\n\t\treturn '[' + Array.from(this.data).join(', ') + ']';\n\t}\n};\n","module.exports = \"224052483937a0bf\";"],"names":["loadFromDataUri","$X9A9e$loadFromDataUri","$485e585505f5c80a$var$m","$485e585505f5c80a$export$2e2bcd8739ae039","_","BYTES","Float32Array","BYTES_PER_ELEMENT","bind","module","alloc","x","y","vec2_alloc2f","materialize","addr","vec2_materialize","constructor","data","mapFloat32Array","free","vec2_free","clone","vec2_clone","set","vec2_set1v","vec2_set2f","setX","setY","zero","vec2_zero","iszero","vec2_iszero","equals","vec2_equals1v","vec2_equals2f","almost","epsilon","vec2_almost1v","vec2_almost2f","neg","vec2_neg","inv","vec2_inv","abs","vec2_abs","translate","dx","dy","vec2_translate1v","vec2_translate2f","rotate","angle","cx","cy","vec2_rotate3f","add","vec2_add1v","vec2_add2f","sub","vec2_sub1v","vec2_sub2f","scale","fx","fy","vec2_scale1v","vec2_scale1f","vec2_scale2f","floor","vec2_floor","ceil","vec2_ceil","trunc","vec2_trunc","fract","vec2_fract","dot","vec2_dot1v","vec2_dot2f","mag2","vec2_mag2","mag","vec2_mag","unit","vec2_unit","major","vec2_major","minor","vec2_minor","sign","vec2_sign","toString","$baf50d9434a9dd81$var$m","$baf50d9434a9dd81$export$2e2bcd8739ae039","z","w","vec4_alloc4f","vec4_materialize","vec4_free","vec4_clone","vec4_set1v","vec4_set4f","setZ","setW","vec4_zero","vec4_iszero","vec4_equals1v","vec4_equals2f","vec4_equals4f","vec4_almost1v","vec4_almost2f","vec4_almost4f","vec4_neg","vec4_inv","vec4_abs","dz","dw","vec4_translate1v","vec4_translate2f","vec4_translate4f","vec4_add1v","vec4_add2f","vec4_add4f","vec4_sub1v","vec4_sub2f","vec4_sub4f","fz","fw","vec4_scale1v","vec4_scale1f","vec4_scale2f","vec4_scale4f","vec4_floor","vec4_ceil","vec4_trunc","vec4_fract","vec4_dot1v","vec4_dot2f","vec4_dot4f","vec4_mag2","vec4_mag","vec4_unit","vec4_major","vec4_minor","vec4_sign","$8d9a8566653c0099$var$m","$8d9a8566653c0099$export$2e2bcd8739ae039","x1","y1","x2","y2","rect_alloc4f","rect_alloc2f","rect_materialize","rect_free","rect_clone","rect_zero","reset","rect_reset","extend","rect_extend1v","rect_extend2f","rect_translate1v","rect_translate2f","center","normalized","rect_center","rect_set1r","rect_set4f","rect_equals1r","rect_equals4f","contains","rect_contains1r","rect_contains1v","rect_contains2f","rect_contains4f","union","rect_union1r","rect_union4f","intersects","rect_intersects1r","rect_intersects4f","intersection","rect_intersection1r","rect_intersection4f","resize","width","height","topLeft","rect_resize","resizeBy","dWidth","dHeight","rect_resizeBy","rect_width","rect_height","isRight","rect_isRight","area","strict","rect_area","rect_floor","rect_ceil","rect_trunc","rect_fract","$f4e62a7eed23d321$var$m","$f4e62a7eed23d321$export$2e2bcd8739ae039","mat3_alloc","mat3_materialize","mat3_free","mat3_clone","fill","value","mat3_fill1f","a0","a1","a2","mat3_set1m","mat3_set1f","mat3_set1i3f","col","mat3_col1i3f","row","mat3_row1i3f","identity","mat3_identity","sx","sy","mat3_scale1f","mat3_scale2f","transpose","mat3_transpose","det","mat3_det","append","matrix","mat3_append1m","mat3_translate2f","mat3_rotate1f","Array","from","join","$3514beae8516eb55$var$m","$3514beae8516eb55$export$2e2bcd8739ae039","mat4_alloc","mat4_materialize","mat4_free","mat4_clone","mat4_fill1f","a3","mat4_set1m","mat4_set1f","mat4_set1i4f","mat4_col1i4f","mat4_row1i4f","mat4_identity","sz","mat4_scale1f","mat4_scale3f","mat4_transpose","mat4_det","mat4_append1m","mat4_translate3f","rotateX","mat4_rotateX","rotateY","mat4_rotateY","rotateZ","mat4_rotateZ","$7eac9db634e83dd9$exports","$c5a61c35cbd537f5$export$130be424786e852f","$c5a61c35cbd537f5$export$2cd8252107eb640b","Promise","resolve","reject","a","__esModule","default","then","asylModule","catch","init","Vec2","Vec4","Rect","Mat3","Mat4"],"version":3,"file":"froxel-math.m.js.map"}