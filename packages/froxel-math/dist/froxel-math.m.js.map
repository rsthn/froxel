{"mappings":"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","sources":["src/vec2.ts","src/vec4.ts","src/rect.ts","src/mat3.ts","src/main.ts","../../../../../Users/Master/AppData/Local/pnpm/global/5/.pnpm/@parcel+runtime-js@2.7.0_@parcel+core@2.7.0/node_modules/@parcel/runtime-js/lib/bundles/runtime-b6ffbd64fd057ae9.js"],"sourcesContent":["\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 2D Vector.\n */\nexport default class Vec2\n{\n\t/**\n\t * Address of underlying vec2.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new vector with the specified coordinates.\n\t */\n\tstatic alloc (x:number=0, y:number=0) : Vec2 {\n\t\treturn new Vec2(m.vec2_alloc2f(x, y));\n\t}\n\n\t/**\n\t * Constructs the vector with the specified coordinates.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 2);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() {\n\t\tm.vec2_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a new vector with the same coordinates.\n\t */\n\tclone() : Vec2 {\n\t\treturn new Vec2(m.vec2_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector from a Vec2 object.\n\t */\n\tset (v: Vec2) : Vec2;\n\t/**\n\t * Sets the coordinates of the vector.\n\t */\n\tset (x: number, y: number) : Vec2;\n\n\tset (x: Vec2|number, y: number = null) : Vec2\n\t{\n\t\tif (y === null)\n\t\t\tm.vec2_set1v(this.addr, (x as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_set2f(this.addr, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the X-coordinate of the vector.\n\t */\n\tsetX (x: number) : Vec2 {\n\t\tthis.data[0] = x;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Y-coordinate of the vector.\n\t */\n\tsetY (y: number) : Vec2 {\n\t\tthis.data[1] = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X-coordinate.\n\t */\n\tx() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y-coordinate.\n\t */\n\ty() : number {\n\t\treturn this.data[1];\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector to zero.\n\t */\n\tzero() : Vec2 {\n\t\tm.vec2_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if the vector coordinates are zero.\n\t */\n\tiszero() : boolean {\n\t\treturn m.vec2_iszero(this.addr);\n\t}\n\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given Vec2.\n\t */\n\tequals (v: Vec2) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number) : boolean;\n\n\tequals (x: Vec2|number, y: number=null) : boolean\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec2_equals1v(this.addr, (x as Vec2).addr);\n\n\t\treturn m.vec2_equals2f(this.addr, x, y);\n\t}\n\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (v: Vec2, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, epsilon: number) : boolean;\n\n\talmost (x: Vec2|number, y: number=null, epsilon: number=null) : boolean\n\t{\n\t\tif (epsilon === null)\n\t\t\treturn m.vec2_almost1v(this.addr, (x as Vec2).addr, y);\n\n\t\treturn m.vec2_almost2f(this.addr, x, y, epsilon);\n\t}\n\n\t/**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */\n\tneg() : Vec2 {\n\t\tm.vec2_neg(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */\n\tinv() : Vec2 {\n\t\tm.vec2_inv(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Changes the components of the vector to their absolute value.\n\t */\n\tabs() : Vec2 {\n\t\tm.vec2_abs(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec2 to the vector.\n\t */\n\ttranslate (v: Vec2) : Vec2;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number) : Vec2;\n\n\ttranslate (dx: Vec2|number, dy: number=null) : Vec2\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_translate1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_translate2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rotates the vector by the specified angle using the specified (optional) origin point.\n\t */\n\trotate (angle: number, cx: number=0, cy: number=0) : Vec2\n\t{\n\t\tm.vec2_rotate3f(this.addr, angle, cx, cy);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec2 to the vector.\n\t */\n\tadd (v: Vec2) : Vec2;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number) : Vec2;\n\n\tadd (dx: Vec2|number, dy: number=null)\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_add1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_add2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtracts the coordinates of the given Vec2 from the vector.\n\t */\n\tsub (v: Vec2) : Vec2;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number) : Vec2;\n\n\tsub (dx: Vec2|number, dy: number=null)\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_sub1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_sub2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales each components of the vector by the respective component of the given one.\n\t */\n\tscale (v: Vec2) : Vec2;\n\t/**\n\t * Scales both components of the vector by the given factor.\n\t */\n\tscale (factor: number) : Vec2;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number) : Vec2;\n\n\tscale (fx: Vec2|number, fy: number=null) : Vec2\n\t{\n\t\tif (fy === null)\n\t\t{\n\t\t\tif (fx instanceof Vec2)\n\t\t\t\tm.vec2_scale1v(this.addr, fx.addr);\n\t\t\telse\n\t\t\t\tm.vec2_scale1f(this.addr, fx);\n\t\t}\n\t\telse\n\t\t\tm.vec2_scale2f(this.addr, fx, fy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `floor` on the components of the vector.\n\t */\n\tfloor() : Vec2 {\n\t\tm.vec2_floor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the components of the vector.\n\t */\n\tceil() : Vec2 {\n\t\tm.vec2_ceil(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their integer parts.\n\t */\n\ttrunc() : Vec2 {\n\t\tm.vec2_trunc(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their fractional parts.\n\t */\n\tfract() : Vec2 {\n\t\tm.vec2_fract(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the dot product of the vectors.\n\t */\n\tdot (v: Vec2) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number) : number;\n\n\tdot (x: Vec2|number, y: number=null) : number\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec2_dot1v(this.addr, (x as Vec2).addr);\n\n\t\treturn m.vec2_dot2f(this.addr, x, y);\n\t}\n\n\t/**\n\t * Returns the squared magnitude of the vector.\n\t */\n\tmag2() : number {\n\t\treturn m.vec2_mag2(this.addr);\n\t}\n\n\t/**\n\t * Returns the magnitude of the vector.\n\t */\n\tmag() : number {\n\t\treturn m.vec2_mag(this.addr);\n\t}\n\n\t/**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */\n\tunit() : Vec2 {\n\t\tm.vec2_unit(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */\n\tmajor() : Vec2 {\n\t\tm.vec2_major(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */\n\tminor() : Vec2 {\n\t\tm.vec2_minor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its sign-vector representation.\n\t */\n\tsign() : Vec2 {\n\t\tm.vec2_sign(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the coordinates of the vector.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x()}, ${this.y()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 4D Vector.\n */\nexport default class Vec4\n{\n\t/**\n\t * Address of underlying vec4.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new vector with the specified coordinates.\n\t */\n\tstatic alloc (x:number=0, y:number=0, z:number=0, w:number=0) : Vec4 {\n\t\treturn new Vec4(m.vec4_alloc4f(x, y, z, w));\n\t}\n\n\t/**\n\t * Constructs the vector with the specified coordinates.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 4);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() {\n\t\tm.vec4_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a new vector with the same coordinates.\n\t */\n\tclone() : Vec4 {\n\t\treturn new Vec4(m.vec4_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector from a Vec4 object.\n\t */\n\tset (v: Vec4) : Vec4;\n\t/**\n\t * Sets the coordinates of the vector.\n\t */\n\tset (x: number, y: number, z: number, w: number) : Vec4;\n\n\tset (x: Vec4|number, y: number = null, z: number = null, w: number = null) : Vec4\n\t{\n\t\tif (y === null) {\n\t\t\tm.vec4_set1v(this.addr, (x as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_set4f(this.addr, x, y, z, w);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the X-coordinate of the vector.\n\t */\n\tsetX (x: number) : Vec4 {\n\t\tthis.data[0] = x;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Y-coordinate of the vector.\n\t */\n\tsetY (y: number) : Vec4 {\n\t\tthis.data[1] = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Z-coordinate of the vector.\n\t */\n\tsetZ (z: number) : Vec4 {\n\t\tthis.data[2] = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the W-coordinate of the vector.\n\t */\n\tsetW (w: number) : Vec4 {\n\t\tthis.data[3] = w;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X-coordinate.\n\t */\n\tx() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y-coordinate.\n\t */\n\ty() : number {\n\t\treturn this.data[1];\n\t}\n\n\t/**\n\t * Returns the value of the Z-coordinate.\n\t */\n\tz() : number {\n\t\treturn this.data[2];\n\t}\n\n\t/**\n\t * Returns the value of the W-coordinate.\n\t */\n\tw() : number {\n\t\treturn this.data[3];\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector to zero.\n\t */\n\tzero() : Vec4 {\n\t\tm.vec4_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if the vector coordinates are zero.\n\t */\n\tiszero() : boolean {\n\t\treturn m.vec4_iszero(this.addr);\n\t}\n\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given Vec4.\n\t */\n\tequals (v: Vec4) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number, z:number, w:number) : boolean;\n\n\tequals (x: Vec4|number, y: number=null, z: number = null, w: number = null) : boolean\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec4_equals1v(this.addr, (x as Vec4).addr);\n\n\t\tif (z === null)\n\t\t\treturn m.vec4_equals2f(this.addr, x, y);\n\n\t\treturn m.vec4_equals4f(this.addr, x, y, z, w);\n\t}\n\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (v: Vec4, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, z: number, w: number, epsilon: number) : boolean;\n\n\talmost (x: Vec4|number, y: number=null, z:number=null, w:number=null, epsilon: number=null) : boolean\n\t{\n\t\tif (z === null)\n\t\t\treturn m.vec4_almost1v(this.addr, (x as Vec4).addr, y);\n\n\t\tif (w === null)\n\t\t\treturn m.vec4_almost2f(this.addr, x, y, epsilon);\n\n\t\treturn m.vec4_almost4f(this.addr, x, y, z, w, epsilon);\n\t}\n\n\t/**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */\n\tneg() : Vec4 {\n\t\tm.vec4_neg(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */\n\tinv() : Vec4 {\n\t\tm.vec4_inv(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Changes the components of the vector to their absolute value.\n\t */\n\tabs() : Vec4 {\n\t\tm.vec4_abs(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec4 to the vector.\n\t */\n\ttranslate (v: Vec4) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\ttranslate (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null) : Vec4\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_translate1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (dz === null) {\n\t\t\tm.vec4_translate2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_translate4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec4 to the vector.\n\t */\n\tadd (v: Vec4) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\tadd (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null)\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_add1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tif (dz === null) {\n\t\t\tm.vec4_add2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_add4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtracts the coordinates of the given Vec4 from the vector.\n\t */\n\tsub (v: Vec4) : Vec4;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number) : Vec4;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\tsub (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null)\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_sub1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (dz === null) {\n\t\t\tm.vec4_sub2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_sub4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales each components of the vector by the respective component of the given one.\n\t */\n\tscale (v: Vec4) : Vec4;\n\t/**\n\t * Scales both components of the vector by the given factor.\n\t */\n\tscale (factor: number) : Vec4;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number) : Vec4;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number, fz: number, fw: number) : Vec4;\n\n\tscale (fx: Vec4|number, fy: number=null, fz: number=null, fw: number=null) : Vec4\n\t{\n\t\tif (fy === null)\n\t\t{\n\t\t\tif (fx instanceof Vec4)\n\t\t\t\tm.vec4_scale1v(this.addr, fx.addr);\n\t\t\telse\n\t\t\t\tm.vec4_scale1f(this.addr, fx);\n\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tif (fz === null) {\n\t\t\tm.vec4_scale2f(this.addr, fx, fy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_scale4f(this.addr, fx, fy, fz, fw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `floor` on the components of the vector.\n\t */\n\tfloor() : Vec4 {\n\t\tm.vec4_floor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the components of the vector.\n\t */\n\tceil() : Vec4 {\n\t\tm.vec4_ceil(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their integer parts.\n\t */\n\ttrunc() : Vec4 {\n\t\tm.vec4_trunc(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their fractional parts.\n\t */\n\tfract() : Vec4 {\n\t\tm.vec4_fract(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the dot product of the vectors.\n\t */\n\tdot (v: Vec4) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number, z: number, w: number) : number;\n\n\tdot (x: Vec4|number, y: number=null, z: number=null, w: number=null) : number\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec4_dot1v(this.addr, (x as Vec4).addr);\n\n\t\tif (z === null)\n\t\t\treturn m.vec4_dot2f(this.addr, x, y);\n\n\t\treturn m.vec4_dot4f(this.addr, x, y, z, w);\n\t}\n\n\t/**\n\t * Returns the squared magnitude of the vector.\n\t */\n\tmag2() : number {\n\t\treturn m.vec4_mag2(this.addr);\n\t}\n\n\t/**\n\t * Returns the magnitude of the vector.\n\t */\n\tmag() : number {\n\t\treturn m.vec4_mag(this.addr);\n\t}\n\n\t/**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */\n\tunit() : Vec4 {\n\t\tm.vec4_unit(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */\n\tmajor() : Vec4 {\n\t\tm.vec4_major(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */\n\tminor() : Vec4 {\n\t\tm.vec4_minor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its sign-vector representation.\n\t */\n\tsign() : Vec4 {\n\t\tm.vec4_sign(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the coordinates of the vector.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x()}, ${this.y()}, ${this.z()}, ${this.w()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\nimport Vec2 from './vec2';\n\nlet m: Module = null;\n\n/**\n * Rectangle.\n */\nexport default class Rect\n{\n\t/**\n\t * Address of underlying Rect.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new rectangle of zero size.\n\t */\n\tstatic alloc() : Rect;\n\t/**\n\t * Allocates a new rectangle with the specified size.\n\t */\n\tstatic alloc (width: number, height: number, topLeft?: boolean) : Rect;\n\t/**\n\t * Allocates a new rectangle with the specified coordinates.\n\t */\n\tstatic alloc (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tstatic alloc (x1: number=null, y1: number=null, x2: number|boolean=false, y2: number=null) : Rect\n\t{\n\t\tif (x1 === null)\n\t\t\treturn new Rect(m.rect_alloc4f(0, 0, 0, 0));\n\n\t\tif (y2 === null)\n\t\t\treturn new Rect(m.rect_alloc2f(x1, y1, x2));\n\n\t\treturn new Rect(m.rect_alloc4f(x1, y1, x2, y2));\n\t}\n\n\t/**\n\t * Constructs the rectangle object.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 6);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() : void {\n\t\tm.rect_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a clone of the rectangle.\n\t */\n\tclone() : Rect {\n\t\treturn new Rect(m.rect_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets all coordinates of the rectangle to zero.\n\t */\n\tzero() : Rect {\n\t\tm.rect_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets all coordinates of the rectangle to `null` for subsequent use with `extend`.\n\t */\n\treset() : Rect {\n\t\tm.rect_reset(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Extends the rectangle to contain the specified vector coordinates.\n\t */\n\textend (v: Vec2) : Rect;\n\t/**\n\t * Extends the rectangle to contain the specified point.\n\t */\n\textend (x: number, y: number) : Rect;\n\n\textend (x: Vec2|number, y: number=null) : Rect\n\t{\n\t\tif (y === null)\n\t\t\tm.rect_extend1v(this.addr, (x as Vec2).addr);\n\t\telse\n\t\t\tm.rect_extend2f(this.addr, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Translates the rectangle by the vector coordinates.\n\t */\n\ttranslate (v: Vec2) : Rect;\n\t/**\n\t * Translates the rectangle by the given deltas.\n\t */\n\ttranslate (dx: number, dy: number) : Rect;\n\n\ttranslate (dx: Vec2|number, dy: number=null) : Rect\n\t{\n\t\tif (dy === null)\n\t\t\tm.rect_translate1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.rect_translate2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the center of the rectangle to the specified position.\t \n\t * @param normalized - When `true` the parameters `x` and `y` are treated as normalized ranging from 0 to 1 (inclusive).\n\t * !centerAt (x: number, y: number, normalized?: false) : Rect;\n\t */\n\tcenter (x: number, y: number, normalized: boolean=false) : Rect\n\t{\n\t\tm.rect_center(this.addr, x, y, normalized);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copies the coordinates from the specified rectangle.\n\t */\n\tset (r: Rect) : Rect;\n\t/**\n\t * Sets the coordinates of the rectangle.\n\t */\n\tset (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tset (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_set1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_set4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns `true` if the given rectangle coordinates are equal.\n\t */\n\tequals (r: Rect) : boolean;\n\t/**\n\t * \tReturns `true` if the coordinates are equal.\n\t */\n\tequals (x1: number, y1: number, x2: number, y2: number) : boolean;\n\t\n\tequals (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : boolean\n\t{\n\t\tif (y1 === null)\n\t\t\treturn m.rect_equals1r(this.addr, (x1 as Rect).addr);\n\n\t\treturn m.rect_equals4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Returns `true` if the rectangle contains the given one.\n\t */\n\tcontains (r: Rect) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the given one describes by the (x1, y1) to (x2, y2) coordinates.\n\t */\n\tcontains (x1: number, y1: number, x2: number, y2: number) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the vector given coordinates.\n\t */\n\tcontains (v: Vec2, epsilon?: number) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the given coordinates.\n\t */\n\tcontains (x: number, y: number, epsilon?: number) : boolean;\n\n\tcontains (x1: Rect|Vec2|number, y1: number=0, x2: number=0, y2: number=null) : boolean\n\t{\n\t\tif (x1 instanceof Rect)\n\t\t\treturn m.rect_contains1r(this.addr, x1.addr);\n\n\t\tif (x1 instanceof Vec2)\n\t\t\treturn m.rect_contains1v(this.addr, x1.addr, x2);\n\n\t\tif (y2 === null)\n\t\t\treturn m.rect_contains2f(this.addr, x1, y1, x2);\n\n\t\treturn m.rect_contains4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Sets the coordinates of the rectangle to the union of it and the given one.\n\t */\n\tunion (r: Rect) : Rect;\n\t/**\n\t * Sets the coordinates of the rectangle to the union of it and the given one.\n\t */\n\tunion (x1: number, y1: number, x2: number, y2: number) : Rect;\n\t\n\tunion (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_union1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_union4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns `true` if the rectangles intersect.\n\t */\n\tintersects (r: Rect) : Rect;\n\t/**\n\t * Returns `true` if the rectangle and the given coordinates intersect.\n\t */\n\tintersects (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tintersects (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_intersects1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_intersects4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the coordinates of the rectangle to the intersection of it and the given one.\n\t */\n\tintersection (r: Rect) : boolean;\n\t/**\n\t * Sets the coordinates of the rectangle to the intersection of it and the given one.\n\t */\n\tintersection (x1: number, y1: number, x2: number, y2: number) : boolean;\n\n\tintersection (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : boolean\n\t{\n\t\tif (y1 === null)\n\t\t\treturn m.rect_intersection1r(this.addr, (x1 as Rect).addr);\n\n\t\treturn m.rect_intersection4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Resizes the rectangle to the given size using its center or top-left corner as reference.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t * @param normalized - When `true` the `width` and `height` will be treated as normalized values ranging from 0 to 1 (inclusive).\n\t */\n\tresize (width: number, height: number, topLeft: boolean=false, normalized: boolean=false) : Rect\n\t{\n\t\tm.rect_resize (this.addr, width, height, topLeft, normalized);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resizes the rectangle using the specified deltas, relative to its center or top-left corner.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t */\n\tresizeBy (dWidth: number, dHeight: number, topLeft: boolean=false) : Rect\n\t{\n\t\tm.rect_resizeBy (this.addr, dWidth, dHeight, topLeft);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X1 coordinate.\n\t */\n\tx1() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y1 coordinate.\n\t */\n\ty1() : number {\n\t\treturn this.data[1];\n\t}\n\n\n\t/**\n\t * Returns the value of the X2 coordinate.\n\t */\n\tx2() : number {\n\t\treturn this.data[2];\n\t}\n\n\t/**\n\t * Returns the value of the Y2 coordinate.\n\t */\n\ty2() : number {\n\t\treturn this.data[3];\n\t}\n\n\t/**\n\t * Returns the value of the center X coordinate.\n\t */\n\tcx() : number {\n\t\treturn this.data[4];\n\t}\n\n\t/**\n\t * Returns the value of the center Y coordinate.\n\t */\n\tcy() : number {\n\t\treturn this.data[5];\n\t}\n\n\t/**\n\t * Returns the width of the rectangle.\n\t */\n\twidth() : number {\n\t\treturn m.rect_width (this.addr);\n\t}\n\n\t/**\n\t * Returns the height of the rectangle.\t \n\t */\n\theight() : number {\n\t\treturn m.rect_height (this.addr);\n\t}\n\n\t/**\n\t * Returns `true` if the rectangle is a right rectangle, that is: x1 < x2 and y1 < y2.\n\t */\n\tisRight() : boolean {\n\t\treturn m.rect_isRight (this.addr);\n\t}\n\n\t/**\n\t * Returns the area of the rectangle.\n\t * @param strict - Indicates if the area is returned only if the rectangle is a right rectangle.\n\t */\n\tarea (strict?: boolean) : number {\n\t\treturn m.rect_area (this.addr, strict);\n\t}\n\n\t/**\n\t * Performs `floor` on the coordinates of the rectangle.\n\t */\n\tfloor() : Rect {\n\t\tm.rect_floor (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the coordinates of the rectangle.\n\t */\n\tceil() : Rect {\n\t\tm.rect_ceil (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the rectangle coordinates to their integer parts.\n\t */\n\ttrunc() : Rect {\n\t\tm.rect_trunc (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the rectangle coordinates to their fractional parts.\n\t */\n\tfract() : Rect {\n\t\tm.rect_fract (this.addr);\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Returns the string representation of the rectangle.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x1()}, ${this.y1()}, ${this.x2()}, ${this.y2()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 3x3 Matrix.\n */\nexport default class Mat3\n{\n\t/**\n\t * Address of underlying mat3 object.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new matrix.\n\t */\n\tstatic alloc() : Mat3\n\t{\n\t\treturn new Mat3(m.mat3_alloc());\n\t}\n\n\t/**\n\t * Constructs the matrix object.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 9);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() : void {\n\t\tm.mat3_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a clone of the matrix.\n\t */\n\tclone() : Mat3 {\n\t\treturn new Mat3(m.mat3_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets all components of the matrix to the given value.\n\t */\n\tfill (value: number) : Mat3 {\n\t\tm.mat3_fill1f(this.addr, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the diagonal of the matrix to the specified value.\n\t */\n\tset (value: number) : Mat3;\n\t/**\n\t * Copies all the components from the specified matrix.\n\t */\n\tset (matrix: Mat3) : Mat3;\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tset (col: number, a0: number, a1: number, a2: number) : Mat3;\n\n\tset (value: Mat3|number, a0: number=null, a1: number=null, a2: number=null) : Mat3\n\t{\n\t\tif (value instanceof Mat3) {\n\t\t\tm.mat3_set1m(this.addr, value.addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (a0 === null) {\n\t\t\tm.mat3_set1f(this.addr, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.mat3_set1i3f(this.addr, value, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tcol (col: number, a0: number, a1: number, a2: number) : Mat3\n\t{\n\t\tm.mat3_col1i3f(this.addr, col, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a row of the matrix.\n\t */\n\trow (row: number, a0: number, a1: number, a2: number) : Mat3\n\t{\n\t\tm.mat3_row1i3f(this.addr, row, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets all components of the matrix to zero, and the diagonal to ones.\n\t */\n\tidentity() : Mat3\n\t{\n\t\tm.mat3_identity(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales all the components of the matrix by the specified factor.\n\t */\n\tscale (f: number) : Mat3;\n\t/**\n\t * Appends a `scale` matrix constructed with the specified factors.\n\t */\n\tscale (sx: number, sy: number) : Mat3;\n\n\tscale (sx: number, sy: number=null) : Mat3\n\t{\n\t\tif (sy === null)\n\t\t\tm.mat3_scale1f(this.addr, sx);\n\t\telse\n\t\t\tm.mat3_scale2f(this.addr, sx, sy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transposes the matrix.\n\t */\n\ttranspose() : Mat3\n\t{\n\t\tm.mat3_transpose(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the determinant of the matrix.\n\t */\n\tdet() : number\n\t{\n\t\treturn m.mat3_det(this.addr);\n\t}\n\n\t/**\n\t * Appends the given matrix by using matrix multiplication.\n\t */\n\tappend (matrix: Mat3) : Mat3\n\t{\n\t\tm.mat3_append1m(this.addr, matrix.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a translation matrix constructed with the specified deltas.\n\t */\n\ttranslate (dx: number, dy: number) : Mat3\n\t{\n\t\tm.mat3_translate2f(this.addr, dx, dy);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a rotation matrix constructed for the specified angle.\n\t */\n\trotate (angle: number) : Mat3\n\t{\n\t\tm.mat3_rotate1f(this.addr, angle);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the matrix.\n\t */\n\ttoString() : string\n\t{\n\t\treturn '[' + Array.from(this.data).join(', ') + ']';\n\t}\n};\n","\nimport { loadFromDataUri } from 'asyl';\n\nimport Vec2 from './vec2';\nexport { default as Vec2 } from './vec2';\nimport Vec4 from './vec4';\nexport { default as Vec4 } from './vec4';\nimport Rect from './rect';\nexport { default as Rect } from './rect';\nimport Mat3 from './mat3';\nexport { default as Mat3 } from './mat3';\n\nexport let module = null;\n\n//@ts-ignore\nimport froxel_math from 'data-url:./froxel-math.wasm';\n\n/**\n * Initializes the WebAssembly module for the froxel-math package.\n */\nexport function init () : Promise<void>\n{\n\treturn new Promise<void> (async (resolve, reject) =>\n\t{\n\t\tloadFromDataUri(froxel_math, { })\n\t\t.then(asylModule =>\n\t\t{\n\t\t\tmodule = asylModule;\n\n\t\t\tVec2.bind(module);\n\t\t\tVec4.bind(module);\n\t\t\tRect.bind(module);\n\t\t\tMat3.bind(module);\n\n\t\t\tresolve();\n\t\t})\n\t\t.catch(reject);\n\t});\n}\n","module.exports = \"a12d18363a99f024\";"],"names":["$485e585505f5c80a$var$m","$485e585505f5c80a$export$2e2bcd8739ae039","static","module","x","y","vec2_alloc2f","constructor","addr","this","data","mapFloat32Array","dtor","vec2_dtor","clone","vec2_clone","set","vec2_set1v","vec2_set2f","setX","setY","zero","vec2_zero","iszero","vec2_iszero","equals","vec2_equals1v","vec2_equals2f","almost","epsilon","vec2_almost1v","vec2_almost2f","neg","vec2_neg","inv","vec2_inv","abs","vec2_abs","translate","dx","dy","vec2_translate1v","vec2_translate2f","rotate","angle","cx","cy","vec2_rotate3f","add","vec2_add1v","vec2_add2f","sub","vec2_sub1v","vec2_sub2f","scale","fx","fy","vec2_scale1v","vec2_scale1f","vec2_scale2f","floor","vec2_floor","ceil","vec2_ceil","trunc","vec2_trunc","fract","vec2_fract","dot","vec2_dot1v","vec2_dot2f","mag2","vec2_mag2","mag","vec2_mag","unit","vec2_unit","major","vec2_major","minor","vec2_minor","sign","vec2_sign","toString","$baf50d9434a9dd81$var$m","$baf50d9434a9dd81$export$2e2bcd8739ae039","z","w","vec4_alloc4f","vec4_dtor","vec4_clone","vec4_set1v","vec4_set4f","setZ","setW","vec4_zero","vec4_iszero","vec4_equals1v","vec4_equals2f","vec4_equals4f","vec4_almost1v","vec4_almost2f","vec4_almost4f","vec4_neg","vec4_inv","vec4_abs","dz","dw","vec4_translate1v","vec4_translate2f","vec4_translate4f","vec4_add1v","vec4_add2f","vec4_add4f","vec4_sub1v","vec4_sub2f","vec4_sub4f","fz","fw","vec4_scale1v","vec4_scale1f","vec4_scale2f","vec4_scale4f","vec4_floor","vec4_ceil","vec4_trunc","vec4_fract","vec4_dot1v","vec4_dot2f","vec4_dot4f","vec4_mag2","vec4_mag","vec4_unit","vec4_major","vec4_minor","vec4_sign","$8d9a8566653c0099$var$m","$8d9a8566653c0099$export$2e2bcd8739ae039","x1","y1","x2","y2","rect_alloc4f","rect_alloc2f","rect_dtor","rect_clone","rect_zero","reset","rect_reset","extend","rect_extend1v","rect_extend2f","rect_translate1v","rect_translate2f","center","normalized","rect_center","rect_set1r","rect_set4f","rect_equals1r","rect_equals4f","contains","rect_contains1r","rect_contains1v","rect_contains2f","rect_contains4f","union","rect_union1r","rect_union4f","intersects","rect_intersects1r","rect_intersects4f","intersection","rect_intersection1r","rect_intersection4f","resize","width","height","topLeft","rect_resize","resizeBy","dWidth","dHeight","rect_resizeBy","rect_width","rect_height","isRight","rect_isRight","area","strict","rect_area","rect_floor","rect_ceil","rect_trunc","rect_fract","$f4e62a7eed23d321$var$m","$f4e62a7eed23d321$export$2e2bcd8739ae039","mat3_alloc","mat3_dtor","mat3_clone","fill","value","mat3_fill1f","a0","a1","a2","mat3_set1m","mat3_set1f","mat3_set1i3f","col","mat3_col1i3f","row","mat3_row1i3f","identity","mat3_identity","sx","sy","mat3_scale1f","mat3_scale2f","transpose","mat3_transpose","det","mat3_det","append","matrix","mat3_append1m","mat3_translate2f","mat3_rotate1f","Array","from","join","$c5a61c35cbd537f5$export$130be424786e852f","$c5a61c35cbd537f5$export$2cd8252107eb640b","Promise","async","resolve","reject","$X9A9e$loadFromDataUri","$parcel$interopDefault","then","asylModule","bind","catch"],"version":3,"file":"froxel-math.m.js.map"}