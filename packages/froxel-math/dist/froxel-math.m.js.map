{"mappings":"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","sources":["src/main.ts","src/vec2.ts","src/vec4.ts","src/rect.ts","src/mat3.ts","../../../../../Users/Strikeone88/AppData/Local/pnpm/global/5/.pnpm/@parcel+runtime-js@2.7.0_@parcel+core@2.7.0/node_modules/@parcel/runtime-js/lib/bundles/runtime-7d2aa01cb8b4af6f.js"],"sourcesContent":["\nimport { loadFromDataUri } from 'asyl';\n\nimport Vec2 from './vec2';\nexport { default as Vec2 } from './vec2';\nimport Vec4 from './vec4';\nexport { default as Vec4 } from './vec4';\nimport Rect from './rect';\nexport { default as Rect } from './rect';\nimport Mat3 from './mat3';\nexport { default as Mat3 } from './mat3';\n\nexport let module = null;\n\n//@ts-ignore\nimport froxel_math from 'data-url:./froxel-math.wasm';\n\n/**\n * Initializes the WebAssembly module for the froxel-math package.\n */\nexport function init () : Promise<void>\n{\n\treturn new Promise<void> (async (resolve, reject) =>\n\t{\n\t\tloadFromDataUri(froxel_math, { })\n\t\t.then(asylModule =>\n\t\t{\n\t\t\tmodule = asylModule;\n\n\t\t\tVec2.bind(module);\n\t\t\tVec4.bind(module);\n\t\t\tRect.bind(module);\n\t\t\tMat3.bind(module);\n\n\t\t\tresolve();\n\t\t})\n\t\t.catch(reject);\n\t});\n}\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 2D Vector.\n */\nexport default class Vec2\n{\n\t/**\n\t * Address of underlying vec2.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new vector with the specified coordinates.\n\t */\n\tstatic alloc (x:number=0, y:number=0) : Vec2 {\n\t\treturn new Vec2(m.vec2_alloc2f(x, y));\n\t}\n\n\t/**\n\t * Constructs the vector with the specified coordinates.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 2);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() {\n\t\tm.vec2_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a new vector with the same coordinates.\n\t */\n\tclone() : Vec2 {\n\t\treturn new Vec2(m.vec2_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector from a Vec2 object.\n\t */\n\tset (v: Vec2) : Vec2;\n\t/**\n\t * Sets the coordinates of the vector.\n\t */\n\tset (x: number, y: number) : Vec2;\n\n\tset (x: Vec2|number, y: number = null) : Vec2\n\t{\n\t\tif (y === null)\n\t\t\tm.vec2_set1v(this.addr, (x as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_set2f(this.addr, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the X-coordinate of the vector.\n\t */\n\tsetX (x: number) : Vec2 {\n\t\tthis.data[0] = x;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Y-coordinate of the vector.\n\t */\n\tsetY (y: number) : Vec2 {\n\t\tthis.data[1] = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X-coordinate.\n\t */\n\tx() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y-coordinate.\n\t */\n\ty() : number {\n\t\treturn this.data[1];\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector to zero.\n\t */\n\tzero() : Vec2 {\n\t\tm.vec2_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if the vector coordinates are zero.\n\t */\n\tiszero() : boolean {\n\t\treturn m.vec2_iszero(this.addr);\n\t}\n\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given Vec2.\n\t */\n\tequals (v: Vec2) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number) : boolean;\n\n\tequals (x: Vec2|number, y: number=null) : boolean\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec2_equals1v(this.addr, (x as Vec2).addr);\n\n\t\treturn m.vec2_equals2f(this.addr, x, y);\n\t}\n\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (v: Vec2, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, epsilon: number) : boolean;\n\n\talmost (x: Vec2|number, y: number=null, epsilon: number=null) : boolean\n\t{\n\t\tif (epsilon === null)\n\t\t\treturn m.vec2_almost1v(this.addr, (x as Vec2).addr, y);\n\n\t\treturn m.vec2_almost2f(this.addr, x, y, epsilon);\n\t}\n\n\t/**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */\n\tneg() : Vec2 {\n\t\tm.vec2_neg(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */\n\tinv() : Vec2 {\n\t\tm.vec2_inv(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Changes the components of the vector to their absolute value.\n\t */\n\tabs() : Vec2 {\n\t\tm.vec2_abs(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec2 to the vector.\n\t */\n\ttranslate (v: Vec2) : Vec2;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number) : Vec2;\n\n\ttranslate (dx: Vec2|number, dy: number=null) : Vec2\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_translate1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_translate2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rotates the vector by the specified angle using the specified (optional) origin point.\n\t */\n\trotate (angle: number, cx: number=0, cy: number=0) : Vec2\n\t{\n\t\tm.vec2_rotate3f(this.addr, angle, cx, cy);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec2 to the vector.\n\t */\n\tadd (v: Vec2) : Vec2;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number) : Vec2;\n\n\tadd (dx: Vec2|number, dy: number=null)\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_add1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_add2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtracts the coordinates of the given Vec2 from the vector.\n\t */\n\tsub (v: Vec2) : Vec2;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number) : Vec2;\n\n\tsub (dx: Vec2|number, dy: number=null)\n\t{\n\t\tif (dy === null)\n\t\t\tm.vec2_sub1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.vec2_sub2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales each components of the vector by the respective component of the given one.\n\t */\n\tscale (v: Vec2) : Vec2;\n\t/**\n\t * Scales both components of the vector by the given factor.\n\t */\n\tscale (factor: number) : Vec2;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number) : Vec2;\n\n\tscale (fx: Vec2|number, fy: number=null) : Vec2\n\t{\n\t\tif (fy === null)\n\t\t{\n\t\t\tif (fx instanceof Vec2)\n\t\t\t\tm.vec2_scale1v(this.addr, fx.addr);\n\t\t\telse\n\t\t\t\tm.vec2_scale1f(this.addr, fx);\n\t\t}\n\t\telse\n\t\t\tm.vec2_scale2f(this.addr, fx, fy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `floor` on the components of the vector.\n\t */\n\tfloor() : Vec2 {\n\t\tm.vec2_floor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the components of the vector.\n\t */\n\tceil() : Vec2 {\n\t\tm.vec2_ceil(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their integer parts.\n\t */\n\ttrunc() : Vec2 {\n\t\tm.vec2_trunc(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their fractional parts.\n\t */\n\tfract() : Vec2 {\n\t\tm.vec2_fract(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the dot product of the vectors.\n\t */\n\tdot (v: Vec2) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number) : number;\n\n\tdot (x: Vec2|number, y: number=null) : number\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec2_dot1v(this.addr, (x as Vec2).addr);\n\n\t\treturn m.vec2_dot2f(this.addr, x, y);\n\t}\n\n\t/**\n\t * Returns the squared magnitude of the vector.\n\t */\n\tmag2() : number {\n\t\treturn m.vec2_mag2(this.addr);\n\t}\n\n\t/**\n\t * Returns the magnitude of the vector.\n\t */\n\tmag() : number {\n\t\treturn m.vec2_mag(this.addr);\n\t}\n\n\t/**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */\n\tunit() : Vec2 {\n\t\tm.vec2_unit(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */\n\tmajor() : Vec2 {\n\t\tm.vec2_major(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */\n\tminor() : Vec2 {\n\t\tm.vec2_minor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its sign-vector representation.\n\t */\n\tsign() : Vec2 {\n\t\tm.vec2_sign(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the coordinates of the vector.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x()}, ${this.y()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 4D Vector.\n */\nexport default class Vec4\n{\n\t/**\n\t * Address of underlying vec4.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new vector with the specified coordinates.\n\t */\n\tstatic alloc (x:number=0, y:number=0, z:number=0, w:number=0) : Vec4 {\n\t\treturn new Vec4(m.vec4_alloc4f(x, y, z, w));\n\t}\n\n\t/**\n\t * Constructs the vector with the specified coordinates.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 4);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() {\n\t\tm.vec4_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a new vector with the same coordinates.\n\t */\n\tclone() : Vec4 {\n\t\treturn new Vec4(m.vec4_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector from a Vec4 object.\n\t */\n\tset (v: Vec4) : Vec4;\n\t/**\n\t * Sets the coordinates of the vector.\n\t */\n\tset (x: number, y: number, z: number, w: number) : Vec4;\n\n\tset (x: Vec4|number, y: number = null, z: number = null, w: number = null) : Vec4\n\t{\n\t\tif (y === null) {\n\t\t\tm.vec4_set1v(this.addr, (x as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_set4f(this.addr, x, y, z, w);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the X-coordinate of the vector.\n\t */\n\tsetX (x: number) : Vec4 {\n\t\tthis.data[0] = x;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Y-coordinate of the vector.\n\t */\n\tsetY (y: number) : Vec4 {\n\t\tthis.data[1] = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the Z-coordinate of the vector.\n\t */\n\tsetZ (z: number) : Vec4 {\n\t\tthis.data[2] = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the W-coordinate of the vector.\n\t */\n\tsetW (w: number) : Vec4 {\n\t\tthis.data[3] = w;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X-coordinate.\n\t */\n\tx() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y-coordinate.\n\t */\n\ty() : number {\n\t\treturn this.data[1];\n\t}\n\n\t/**\n\t * Returns the value of the Z-coordinate.\n\t */\n\tz() : number {\n\t\treturn this.data[2];\n\t}\n\n\t/**\n\t * Returns the value of the W-coordinate.\n\t */\n\tw() : number {\n\t\treturn this.data[3];\n\t}\n\n\t/**\n\t * Sets the coordinates of the vector to zero.\n\t */\n\tzero() : Vec4 {\n\t\tm.vec4_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if the vector coordinates are zero.\n\t */\n\tiszero() : boolean {\n\t\treturn m.vec4_iszero(this.addr);\n\t}\n\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given Vec4.\n\t */\n\tequals (v: Vec4) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number) : boolean;\n\t/**\n\t * Returns true if the coordinates of the vector have the same values as the given ones.\n\t */\n\tequals (x: number, y: number, z:number, w:number) : boolean;\n\n\tequals (x: Vec4|number, y: number=null, z: number = null, w: number = null) : boolean\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec4_equals1v(this.addr, (x as Vec4).addr);\n\n\t\tif (z === null)\n\t\t\treturn m.vec4_equals2f(this.addr, x, y);\n\n\t\treturn m.vec4_equals4f(this.addr, x, y, z, w);\n\t}\n\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (v: Vec4, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, epsilon: number) : boolean;\n\t/**\n\t * Returns true if the difference between the coordinates is less than the specified epsilon.\n\t */\n\talmost (x: number, y: number, z: number, w: number, epsilon: number) : boolean;\n\n\talmost (x: Vec4|number, y: number=null, z:number=null, w:number=null, epsilon: number=null) : boolean\n\t{\n\t\tif (z === null)\n\t\t\treturn m.vec4_almost1v(this.addr, (x as Vec4).addr, y);\n\n\t\tif (w === null)\n\t\t\treturn m.vec4_almost2f(this.addr, x, y, epsilon);\n\n\t\treturn m.vec4_almost4f(this.addr, x, y, z, w, epsilon);\n\t}\n\n\t/**\n\t * Negates the vector, that is changing the sign of each component in the vector.\n\t */\n\tneg() : Vec4 {\n\t\tm.vec4_neg(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inverts the vector by changing each component to its reciprocal.\n\t */\n\tinv() : Vec4 {\n\t\tm.vec4_inv(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Changes the components of the vector to their absolute value.\n\t */\n\tabs() : Vec4 {\n\t\tm.vec4_abs(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec4 to the vector.\n\t */\n\ttranslate (v: Vec4) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\ttranslate (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\ttranslate (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null) : Vec4\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_translate1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (dz === null) {\n\t\t\tm.vec4_translate2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_translate4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the coordinates of the given Vec4 to the vector.\n\t */\n\tadd (v: Vec4) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number) : Vec4;\n\t/**\n\t * Adds the given delta values to the vector.\n\t */\n\tadd (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\tadd (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null)\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_add1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tif (dz === null) {\n\t\t\tm.vec4_add2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_add4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Subtracts the coordinates of the given Vec4 from the vector.\n\t */\n\tsub (v: Vec4) : Vec4;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number) : Vec4;\n\t/**\n\t * Subtracts the given delta values from the vector.\n\t */\n\tsub (dx: number, dy: number, dz: number, dw: number) : Vec4;\n\n\tsub (dx: Vec4|number, dy: number=null, dz: number=null, dw: number=null)\n\t{\n\t\tif (dy === null) {\n\t\t\tm.vec4_sub1v(this.addr, (dx as Vec4).addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (dz === null) {\n\t\t\tm.vec4_sub2f(this.addr, dx, dy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_sub4f(this.addr, dx, dy, dz, dw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales each components of the vector by the respective component of the given one.\n\t */\n\tscale (v: Vec4) : Vec4;\n\t/**\n\t * Scales both components of the vector by the given factor.\n\t */\n\tscale (factor: number) : Vec4;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number) : Vec4;\n\t/**\n\t * Scales each components of the vector by the given factors.\n\t */\n\tscale (fx: number, fy: number, fz: number, fw: number) : Vec4;\n\n\tscale (fx: Vec4|number, fy: number=null, fz: number=null, fw: number=null) : Vec4\n\t{\n\t\tif (fy === null)\n\t\t{\n\t\t\tif (fx instanceof Vec4)\n\t\t\t\tm.vec4_scale1v(this.addr, fx.addr);\n\t\t\telse\n\t\t\t\tm.vec4_scale1f(this.addr, fx);\n\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tif (fz === null) {\n\t\t\tm.vec4_scale2f(this.addr, fx, fy);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.vec4_scale4f(this.addr, fx, fy, fz, fw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `floor` on the components of the vector.\n\t */\n\tfloor() : Vec4 {\n\t\tm.vec4_floor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the components of the vector.\n\t */\n\tceil() : Vec4 {\n\t\tm.vec4_ceil(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their integer parts.\n\t */\n\ttrunc() : Vec4 {\n\t\tm.vec4_trunc(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the vector components to their fractional parts.\n\t */\n\tfract() : Vec4 {\n\t\tm.vec4_fract(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the dot product of the vectors.\n\t */\n\tdot (v: Vec4) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number) : number;\n\t/**\n\t * Returns the dot product of the vector and the given values.\n\t */\n\tdot (x: number, y: number, z: number, w: number) : number;\n\n\tdot (x: Vec4|number, y: number=null, z: number=null, w: number=null) : number\n\t{\n\t\tif (y === null)\n\t\t\treturn m.vec4_dot1v(this.addr, (x as Vec4).addr);\n\n\t\tif (z === null)\n\t\t\treturn m.vec4_dot2f(this.addr, x, y);\n\n\t\treturn m.vec4_dot4f(this.addr, x, y, z, w);\n\t}\n\n\t/**\n\t * Returns the squared magnitude of the vector.\n\t */\n\tmag2() : number {\n\t\treturn m.vec4_mag2(this.addr);\n\t}\n\n\t/**\n\t * Returns the magnitude of the vector.\n\t */\n\tmag() : number {\n\t\treturn m.vec4_mag(this.addr);\n\t}\n\n\t/**\n\t * Normalizes the vector by dividing each component by the vector magnitude to obtain a unit vector.\n\t */\n\tunit() : Vec4 {\n\t\tm.vec4_unit(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its major-axis, that is the component with the maximum absolute value.\n\t */\n\tmajor() : Vec4 {\n\t\tm.vec4_major(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its minor-axis, that is the component with the minimum absolute value.\n\t */\n\tminor() : Vec4 {\n\t\tm.vec4_minor(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the vector to its sign-vector representation.\n\t */\n\tsign() : Vec4 {\n\t\tm.vec4_sign(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the coordinates of the vector.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x()}, ${this.y()}, ${this.z()}, ${this.w()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\nimport Vec2 from './vec2';\n\nlet m: Module = null;\n\n/**\n * Rectangle.\n */\nexport default class Rect\n{\n\t/**\n\t * Address of underlying Rect.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new rectangle of zero size.\n\t */\n\tstatic alloc() : Rect;\n\t/**\n\t * Allocates a new rectangle with the specified size.\n\t */\n\tstatic alloc (width: number, height: number, topLeft?: boolean) : Rect;\n\t/**\n\t * Allocates a new rectangle with the specified coordinates.\n\t */\n\tstatic alloc (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tstatic alloc (x1: number=null, y1: number=null, x2: number|boolean=false, y2: number=null) : Rect\n\t{\n\t\tif (x1 === null)\n\t\t\treturn new Rect(m.rect_alloc4f(0, 0, 0, 0));\n\n\t\tif (y2 === null)\n\t\t\treturn new Rect(m.rect_alloc2f(x1, y1, x2));\n\n\t\treturn new Rect(m.rect_alloc4f(x1, y1, x2, y2));\n\t}\n\n\t/**\n\t * Constructs the rectangle object.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 6);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() : void {\n\t\tm.rect_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a clone of the rectangle.\n\t */\n\tclone() : Rect {\n\t\treturn new Rect(m.rect_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets all coordinates of the rectangle to zero.\n\t */\n\tzero() : Rect {\n\t\tm.rect_zero(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets all coordinates of the rectangle to `null` for subsequent use with `extend`.\n\t */\n\treset() : Rect {\n\t\tm.rect_reset(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Extends the rectangle to contain the specified vector coordinates.\n\t */\n\textend (v: Vec2) : Rect;\n\t/**\n\t * Extends the rectangle to contain the specified point.\n\t */\n\textend (x: number, y: number) : Rect;\n\n\textend (x: Vec2|number, y: number=null) : Rect\n\t{\n\t\tif (y === null)\n\t\t\tm.rect_extend1v(this.addr, (x as Vec2).addr);\n\t\telse\n\t\t\tm.rect_extend2f(this.addr, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Translates the rectangle by the vector coordinates.\n\t */\n\ttranslate (v: Vec2) : Rect;\n\t/**\n\t * Translates the rectangle by the given deltas.\n\t */\n\ttranslate (dx: number, dy: number) : Rect;\n\n\ttranslate (dx: Vec2|number, dy: number=null) : Rect\n\t{\n\t\tif (dy === null)\n\t\t\tm.rect_translate1v(this.addr, (dx as Vec2).addr);\n\t\telse\n\t\t\tm.rect_translate2f(this.addr, dx, dy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the center of the rectangle to the specified position.\t \n\t * @param normalized - When `true` the parameters `x` and `y` are treated as normalized ranging from 0 to 1 (inclusive).\n\t * !centerAt (x: number, y: number, normalized?: false) : Rect;\n\t */\n\tcenter (x: number, y: number, normalized: boolean=false) : Rect\n\t{\n\t\tm.rect_center(this.addr, x, y, normalized);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copies the coordinates from the specified rectangle.\n\t */\n\tset (r: Rect) : Rect;\n\t/**\n\t * Sets the coordinates of the rectangle.\n\t */\n\tset (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tset (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_set1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_set4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns `true` if the given rectangle coordinates are equal.\n\t */\n\tequals (r: Rect) : boolean;\n\t/**\n\t * \tReturns `true` if the coordinates are equal.\n\t */\n\tequals (x1: number, y1: number, x2: number, y2: number) : boolean;\n\t\n\tequals (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : boolean\n\t{\n\t\tif (y1 === null)\n\t\t\treturn m.rect_equals1r(this.addr, (x1 as Rect).addr);\n\n\t\treturn m.rect_equals4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Returns `true` if the rectangle contains the given one.\n\t */\n\tcontains (r: Rect) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the given one describes by the (x1, y1) to (x2, y2) coordinates.\n\t */\n\tcontains (x1: number, y1: number, x2: number, y2: number) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the vector given coordinates.\n\t */\n\tcontains (v: Vec2, epsilon?: number) : boolean;\n\t/**\n\t * Returns `true` if the rectangle contains the given coordinates.\n\t */\n\tcontains (x: number, y: number, epsilon?: number) : boolean;\n\n\tcontains (x1: Rect|Vec2|number, y1: number=0, x2: number=0, y2: number=null) : boolean\n\t{\n\t\tif (x1 instanceof Rect)\n\t\t\treturn m.rect_contains1r(this.addr, x1.addr);\n\n\t\tif (x1 instanceof Vec2)\n\t\t\treturn m.rect_contains1v(this.addr, x1.addr, x2);\n\n\t\tif (y2 === null)\n\t\t\treturn m.rect_contains2f(this.addr, x1, y1, x2);\n\n\t\treturn m.rect_contains4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Sets the coordinates of the rectangle to the union of it and the given one.\n\t */\n\tunion (r: Rect) : Rect;\n\t/**\n\t * Sets the coordinates of the rectangle to the union of it and the given one.\n\t */\n\tunion (x1: number, y1: number, x2: number, y2: number) : Rect;\n\t\n\tunion (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_union1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_union4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns `true` if the rectangles intersect.\n\t */\n\tintersects (r: Rect) : Rect;\n\t/**\n\t * Returns `true` if the rectangle and the given coordinates intersect.\n\t */\n\tintersects (x1: number, y1: number, x2: number, y2: number) : Rect;\n\n\tintersects (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : Rect\n\t{\n\t\tif (y1 === null)\n\t\t\tm.rect_intersects1r(this.addr, (x1 as Rect).addr);\n\t\telse\n\t\t\tm.rect_intersects4f(this.addr, x1, y1, x2, y2);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the coordinates of the rectangle to the intersection of it and the given one.\n\t */\n\tintersection (r: Rect) : boolean;\n\t/**\n\t * Sets the coordinates of the rectangle to the intersection of it and the given one.\n\t */\n\tintersection (x1: number, y1: number, x2: number, y2: number) : boolean;\n\n\tintersection (x1: Rect|number, y1: number=null, x2?: number, y2?: number) : boolean\n\t{\n\t\tif (y1 === null)\n\t\t\treturn m.rect_intersection1r(this.addr, (x1 as Rect).addr);\n\n\t\treturn m.rect_intersection4f(this.addr, x1, y1, x2, y2);\n\t}\n\n\t/**\n\t * Resizes the rectangle to the given size using its center or top-left corner as reference.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t * @param normalized - When `true` the `width` and `height` will be treated as normalized values ranging from 0 to 1 (inclusive).\n\t */\n\tresize (width: number, height: number, topLeft: boolean=false, normalized: boolean=false) : Rect\n\t{\n\t\tm.rect_resize (this.addr, width, height, topLeft, normalized);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resizes the rectangle using the specified deltas, relative to its center or top-left corner.\n\t * @param topLeft - When `true` reference will be top-left corner, set to `false` to use the center.\n\t */\n\tresizeBy (dWidth: number, dHeight: number, topLeft: boolean=false) : Rect\n\t{\n\t\tm.rect_resizeBy (this.addr, dWidth, dHeight, topLeft);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value of the X1 coordinate.\n\t */\n\tx1() : number {\n\t\treturn this.data[0];\n\t}\n\n\t/**\n\t * Returns the value of the Y1 coordinate.\n\t */\n\ty1() : number {\n\t\treturn this.data[1];\n\t}\n\n\n\t/**\n\t * Returns the value of the X2 coordinate.\n\t */\n\tx2() : number {\n\t\treturn this.data[2];\n\t}\n\n\t/**\n\t * Returns the value of the Y2 coordinate.\n\t */\n\ty2() : number {\n\t\treturn this.data[3];\n\t}\n\n\t/**\n\t * Returns the value of the center X coordinate.\n\t */\n\tcx() : number {\n\t\treturn this.data[4];\n\t}\n\n\t/**\n\t * Returns the value of the center Y coordinate.\n\t */\n\tcy() : number {\n\t\treturn this.data[5];\n\t}\n\n\t/**\n\t * Returns the width of the rectangle.\n\t */\n\twidth() : number {\n\t\treturn m.rect_width (this.addr);\n\t}\n\n\t/**\n\t * Returns the height of the rectangle.\t \n\t */\n\theight() : number {\n\t\treturn m.rect_height (this.addr);\n\t}\n\n\t/**\n\t * Returns `true` if the rectangle is a right rectangle, that is: x1 < x2 and y1 < y2.\n\t */\n\tisRight() : boolean {\n\t\treturn m.rect_isRight (this.addr);\n\t}\n\n\t/**\n\t * Returns the area of the rectangle.\n\t * @param strict - Indicates if the area is returned only if the rectangle is a right rectangle.\n\t */\n\tarea (strict?: boolean) : number {\n\t\treturn m.rect_area (this.addr, strict);\n\t}\n\n\t/**\n\t * Performs `floor` on the coordinates of the rectangle.\n\t */\n\tfloor() : Rect {\n\t\tm.rect_floor (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Performs `ceil` on the coordinates of the rectangle.\n\t */\n\tceil() : Rect {\n\t\tm.rect_ceil (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the rectangle coordinates to their integer parts.\n\t */\n\ttrunc() : Rect {\n\t\tm.rect_trunc (this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Truncates the rectangle coordinates to their fractional parts.\n\t */\n\tfract() : Rect {\n\t\tm.rect_fract (this.addr);\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Returns the string representation of the rectangle.\n\t */\n\ttoString() : string\n\t{\n\t\treturn `(${this.x1()}, ${this.y1()}, ${this.x2()}, ${this.y2()})`;\n\t}\n};\n","\nimport { Module } from \"asyl\";\n\nlet m: Module = null;\n\n/**\n * 3x3 Matrix.\n */\nexport default class Mat3\n{\n\t/**\n\t * Address of underlying mat3 object.\n\t */\n\taddr: number;\n\n\t/**\n\t * Underlying vector data.\n\t */\n\tdata: Float32Array;\n\n\t/**\n\t * Binds the specified Asyl module to the class.\n\t */\n\tstatic bind (module: Module) : void {\n\t\tm = module;\n\t}\n\n\t/**\n\t * Allocates a new matrix.\n\t */\n\tstatic alloc() : Mat3\n\t{\n\t\treturn new Mat3(m.mat3_alloc());\n\t}\n\n\t/**\n\t * Constructs the matrix object.\n\t */\n\tprivate constructor (addr: number) {\n\t\tthis.addr = addr;\n\t\tthis.data = m.mapFloat32Array(addr, 9);\n\t}\n\n\t/**\n\t * Destroys the instance.\n\t */\n\tdtor() : void {\n\t\tm.mat3_dtor(this.addr);\n\t}\n\n\t/**\n\t * Returns a clone of the matrix.\n\t */\n\tclone() : Mat3 {\n\t\treturn new Mat3(m.mat3_clone(this.addr));\n\t}\n\n\t/**\n\t * Sets all components of the matrix to the given value.\n\t */\n\tfill (value: number) : Mat3 {\n\t\tm.mat3_fill1f(this.addr, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the diagonal of the matrix to the specified value.\n\t */\n\tset (value: number) : Mat3;\n\t/**\n\t * Copies all the components from the specified matrix.\n\t */\n\tset (matrix: Mat3) : Mat3;\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tset (col: number, a0: number, a1: number, a2: number) : Mat3;\n\n\tset (value: Mat3|number, a0: number=null, a1: number=null, a2: number=null) : Mat3\n\t{\n\t\tif (value instanceof Mat3) {\n\t\t\tm.mat3_set1m(this.addr, value.addr);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (a0 === null) {\n\t\t\tm.mat3_set1f(this.addr, value);\n\t\t\treturn this;\n\t\t}\n\n\t\tm.mat3_set1i3f(this.addr, value, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a column of the matrix.\n\t */\n\tcol (col: number, a0: number, a1: number, a2: number) : Mat3\n\t{\n\t\tm.mat3_col1i3f(this.addr, col, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a row of the matrix.\n\t */\n\trow (row: number, a0: number, a1: number, a2: number) : Mat3\n\t{\n\t\tm.mat3_row1i3f(this.addr, row, a0, a1, a2);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets all components of the matrix to zero, and the diagonal to ones.\n\t */\n\tidentity() : Mat3\n\t{\n\t\tm.mat3_identity(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scales all the components of the matrix by the specified factor.\n\t */\n\tscale (f: number) : Mat3;\n\t/**\n\t * Appends a `scale` matrix constructed with the specified factors.\n\t */\n\tscale (sx: number, sy: number) : Mat3;\n\n\tscale (sx: number, sy: number=null) : Mat3\n\t{\n\t\tif (sy === null)\n\t\t\tm.mat3_scale1f(this.addr, sx);\n\t\telse\n\t\t\tm.mat3_scale2f(this.addr, sx, sy);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transposes the matrix.\n\t */\n\ttranspose() : Mat3\n\t{\n\t\tm.mat3_transpose(this.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the determinant of the matrix.\n\t */\n\tdet() : number\n\t{\n\t\treturn m.mat3_det(this.addr);\n\t}\n\n\t/**\n\t * Appends the given matrix by using matrix multiplication.\n\t */\n\tappend (matrix: Mat3) : Mat3\n\t{\n\t\tm.mat3_append1m(this.addr, matrix.addr);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a translation matrix constructed with the specified deltas.\n\t */\n\ttranslate (dx: number, dy: number) : Mat3\n\t{\n\t\tm.mat3_translate2f(this.addr, dx, dy);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends a rotation matrix constructed for the specified angle.\n\t */\n\trotate (angle: number) : Mat3\n\t{\n\t\tm.mat3_rotate1f(this.addr, angle);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the string representation of the matrix.\n\t */\n\ttoString() : string\n\t{\n\t\treturn '[' + Array.from(this.data).join(', ') + ']';\n\t}\n};\n","module.exports = \"db7fd014523a624b\";"],"names":[],"version":3,"file":"froxel-math.m.js.map"}